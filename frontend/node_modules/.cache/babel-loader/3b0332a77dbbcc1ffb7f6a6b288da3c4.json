{"ast":null,"code":"/*! jQuery UI - v1.12.1 - 2017-03-19\r\n* http://jqueryui.com\r\n* Includes: widget.js, position.js, data.js, disable-selection.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/draggable.js, widgets/droppable.js, widgets/resizable.js, widgets/selectable.js, widgets/sortable.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/selectmenu.js, widgets/slider.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js\r\n* Copyright jQuery Foundation and other contributors; Licensed MIT */\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  $.ui = $.ui || {};\n  var version = $.ui.version = \"1.12.1\";\n  /*!\r\n   * jQuery UI Widget 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Widget\n  //>>group: Core\n  //>>description: Provides a factory for creating stateful widgets with a common API.\n  //>>docs: http://api.jqueryui.com/jQuery.widget/\n  //>>demos: http://jqueryui.com/widget/\n\n  var widgetUuid = 0;\n  var widgetSlice = Array.prototype.slice;\n\n  $.cleanData = function (orig) {\n    return function (elems) {\n      var events, elem, i;\n\n      for (i = 0; (elem = elems[i]) != null; i++) {\n        try {\n          // Only trigger remove when necessary to save time\n          events = $._data(elem, \"events\");\n\n          if (events && events.remove) {\n            $(elem).triggerHandler(\"remove\");\n          } // Http://bugs.jquery.com/ticket/8235\n\n        } catch (e) {}\n      }\n\n      orig(elems);\n    };\n  }($.cleanData);\n\n  $.widget = function (name, base, prototype) {\n    var existingConstructor, constructor, basePrototype; // ProxiedPrototype allows the provided prototype to remain unmodified\n    // so that it can be used as a mixin for multiple widgets (#8876)\n\n    var proxiedPrototype = {};\n    var namespace = name.split(\".\")[0];\n    name = name.split(\".\")[1];\n    var fullName = namespace + \"-\" + name;\n\n    if (!prototype) {\n      prototype = base;\n      base = $.Widget;\n    }\n\n    if ($.isArray(prototype)) {\n      prototype = $.extend.apply(null, [{}].concat(prototype));\n    } // Create selector for plugin\n\n\n    $.expr.pseudos[fullName.toLowerCase()] = function (elem) {\n      return !!$.data(elem, fullName);\n    };\n\n    $[namespace] = $[namespace] || {};\n    existingConstructor = $[namespace][name];\n\n    constructor = $[namespace][name] = function (options, element) {\n      // Allow instantiation without \"new\" keyword\n      if (!this._createWidget) {\n        return new constructor(options, element);\n      } // Allow instantiation without initializing for simple inheritance\n      // must use \"new\" keyword (the code above always passes args)\n\n\n      if (arguments.length) {\n        this._createWidget(options, element);\n      }\n    }; // Extend with the existing constructor to carry over any static properties\n\n\n    $.extend(constructor, existingConstructor, {\n      version: prototype.version,\n      // Copy the object used to create the prototype in case we need to\n      // redefine the widget later\n      _proto: $.extend({}, prototype),\n      // Track widgets that inherit from this widget in case this widget is\n      // redefined after a widget inherits from it\n      _childConstructors: []\n    });\n    basePrototype = new base(); // We need to make the options hash a property directly on the new instance\n    // otherwise we'll modify the options hash on the prototype that we're\n    // inheriting from\n\n    basePrototype.options = $.widget.extend({}, basePrototype.options);\n    $.each(prototype, function (prop, value) {\n      if (!$.isFunction(value)) {\n        proxiedPrototype[prop] = value;\n        return;\n      }\n\n      proxiedPrototype[prop] = function () {\n        function _super() {\n          return base.prototype[prop].apply(this, arguments);\n        }\n\n        function _superApply(args) {\n          return base.prototype[prop].apply(this, args);\n        }\n\n        return function () {\n          var __super = this._super;\n          var __superApply = this._superApply;\n          var returnValue;\n          this._super = _super;\n          this._superApply = _superApply;\n          returnValue = value.apply(this, arguments);\n          this._super = __super;\n          this._superApply = __superApply;\n          return returnValue;\n        };\n      }();\n    });\n    constructor.prototype = $.widget.extend(basePrototype, {\n      // TODO: remove support for widgetEventPrefix\n      // always use the name + a colon as the prefix, e.g., draggable:start\n      // don't prefix for widgets that aren't DOM-based\n      widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name\n    }, proxiedPrototype, {\n      constructor: constructor,\n      namespace: namespace,\n      widgetName: name,\n      widgetFullName: fullName\n    }); // If this widget is being redefined then we need to find all widgets that\n    // are inheriting from it and redefine all of them so that they inherit from\n    // the new version of this widget. We're essentially trying to replace one\n    // level in the prototype chain.\n\n    if (existingConstructor) {\n      $.each(existingConstructor._childConstructors, function (i, child) {\n        var childPrototype = child.prototype; // Redefine the child widget using the same prototype that was\n        // originally used, but inherit from the new version of the base\n\n        $.widget(childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto);\n      }); // Remove the list of existing child constructors from the old constructor\n      // so the old child constructors can be garbage collected\n\n      delete existingConstructor._childConstructors;\n    } else {\n      base._childConstructors.push(constructor);\n    }\n\n    $.widget.bridge(name, constructor);\n    return constructor;\n  };\n\n  $.widget.extend = function (target) {\n    var input = widgetSlice.call(arguments, 1);\n    var inputIndex = 0;\n    var inputLength = input.length;\n    var key;\n    var value;\n\n    for (; inputIndex < inputLength; inputIndex++) {\n      for (key in input[inputIndex]) {\n        value = input[inputIndex][key];\n\n        if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n          // Clone objects\n          if ($.isPlainObject(value)) {\n            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : // Don't extend strings, arrays, etc. with objects\n            $.widget.extend({}, value); // Copy everything else by reference\n          } else {\n            target[key] = value;\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  $.widget.bridge = function (name, object) {\n    var fullName = object.prototype.widgetFullName || name;\n\n    $.fn[name] = function (options) {\n      var isMethodCall = typeof options === \"string\";\n      var args = widgetSlice.call(arguments, 1);\n      var returnValue = this;\n\n      if (isMethodCall) {\n        // If this is an empty collection, we need to have the instance method\n        // return undefined instead of the jQuery instance\n        if (!this.length && options === \"instance\") {\n          returnValue = undefined;\n        } else {\n          this.each(function () {\n            var methodValue;\n            var instance = $.data(this, fullName);\n\n            if (options === \"instance\") {\n              returnValue = instance;\n              return false;\n            }\n\n            if (!instance) {\n              return $.error(\"cannot call methods on \" + name + \" prior to initialization; \" + \"attempted to call method '\" + options + \"'\");\n            }\n\n            if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n              return $.error(\"no such method '\" + options + \"' for \" + name + \" widget instance\");\n            }\n\n            methodValue = instance[options].apply(instance, args);\n\n            if (methodValue !== instance && methodValue !== undefined) {\n              returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;\n              return false;\n            }\n          });\n        }\n      } else {\n        // Allow multiple hashes to be passed on init\n        if (args.length) {\n          options = $.widget.extend.apply(null, [options].concat(args));\n        }\n\n        this.each(function () {\n          var instance = $.data(this, fullName);\n\n          if (instance) {\n            instance.option(options || {});\n\n            if (instance._init) {\n              instance._init();\n            }\n          } else {\n            $.data(this, fullName, new object(options, this));\n          }\n        });\n      }\n\n      return returnValue;\n    };\n  };\n\n  $.Widget = function ()\n  /* options, element */\n  {};\n\n  $.Widget._childConstructors = [];\n  $.Widget.prototype = {\n    widgetName: \"widget\",\n    widgetEventPrefix: \"\",\n    defaultElement: \"<div>\",\n    options: {\n      classes: {},\n      disabled: false,\n      // Callbacks\n      create: null\n    },\n    _createWidget: function _createWidget(options, element) {\n      element = $(element || this.defaultElement || this)[0];\n      this.element = $(element);\n      this.uuid = widgetUuid++;\n      this.eventNamespace = \".\" + this.widgetName + this.uuid;\n      this.bindings = $();\n      this.hoverable = $();\n      this.focusable = $();\n      this.classesElementLookup = {};\n\n      if (element !== this) {\n        $.data(element, this.widgetFullName, this);\n\n        this._on(true, this.element, {\n          remove: function remove(event) {\n            if (event.target === element) {\n              this.destroy();\n            }\n          }\n        });\n\n        this.document = $(element.style ? // Element within the document\n        element.ownerDocument : // Element is window or document\n        element.document || element);\n        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);\n      }\n\n      this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);\n\n      this._create();\n\n      if (this.options.disabled) {\n        this._setOptionDisabled(this.options.disabled);\n      }\n\n      this._trigger(\"create\", null, this._getCreateEventData());\n\n      this._init();\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      return {};\n    },\n    _getCreateEventData: $.noop,\n    _create: $.noop,\n    _init: $.noop,\n    destroy: function destroy() {\n      var that = this;\n\n      this._destroy();\n\n      $.each(this.classesElementLookup, function (key, value) {\n        that._removeClass(value, key);\n      }); // We can probably remove the unbind calls in 2.0\n      // all event bindings should go through this._on()\n\n      this.element.off(this.eventNamespace).removeData(this.widgetFullName);\n      this.widget().off(this.eventNamespace).removeAttr(\"aria-disabled\"); // Clean up events and states\n\n      this.bindings.off(this.eventNamespace);\n    },\n    _destroy: $.noop,\n    widget: function widget() {\n      return this.element;\n    },\n    option: function option(key, value) {\n      var options = key;\n      var parts;\n      var curOption;\n      var i;\n\n      if (arguments.length === 0) {\n        // Don't return a reference to the internal hash\n        return $.widget.extend({}, this.options);\n      }\n\n      if (typeof key === \"string\") {\n        // Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n        options = {};\n        parts = key.split(\".\");\n        key = parts.shift();\n\n        if (parts.length) {\n          curOption = options[key] = $.widget.extend({}, this.options[key]);\n\n          for (i = 0; i < parts.length - 1; i++) {\n            curOption[parts[i]] = curOption[parts[i]] || {};\n            curOption = curOption[parts[i]];\n          }\n\n          key = parts.pop();\n\n          if (arguments.length === 1) {\n            return curOption[key] === undefined ? null : curOption[key];\n          }\n\n          curOption[key] = value;\n        } else {\n          if (arguments.length === 1) {\n            return this.options[key] === undefined ? null : this.options[key];\n          }\n\n          options[key] = value;\n        }\n      }\n\n      this._setOptions(options);\n\n      return this;\n    },\n    _setOptions: function _setOptions(options) {\n      var key;\n\n      for (key in options) {\n        this._setOption(key, options[key]);\n      }\n\n      return this;\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"classes\") {\n        this._setOptionClasses(value);\n      }\n\n      this.options[key] = value;\n\n      if (key === \"disabled\") {\n        this._setOptionDisabled(value);\n      }\n\n      return this;\n    },\n    _setOptionClasses: function _setOptionClasses(value) {\n      var classKey, elements, currentElements;\n\n      for (classKey in value) {\n        currentElements = this.classesElementLookup[classKey];\n\n        if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) {\n          continue;\n        } // We are doing this to create a new jQuery object because the _removeClass() call\n        // on the next line is going to destroy the reference to the current elements being\n        // tracked. We need to save a copy of this collection so that we can add the new classes\n        // below.\n\n\n        elements = $(currentElements.get());\n\n        this._removeClass(currentElements, classKey); // We don't use _addClass() here, because that uses this.options.classes\n        // for generating the string of classes. We want to use the value passed in from\n        // _setOption(), this is the new value of the classes option which was passed to\n        // _setOption(). We pass this value directly to _classes().\n\n\n        elements.addClass(this._classes({\n          element: elements,\n          keys: classKey,\n          classes: value,\n          add: true\n        }));\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._toggleClass(this.widget(), this.widgetFullName + \"-disabled\", null, !!value); // If the widget is becoming disabled, then nothing is interactive\n\n\n      if (value) {\n        this._removeClass(this.hoverable, null, \"ui-state-hover\");\n\n        this._removeClass(this.focusable, null, \"ui-state-focus\");\n      }\n    },\n    enable: function enable() {\n      return this._setOptions({\n        disabled: false\n      });\n    },\n    disable: function disable() {\n      return this._setOptions({\n        disabled: true\n      });\n    },\n    _classes: function _classes(options) {\n      var full = [];\n      var that = this;\n      options = $.extend({\n        element: this.element,\n        classes: this.options.classes || {}\n      }, options);\n\n      function processClassString(classes, checkOption) {\n        var current, i;\n\n        for (i = 0; i < classes.length; i++) {\n          current = that.classesElementLookup[classes[i]] || $();\n\n          if (options.add) {\n            current = $($.uniqueSort(current.get().concat(options.element.get())));\n          } else {\n            current = $(current.not(options.element).get());\n          }\n\n          that.classesElementLookup[classes[i]] = current;\n          full.push(classes[i]);\n\n          if (checkOption && options.classes[classes[i]]) {\n            full.push(options.classes[classes[i]]);\n          }\n        }\n      }\n\n      this._on(options.element, {\n        \"remove\": \"_untrackClassesElement\"\n      });\n\n      if (options.keys) {\n        processClassString(options.keys.match(/\\S+/g) || [], true);\n      }\n\n      if (options.extra) {\n        processClassString(options.extra.match(/\\S+/g) || []);\n      }\n\n      return full.join(\" \");\n    },\n    _untrackClassesElement: function _untrackClassesElement(event) {\n      var that = this;\n      $.each(that.classesElementLookup, function (key, value) {\n        if ($.inArray(event.target, value) !== -1) {\n          that.classesElementLookup[key] = $(value.not(event.target).get());\n        }\n      });\n    },\n    _removeClass: function _removeClass(element, keys, extra) {\n      return this._toggleClass(element, keys, extra, false);\n    },\n    _addClass: function _addClass(element, keys, extra) {\n      return this._toggleClass(element, keys, extra, true);\n    },\n    _toggleClass: function _toggleClass(element, keys, extra, add) {\n      add = typeof add === \"boolean\" ? add : extra;\n      var shift = typeof element === \"string\" || element === null,\n          options = {\n        extra: shift ? keys : extra,\n        keys: shift ? element : keys,\n        element: shift ? this.element : element,\n        add: add\n      };\n      options.element.toggleClass(this._classes(options), add);\n      return this;\n    },\n    _on: function _on(suppressDisabledCheck, element, handlers) {\n      var delegateElement;\n      var instance = this; // No suppressDisabledCheck flag, shuffle arguments\n\n      if (typeof suppressDisabledCheck !== \"boolean\") {\n        handlers = element;\n        element = suppressDisabledCheck;\n        suppressDisabledCheck = false;\n      } // No element argument, shuffle and use this.element\n\n\n      if (!handlers) {\n        handlers = element;\n        element = this.element;\n        delegateElement = this.widget();\n      } else {\n        element = delegateElement = $(element);\n        this.bindings = this.bindings.add(element);\n      }\n\n      $.each(handlers, function (event, handler) {\n        function handlerProxy() {\n          // Allow widgets to customize the disabled handling\n          // - disabled as an array instead of boolean\n          // - disabled class as method for disabling individual parts\n          if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass(\"ui-state-disabled\"))) {\n            return;\n          }\n\n          return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n        } // Copy the guid so direct unbinding works\n\n\n        if (typeof handler !== \"string\") {\n          handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;\n        }\n\n        var match = event.match(/^([\\w:-]*)\\s*(.*)$/);\n        var eventName = match[1] + instance.eventNamespace;\n        var selector = match[2];\n\n        if (selector) {\n          delegateElement.on(eventName, selector, handlerProxy);\n        } else {\n          element.on(eventName, handlerProxy);\n        }\n      });\n    },\n    _off: function _off(element, eventName) {\n      eventName = (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace;\n      element.off(eventName).off(eventName); // Clear the stack to avoid memory leaks (#10056)\n\n      this.bindings = $(this.bindings.not(element).get());\n      this.focusable = $(this.focusable.not(element).get());\n      this.hoverable = $(this.hoverable.not(element).get());\n    },\n    _delay: function _delay(handler, delay) {\n      function handlerProxy() {\n        return (typeof handler === \"string\" ? instance[handler] : handler).apply(instance, arguments);\n      }\n\n      var instance = this;\n      return setTimeout(handlerProxy, delay || 0);\n    },\n    _hoverable: function _hoverable(element) {\n      this.hoverable = this.hoverable.add(element);\n\n      this._on(element, {\n        mouseenter: function mouseenter(event) {\n          this._addClass($(event.currentTarget), null, \"ui-state-hover\");\n        },\n        mouseleave: function mouseleave(event) {\n          this._removeClass($(event.currentTarget), null, \"ui-state-hover\");\n        }\n      });\n    },\n    _focusable: function _focusable(element) {\n      this.focusable = this.focusable.add(element);\n\n      this._on(element, {\n        focusin: function focusin(event) {\n          this._addClass($(event.currentTarget), null, \"ui-state-focus\");\n        },\n        focusout: function focusout(event) {\n          this._removeClass($(event.currentTarget), null, \"ui-state-focus\");\n        }\n      });\n    },\n    _trigger: function _trigger(type, event, data) {\n      var prop, orig;\n      var callback = this.options[type];\n      data = data || {};\n      event = $.Event(event);\n      event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(); // The original event may come from any element\n      // so we need to reset the target on the new event\n\n      event.target = this.element[0]; // Copy original event properties over to the new event\n\n      orig = event.originalEvent;\n\n      if (orig) {\n        for (prop in orig) {\n          if (!(prop in event)) {\n            event[prop] = orig[prop];\n          }\n        }\n      }\n\n      this.element.trigger(event, data);\n      return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());\n    }\n  };\n  $.each({\n    show: \"fadeIn\",\n    hide: \"fadeOut\"\n  }, function (method, defaultEffect) {\n    $.Widget.prototype[\"_\" + method] = function (element, options, callback) {\n      if (typeof options === \"string\") {\n        options = {\n          effect: options\n        };\n      }\n\n      var hasOptions;\n      var effectName = !options ? method : options === true || typeof options === \"number\" ? defaultEffect : options.effect || defaultEffect;\n      options = options || {};\n\n      if (typeof options === \"number\") {\n        options = {\n          duration: options\n        };\n      }\n\n      hasOptions = !$.isEmptyObject(options);\n      options.complete = callback;\n\n      if (options.delay) {\n        element.delay(options.delay);\n      }\n\n      if (hasOptions && $.effects && $.effects.effect[effectName]) {\n        element[method](options);\n      } else if (effectName !== method && element[effectName]) {\n        element[effectName](options.duration, options.easing, callback);\n      } else {\n        element.queue(function (next) {\n          $(this)[method]();\n\n          if (callback) {\n            callback.call(element[0]);\n          }\n\n          next();\n        });\n      }\n    };\n  });\n  var widget = $.widget;\n  /*!\r\n   * jQuery UI Position 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   *\r\n   * http://api.jqueryui.com/position/\r\n   */\n  //>>label: Position\n  //>>group: Core\n  //>>description: Positions elements relative to other elements.\n  //>>docs: http://api.jqueryui.com/position/\n  //>>demos: http://jqueryui.com/position/\n\n  (function () {\n    var cachedScrollbarWidth,\n        max = Math.max,\n        abs = Math.abs,\n        rhorizontal = /left|center|right/,\n        rvertical = /top|center|bottom/,\n        roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\n        rposition = /^\\w+/,\n        rpercent = /%$/,\n        _position = $.fn.position;\n\n    function getOffsets(offsets, width, height) {\n      return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)];\n    }\n\n    function parseCss(element, property) {\n      return parseInt($.css(element, property), 10) || 0;\n    }\n\n    function getDimensions(elem) {\n      var raw = elem[0];\n\n      if (raw.nodeType === 9) {\n        return {\n          width: elem.width(),\n          height: elem.height(),\n          offset: {\n            top: 0,\n            left: 0\n          }\n        };\n      }\n\n      if ($.isWindow(raw)) {\n        return {\n          width: elem.width(),\n          height: elem.height(),\n          offset: {\n            top: elem.scrollTop(),\n            left: elem.scrollLeft()\n          }\n        };\n      }\n\n      if (raw.preventDefault) {\n        return {\n          width: 0,\n          height: 0,\n          offset: {\n            top: raw.pageY,\n            left: raw.pageX\n          }\n        };\n      }\n\n      return {\n        width: elem.outerWidth(),\n        height: elem.outerHeight(),\n        offset: elem.offset()\n      };\n    }\n\n    $.position = {\n      scrollbarWidth: function scrollbarWidth() {\n        if (cachedScrollbarWidth !== undefined) {\n          return cachedScrollbarWidth;\n        }\n\n        var w1,\n            w2,\n            div = $(\"<div \" + \"style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>\" + \"<div style='height:100px;width:auto;'></div></div>\"),\n            innerDiv = div.children()[0];\n        $(\"body\").append(div);\n        w1 = innerDiv.offsetWidth;\n        div.css(\"overflow\", \"scroll\");\n        w2 = innerDiv.offsetWidth;\n\n        if (w1 === w2) {\n          w2 = div[0].clientWidth;\n        }\n\n        div.remove();\n        return cachedScrollbarWidth = w1 - w2;\n      },\n      getScrollInfo: function getScrollInfo(within) {\n        var overflowX = within.isWindow || within.isDocument ? \"\" : within.element.css(\"overflow-x\"),\n            overflowY = within.isWindow || within.isDocument ? \"\" : within.element.css(\"overflow-y\"),\n            hasOverflowX = overflowX === \"scroll\" || overflowX === \"auto\" && within.width < within.element[0].scrollWidth,\n            hasOverflowY = overflowY === \"scroll\" || overflowY === \"auto\" && within.height < within.element[0].scrollHeight;\n        return {\n          width: hasOverflowY ? $.position.scrollbarWidth() : 0,\n          height: hasOverflowX ? $.position.scrollbarWidth() : 0\n        };\n      },\n      getWithinInfo: function getWithinInfo(element) {\n        var withinElement = $(element || window),\n            isWindow = $.isWindow(withinElement[0]),\n            isDocument = !!withinElement[0] && withinElement[0].nodeType === 9,\n            hasOffset = !isWindow && !isDocument;\n        return {\n          element: withinElement,\n          isWindow: isWindow,\n          isDocument: isDocument,\n          offset: hasOffset ? $(element).offset() : {\n            left: 0,\n            top: 0\n          },\n          scrollLeft: withinElement.scrollLeft(),\n          scrollTop: withinElement.scrollTop(),\n          width: withinElement.outerWidth(),\n          height: withinElement.outerHeight()\n        };\n      }\n    };\n\n    $.fn.position = function (options) {\n      if (!options || !options.of) {\n        return _position.apply(this, arguments);\n      } // Make a copy, we don't want to modify arguments\n\n\n      options = $.extend({}, options);\n      var atOffset,\n          targetWidth,\n          targetHeight,\n          targetOffset,\n          basePosition,\n          dimensions,\n          target = $(options.of),\n          within = $.position.getWithinInfo(options.within),\n          scrollInfo = $.position.getScrollInfo(within),\n          collision = (options.collision || \"flip\").split(\" \"),\n          offsets = {};\n      dimensions = getDimensions(target);\n\n      if (target[0].preventDefault) {\n        // Force left top to allow flipping\n        options.at = \"left top\";\n      }\n\n      targetWidth = dimensions.width;\n      targetHeight = dimensions.height;\n      targetOffset = dimensions.offset; // Clone to reuse original targetOffset later\n\n      basePosition = $.extend({}, targetOffset); // Force my and at to have valid horizontal and vertical positions\n      // if a value is missing or invalid, it will be converted to center\n\n      $.each([\"my\", \"at\"], function () {\n        var pos = (options[this] || \"\").split(\" \"),\n            horizontalOffset,\n            verticalOffset;\n\n        if (pos.length === 1) {\n          pos = rhorizontal.test(pos[0]) ? pos.concat([\"center\"]) : rvertical.test(pos[0]) ? [\"center\"].concat(pos) : [\"center\", \"center\"];\n        }\n\n        pos[0] = rhorizontal.test(pos[0]) ? pos[0] : \"center\";\n        pos[1] = rvertical.test(pos[1]) ? pos[1] : \"center\"; // Calculate offsets\n\n        horizontalOffset = roffset.exec(pos[0]);\n        verticalOffset = roffset.exec(pos[1]);\n        offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0]; // Reduce to just the positions without the offsets\n\n        options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];\n      }); // Normalize collision option\n\n      if (collision.length === 1) {\n        collision[1] = collision[0];\n      }\n\n      if (options.at[0] === \"right\") {\n        basePosition.left += targetWidth;\n      } else if (options.at[0] === \"center\") {\n        basePosition.left += targetWidth / 2;\n      }\n\n      if (options.at[1] === \"bottom\") {\n        basePosition.top += targetHeight;\n      } else if (options.at[1] === \"center\") {\n        basePosition.top += targetHeight / 2;\n      }\n\n      atOffset = getOffsets(offsets.at, targetWidth, targetHeight);\n      basePosition.left += atOffset[0];\n      basePosition.top += atOffset[1];\n      return this.each(function () {\n        var collisionPosition,\n            using,\n            elem = $(this),\n            elemWidth = elem.outerWidth(),\n            elemHeight = elem.outerHeight(),\n            marginLeft = parseCss(this, \"marginLeft\"),\n            marginTop = parseCss(this, \"marginTop\"),\n            collisionWidth = elemWidth + marginLeft + parseCss(this, \"marginRight\") + scrollInfo.width,\n            collisionHeight = elemHeight + marginTop + parseCss(this, \"marginBottom\") + scrollInfo.height,\n            position = $.extend({}, basePosition),\n            myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());\n\n        if (options.my[0] === \"right\") {\n          position.left -= elemWidth;\n        } else if (options.my[0] === \"center\") {\n          position.left -= elemWidth / 2;\n        }\n\n        if (options.my[1] === \"bottom\") {\n          position.top -= elemHeight;\n        } else if (options.my[1] === \"center\") {\n          position.top -= elemHeight / 2;\n        }\n\n        position.left += myOffset[0];\n        position.top += myOffset[1];\n        collisionPosition = {\n          marginLeft: marginLeft,\n          marginTop: marginTop\n        };\n        $.each([\"left\", \"top\"], function (i, dir) {\n          if ($.ui.position[collision[i]]) {\n            $.ui.position[collision[i]][dir](position, {\n              targetWidth: targetWidth,\n              targetHeight: targetHeight,\n              elemWidth: elemWidth,\n              elemHeight: elemHeight,\n              collisionPosition: collisionPosition,\n              collisionWidth: collisionWidth,\n              collisionHeight: collisionHeight,\n              offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],\n              my: options.my,\n              at: options.at,\n              within: within,\n              elem: elem\n            });\n          }\n        });\n\n        if (options.using) {\n          // Adds feedback as second argument to using callback, if present\n          using = function using(props) {\n            var left = targetOffset.left - position.left,\n                right = left + targetWidth - elemWidth,\n                top = targetOffset.top - position.top,\n                bottom = top + targetHeight - elemHeight,\n                feedback = {\n              target: {\n                element: target,\n                left: targetOffset.left,\n                top: targetOffset.top,\n                width: targetWidth,\n                height: targetHeight\n              },\n              element: {\n                element: elem,\n                left: position.left,\n                top: position.top,\n                width: elemWidth,\n                height: elemHeight\n              },\n              horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\n              vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\n            };\n\n            if (targetWidth < elemWidth && abs(left + right) < targetWidth) {\n              feedback.horizontal = \"center\";\n            }\n\n            if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {\n              feedback.vertical = \"middle\";\n            }\n\n            if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {\n              feedback.important = \"horizontal\";\n            } else {\n              feedback.important = \"vertical\";\n            }\n\n            options.using.call(this, props, feedback);\n          };\n        }\n\n        elem.offset($.extend(position, {\n          using: using\n        }));\n      });\n    };\n\n    $.ui.position = {\n      fit: {\n        left: function left(position, data) {\n          var within = data.within,\n              withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\n              outerWidth = within.width,\n              collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n              overLeft = withinOffset - collisionPosLeft,\n              overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\n              newOverRight; // Element is wider than within\n\n          if (data.collisionWidth > outerWidth) {\n            // Element is initially over the left side of within\n            if (overLeft > 0 && overRight <= 0) {\n              newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;\n              position.left += overLeft - newOverRight; // Element is initially over right side of within\n            } else if (overRight > 0 && overLeft <= 0) {\n              position.left = withinOffset; // Element is initially over both left and right sides of within\n            } else {\n              if (overLeft > overRight) {\n                position.left = withinOffset + outerWidth - data.collisionWidth;\n              } else {\n                position.left = withinOffset;\n              }\n            } // Too far left -> align with left edge\n\n          } else if (overLeft > 0) {\n            position.left += overLeft; // Too far right -> align with right edge\n          } else if (overRight > 0) {\n            position.left -= overRight; // Adjust based on position and margin\n          } else {\n            position.left = max(position.left - collisionPosLeft, position.left);\n          }\n        },\n        top: function top(position, data) {\n          var within = data.within,\n              withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\n              outerHeight = data.within.height,\n              collisionPosTop = position.top - data.collisionPosition.marginTop,\n              overTop = withinOffset - collisionPosTop,\n              overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\n              newOverBottom; // Element is taller than within\n\n          if (data.collisionHeight > outerHeight) {\n            // Element is initially over the top of within\n            if (overTop > 0 && overBottom <= 0) {\n              newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;\n              position.top += overTop - newOverBottom; // Element is initially over bottom of within\n            } else if (overBottom > 0 && overTop <= 0) {\n              position.top = withinOffset; // Element is initially over both top and bottom of within\n            } else {\n              if (overTop > overBottom) {\n                position.top = withinOffset + outerHeight - data.collisionHeight;\n              } else {\n                position.top = withinOffset;\n              }\n            } // Too far up -> align with top\n\n          } else if (overTop > 0) {\n            position.top += overTop; // Too far down -> align with bottom edge\n          } else if (overBottom > 0) {\n            position.top -= overBottom; // Adjust based on position and margin\n          } else {\n            position.top = max(position.top - collisionPosTop, position.top);\n          }\n        }\n      },\n      flip: {\n        left: function left(position, data) {\n          var within = data.within,\n              withinOffset = within.offset.left + within.scrollLeft,\n              outerWidth = within.width,\n              offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\n              collisionPosLeft = position.left - data.collisionPosition.marginLeft,\n              overLeft = collisionPosLeft - offsetLeft,\n              overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\n              myOffset = data.my[0] === \"left\" ? -data.elemWidth : data.my[0] === \"right\" ? data.elemWidth : 0,\n              atOffset = data.at[0] === \"left\" ? data.targetWidth : data.at[0] === \"right\" ? -data.targetWidth : 0,\n              offset = -2 * data.offset[0],\n              newOverRight,\n              newOverLeft;\n\n          if (overLeft < 0) {\n            newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;\n\n            if (newOverRight < 0 || newOverRight < abs(overLeft)) {\n              position.left += myOffset + atOffset + offset;\n            }\n          } else if (overRight > 0) {\n            newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;\n\n            if (newOverLeft > 0 || abs(newOverLeft) < overRight) {\n              position.left += myOffset + atOffset + offset;\n            }\n          }\n        },\n        top: function top(position, data) {\n          var within = data.within,\n              withinOffset = within.offset.top + within.scrollTop,\n              outerHeight = within.height,\n              offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\n              collisionPosTop = position.top - data.collisionPosition.marginTop,\n              overTop = collisionPosTop - offsetTop,\n              overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\n              top = data.my[1] === \"top\",\n              myOffset = top ? -data.elemHeight : data.my[1] === \"bottom\" ? data.elemHeight : 0,\n              atOffset = data.at[1] === \"top\" ? data.targetHeight : data.at[1] === \"bottom\" ? -data.targetHeight : 0,\n              offset = -2 * data.offset[1],\n              newOverTop,\n              newOverBottom;\n\n          if (overTop < 0) {\n            newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;\n\n            if (newOverBottom < 0 || newOverBottom < abs(overTop)) {\n              position.top += myOffset + atOffset + offset;\n            }\n          } else if (overBottom > 0) {\n            newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;\n\n            if (newOverTop > 0 || abs(newOverTop) < overBottom) {\n              position.top += myOffset + atOffset + offset;\n            }\n          }\n        }\n      },\n      flipfit: {\n        left: function left() {\n          $.ui.position.flip.left.apply(this, arguments);\n          $.ui.position.fit.left.apply(this, arguments);\n        },\n        top: function top() {\n          $.ui.position.flip.top.apply(this, arguments);\n          $.ui.position.fit.top.apply(this, arguments);\n        }\n      }\n    };\n  })();\n\n  var position = $.ui.position;\n  /*!\r\n   * jQuery UI :data 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: :data Selector\n  //>>group: Core\n  //>>description: Selects elements which have data stored under the specified key.\n  //>>docs: http://api.jqueryui.com/data-selector/\n\n  var data = $.extend($.expr.pseudos, {\n    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {\n      return function (elem) {\n        return !!$.data(elem, dataName);\n      };\n    }) : // Support: jQuery <1.8\n    function (elem, i, match) {\n      return !!$.data(elem, match[3]);\n    }\n  });\n  /*!\r\n   * jQuery UI Disable Selection 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: disableSelection\n  //>>group: Core\n  //>>description: Disable selection of text content within the set of matched elements.\n  //>>docs: http://api.jqueryui.com/disableSelection/\n  // This file is deprecated\n\n  var disableSelection = $.fn.extend({\n    disableSelection: function () {\n      var eventType = \"onselectstart\" in document.createElement(\"div\") ? \"selectstart\" : \"mousedown\";\n      return function () {\n        return this.on(eventType + \".ui-disableSelection\", function (event) {\n          event.preventDefault();\n        });\n      };\n    }(),\n    enableSelection: function enableSelection() {\n      return this.off(\".ui-disableSelection\");\n    }\n  });\n  /*!\r\n   * jQuery UI Focusable 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: :focusable Selector\n  //>>group: Core\n  //>>description: Selects elements which can be focused.\n  //>>docs: http://api.jqueryui.com/focusable-selector/\n  // Selectors\n\n  $.ui.focusable = function (element, hasTabindex) {\n    var map,\n        mapName,\n        img,\n        focusableIfVisible,\n        fieldset,\n        nodeName = element.nodeName.toLowerCase();\n\n    if (\"area\" === nodeName) {\n      map = element.parentNode;\n      mapName = map.name;\n\n      if (!element.href || !mapName || map.nodeName.toLowerCase() !== \"map\") {\n        return false;\n      }\n\n      img = $(\"img[usemap='#\" + mapName + \"']\");\n      return img.length > 0 && img.is(\":visible\");\n    }\n\n    if (/^(input|select|textarea|button|object)$/.test(nodeName)) {\n      focusableIfVisible = !element.disabled;\n\n      if (focusableIfVisible) {\n        // Form controls within a disabled fieldset are disabled.\n        // However, controls within the fieldset's legend do not get disabled.\n        // Since controls generally aren't placed inside legends, we skip\n        // this portion of the check.\n        fieldset = $(element).closest(\"fieldset\")[0];\n\n        if (fieldset) {\n          focusableIfVisible = !fieldset.disabled;\n        }\n      }\n    } else if (\"a\" === nodeName) {\n      focusableIfVisible = element.href || hasTabindex;\n    } else {\n      focusableIfVisible = hasTabindex;\n    }\n\n    return focusableIfVisible && $(element).is(\":visible\") && visible($(element));\n  }; // Support: IE 8 only\n  // IE 8 doesn't resolve inherit to visible/hidden for computed values\n\n\n  function visible(element) {\n    var visibility = element.css(\"visibility\");\n\n    while (visibility === \"inherit\") {\n      element = element.parent();\n      visibility = element.css(\"visibility\");\n    }\n\n    return visibility !== \"hidden\";\n  }\n\n  $.extend($.expr.pseudos, {\n    focusable: function focusable(element) {\n      return $.ui.focusable(element, $.attr(element, \"tabindex\") != null);\n    }\n  });\n  var focusable = $.ui.focusable; // Support: IE8 Only\n  // IE8 does not support the form attribute and when it is supplied. It overwrites the form prop\n  // with a string, so we need to find the proper form.\n\n  var form = $.fn.form = function () {\n    return typeof this[0].form === \"string\" ? this.closest(\"form\") : $(this[0].form);\n  };\n  /*!\r\n   * jQuery UI Form Reset Mixin 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Form Reset Mixin\n  //>>group: Core\n  //>>description: Refresh input widgets when their form is reset\n  //>>docs: http://api.jqueryui.com/form-reset-mixin/\n\n\n  var formResetMixin = $.ui.formResetMixin = {\n    _formResetHandler: function _formResetHandler() {\n      var form = $(this); // Wait for the form reset to actually happen before refreshing\n\n      setTimeout(function () {\n        var instances = form.data(\"ui-form-reset-instances\");\n        $.each(instances, function () {\n          this.refresh();\n        });\n      });\n    },\n    _bindFormResetHandler: function _bindFormResetHandler() {\n      this.form = this.element.form();\n\n      if (!this.form.length) {\n        return;\n      }\n\n      var instances = this.form.data(\"ui-form-reset-instances\") || [];\n\n      if (!instances.length) {\n        // We don't use _on() here because we use a single event handler per form\n        this.form.on(\"reset.ui-form-reset\", this._formResetHandler);\n      }\n\n      instances.push(this);\n      this.form.data(\"ui-form-reset-instances\", instances);\n    },\n    _unbindFormResetHandler: function _unbindFormResetHandler() {\n      if (!this.form.length) {\n        return;\n      }\n\n      var instances = this.form.data(\"ui-form-reset-instances\");\n      instances.splice($.inArray(this, instances), 1);\n\n      if (instances.length) {\n        this.form.data(\"ui-form-reset-instances\", instances);\n      } else {\n        this.form.removeData(\"ui-form-reset-instances\").off(\"reset.ui-form-reset\");\n      }\n    }\n  };\n  /*!\r\n   * jQuery UI Support for jQuery core 1.7.x 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   *\r\n   */\n  //>>label: jQuery 1.7 Support\n  //>>group: Core\n  //>>description: Support version 1.7.x of jQuery core\n  // Support: jQuery 1.7 only\n  // Not a great way to check versions, but since we only support 1.7+ and only\n  // need to detect <1.8, this is a simple check that should suffice. Checking\n  // for \"1.7.\" would be a bit safer, but the version string is 1.7, not 1.7.0\n  // and we'll never reach 1.70.0 (if we do, we certainly won't be supporting\n  // 1.7 anymore). See #11197 for why we're not using feature detection.\n\n  if ($.fn.jquery.substring(0, 3) === \"1.7\") {\n    // Setters for .innerWidth(), .innerHeight(), .outerWidth(), .outerHeight()\n    // Unlike jQuery Core 1.8+, these only support numeric values to set the\n    // dimensions in pixels\n    $.each([\"Width\", \"Height\"], function (i, name) {\n      var side = name === \"Width\" ? [\"Left\", \"Right\"] : [\"Top\", \"Bottom\"],\n          type = name.toLowerCase(),\n          orig = {\n        innerWidth: $.fn.innerWidth,\n        innerHeight: $.fn.innerHeight,\n        outerWidth: $.fn.outerWidth,\n        outerHeight: $.fn.outerHeight\n      };\n\n      function reduce(elem, size, border, margin) {\n        $.each(side, function () {\n          size -= parseFloat($.css(elem, \"padding\" + this)) || 0;\n\n          if (border) {\n            size -= parseFloat($.css(elem, \"border\" + this + \"Width\")) || 0;\n          }\n\n          if (margin) {\n            size -= parseFloat($.css(elem, \"margin\" + this)) || 0;\n          }\n        });\n        return size;\n      }\n\n      $.fn[\"inner\" + name] = function (size) {\n        if (size === undefined) {\n          return orig[\"inner\" + name].call(this);\n        }\n\n        return this.each(function () {\n          $(this).css(type, reduce(this, size) + \"px\");\n        });\n      };\n\n      $.fn[\"outer\" + name] = function (size, margin) {\n        if (typeof size !== \"number\") {\n          return orig[\"outer\" + name].call(this, size);\n        }\n\n        return this.each(function () {\n          $(this).css(type, reduce(this, size, true, margin) + \"px\");\n        });\n      };\n    });\n\n    $.fn.addBack = function (selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    };\n  }\n\n  ;\n  /*!\r\n   * jQuery UI Keycode 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Keycode\n  //>>group: Core\n  //>>description: Provide keycodes as keynames\n  //>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/\n\n  var keycode = $.ui.keyCode = {\n    BACKSPACE: 8,\n    COMMA: 188,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    PERIOD: 190,\n    RIGHT: 39,\n    SPACE: 32,\n    TAB: 9,\n    UP: 38\n  }; // Internal use only\n\n  var escapeSelector = $.ui.escapeSelector = function () {\n    var selectorEscape = /([!\"#$%&'()*+,./:;<=>?@[\\]^`{|}~])/g;\n    return function (selector) {\n      return selector.replace(selectorEscape, \"\\\\$1\");\n    };\n  }();\n  /*!\r\n   * jQuery UI Labels 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: labels\n  //>>group: Core\n  //>>description: Find all the labels associated with a given input\n  //>>docs: http://api.jqueryui.com/labels/\n\n\n  var labels = $.fn.labels = function () {\n    var ancestor, selector, id, labels, ancestors; // Check control.labels first\n\n    if (this[0].labels && this[0].labels.length) {\n      return this.pushStack(this[0].labels);\n    } // Support: IE <= 11, FF <= 37, Android <= 2.3 only\n    // Above browsers do not support control.labels. Everything below is to support them\n    // as well as document fragments. control.labels does not work on document fragments\n\n\n    labels = this.eq(0).parents(\"label\"); // Look for the label based on the id\n\n    id = this.attr(\"id\");\n\n    if (id) {\n      // We don't search against the document in case the element\n      // is disconnected from the DOM\n      ancestor = this.eq(0).parents().last(); // Get a full set of top level ancestors\n\n      ancestors = ancestor.add(ancestor.length ? ancestor.siblings() : this.siblings()); // Create a selector for the label based on the id\n\n      selector = \"label[for='\" + $.ui.escapeSelector(id) + \"']\";\n      labels = labels.add(ancestors.find(selector).addBack(selector));\n    } // Return whatever we have found for labels\n\n\n    return this.pushStack(labels);\n  };\n  /*!\r\n   * jQuery UI Scroll Parent 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: scrollParent\n  //>>group: Core\n  //>>description: Get the closest ancestor element that is scrollable.\n  //>>docs: http://api.jqueryui.com/scrollParent/\n\n\n  var scrollParent = $.fn.scrollParent = function (includeHidden) {\n    var position = this.css(\"position\"),\n        excludeStaticParent = position === \"absolute\",\n        overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\n        scrollParent = this.parents().filter(function () {\n      var parent = $(this);\n\n      if (excludeStaticParent && parent.css(\"position\") === \"static\") {\n        return false;\n      }\n\n      return overflowRegex.test(parent.css(\"overflow\") + parent.css(\"overflow-y\") + parent.css(\"overflow-x\"));\n    }).eq(0);\n    return position === \"fixed\" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;\n  };\n  /*!\r\n   * jQuery UI Tabbable 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: :tabbable Selector\n  //>>group: Core\n  //>>description: Selects elements which can be tabbed to.\n  //>>docs: http://api.jqueryui.com/tabbable-selector/\n\n\n  var tabbable = $.extend($.expr.pseudos, {\n    tabbable: function tabbable(element) {\n      var tabIndex = $.attr(element, \"tabindex\"),\n          hasTabindex = tabIndex != null;\n      return (!hasTabindex || tabIndex >= 0) && $.ui.focusable(element, hasTabindex);\n    }\n  });\n  /*!\r\n   * jQuery UI Unique ID 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: uniqueId\n  //>>group: Core\n  //>>description: Functions to generate and remove uniqueId's\n  //>>docs: http://api.jqueryui.com/uniqueId/\n\n  var uniqueId = $.fn.extend({\n    uniqueId: function () {\n      var uuid = 0;\n      return function () {\n        return this.each(function () {\n          if (!this.id) {\n            this.id = \"ui-id-\" + ++uuid;\n          }\n        });\n      };\n    }(),\n    removeUniqueId: function removeUniqueId() {\n      return this.each(function () {\n        if (/^ui-id-\\d+$/.test(this.id)) {\n          $(this).removeAttr(\"id\");\n        }\n      });\n    }\n  }); // This file is deprecated\n\n  var ie = $.ui.ie = !!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());\n  /*!\r\n   * jQuery UI Mouse 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Mouse\n  //>>group: Widgets\n  //>>description: Abstracts mouse-based interactions to assist in creating certain widgets.\n  //>>docs: http://api.jqueryui.com/mouse/\n\n  var mouseHandled = false;\n  $(document).on(\"mouseup\", function () {\n    mouseHandled = false;\n  });\n  var widgetsMouse = $.widget(\"ui.mouse\", {\n    version: \"1.12.1\",\n    options: {\n      cancel: \"input, textarea, button, select, option\",\n      distance: 1,\n      delay: 0\n    },\n    _mouseInit: function _mouseInit() {\n      var that = this;\n      this.element.on(\"mousedown.\" + this.widgetName, function (event) {\n        return that._mouseDown(event);\n      }).on(\"click.\" + this.widgetName, function (event) {\n        if (true === $.data(event.target, that.widgetName + \".preventClickEvent\")) {\n          $.removeData(event.target, that.widgetName + \".preventClickEvent\");\n          event.stopImmediatePropagation();\n          return false;\n        }\n      });\n      this.started = false;\n    },\n    // TODO: make sure destroying one instance of mouse doesn't mess with\n    // other instances of mouse\n    _mouseDestroy: function _mouseDestroy() {\n      this.element.off(\".\" + this.widgetName);\n\n      if (this._mouseMoveDelegate) {\n        this.document.off(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).off(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      }\n    },\n    _mouseDown: function _mouseDown(event) {\n      // don't let more than one widget handle mouseStart\n      if (mouseHandled) {\n        return;\n      }\n\n      this._mouseMoved = false; // We may have missed mouseup (out of window)\n\n      this._mouseStarted && this._mouseUp(event);\n      this._mouseDownEvent = event;\n      var that = this,\n          btnIsLeft = event.which === 1,\n          // event.target.nodeName works around a bug in IE 8 with\n      // disabled inputs (#7620)\n      elIsCancel = typeof this.options.cancel === \"string\" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;\n\n      if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {\n        return true;\n      }\n\n      this.mouseDelayMet = !this.options.delay;\n\n      if (!this.mouseDelayMet) {\n        this._mouseDelayTimer = setTimeout(function () {\n          that.mouseDelayMet = true;\n        }, this.options.delay);\n      }\n\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(event) !== false;\n\n        if (!this._mouseStarted) {\n          event.preventDefault();\n          return true;\n        }\n      } // Click event may never have fired (Gecko & Opera)\n\n\n      if (true === $.data(event.target, this.widgetName + \".preventClickEvent\")) {\n        $.removeData(event.target, this.widgetName + \".preventClickEvent\");\n      } // These delegates are required to keep context\n\n\n      this._mouseMoveDelegate = function (event) {\n        return that._mouseMove(event);\n      };\n\n      this._mouseUpDelegate = function (event) {\n        return that._mouseUp(event);\n      };\n\n      this.document.on(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).on(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n      event.preventDefault();\n      mouseHandled = true;\n      return true;\n    },\n    _mouseMove: function _mouseMove(event) {\n      // Only check for mouseups outside the document if you've moved inside the document\n      // at least once. This prevents the firing of mouseup in the case of IE<9, which will\n      // fire a mousemove event if content is placed under the cursor. See #7778\n      // Support: IE <9\n      if (this._mouseMoved) {\n        // IE mouseup check - mouseup happened when mouse was out of window\n        if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {\n          return this._mouseUp(event); // Iframe mouseup check - mouseup occurred in another document\n        } else if (!event.which) {\n          // Support: Safari <=8 - 9\n          // Safari sets which to 0 if you press any of the following keys\n          // during a drag (#14461)\n          if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) {\n            this.ignoreMissingWhich = true;\n          } else if (!this.ignoreMissingWhich) {\n            return this._mouseUp(event);\n          }\n        }\n      }\n\n      if (event.which || event.button) {\n        this._mouseMoved = true;\n      }\n\n      if (this._mouseStarted) {\n        this._mouseDrag(event);\n\n        return event.preventDefault();\n      }\n\n      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n        this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;\n        this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);\n      }\n\n      return !this._mouseStarted;\n    },\n    _mouseUp: function _mouseUp(event) {\n      this.document.off(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate).off(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\n      if (this._mouseStarted) {\n        this._mouseStarted = false;\n\n        if (event.target === this._mouseDownEvent.target) {\n          $.data(event.target, this.widgetName + \".preventClickEvent\", true);\n        }\n\n        this._mouseStop(event);\n      }\n\n      if (this._mouseDelayTimer) {\n        clearTimeout(this._mouseDelayTimer);\n        delete this._mouseDelayTimer;\n      }\n\n      this.ignoreMissingWhich = false;\n      mouseHandled = false;\n      event.preventDefault();\n    },\n    _mouseDistanceMet: function _mouseDistanceMet(event) {\n      return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;\n    },\n    _mouseDelayMet: function _mouseDelayMet()\n    /* event */\n    {\n      return this.mouseDelayMet;\n    },\n    // These are placeholder methods, to be overriden by extending plugin\n    _mouseStart: function _mouseStart()\n    /* event */\n    {},\n    _mouseDrag: function _mouseDrag()\n    /* event */\n    {},\n    _mouseStop: function _mouseStop()\n    /* event */\n    {},\n    _mouseCapture: function _mouseCapture()\n    /* event */\n    {\n      return true;\n    }\n  }); // $.ui.plugin is deprecated. Use $.widget() extensions instead.\n\n  var plugin = $.ui.plugin = {\n    add: function add(module, option, set) {\n      var i,\n          proto = $.ui[module].prototype;\n\n      for (i in set) {\n        proto.plugins[i] = proto.plugins[i] || [];\n        proto.plugins[i].push([option, set[i]]);\n      }\n    },\n    call: function call(instance, name, args, allowDisconnected) {\n      var i,\n          set = instance.plugins[name];\n\n      if (!set) {\n        return;\n      }\n\n      if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {\n        return;\n      }\n\n      for (i = 0; i < set.length; i++) {\n        if (instance.options[set[i][0]]) {\n          set[i][1].apply(instance.element, args);\n        }\n      }\n    }\n  };\n\n  var safeActiveElement = $.ui.safeActiveElement = function (document) {\n    var activeElement; // Support: IE 9 only\n    // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n\n    try {\n      activeElement = document.activeElement;\n    } catch (error) {\n      activeElement = document.body;\n    } // Support: IE 9 - 11 only\n    // IE may return null instead of an element\n    // Interestingly, this only seems to occur when NOT in an iframe\n\n\n    if (!activeElement) {\n      activeElement = document.body;\n    } // Support: IE 11 only\n    // IE11 returns a seemingly empty object in some cases when accessing\n    // document.activeElement from an <iframe>\n\n\n    if (!activeElement.nodeName) {\n      activeElement = document.body;\n    }\n\n    return activeElement;\n  };\n\n  var safeBlur = $.ui.safeBlur = function (element) {\n    // Support: IE9 - 10 only\n    // If the <body> is blurred, IE will switch windows, see #9420\n    if (element && element.nodeName.toLowerCase() !== \"body\") {\n      $(element).trigger(\"blur\");\n    }\n  };\n  /*!\r\n   * jQuery UI Draggable 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Draggable\n  //>>group: Interactions\n  //>>description: Enables dragging functionality for any element.\n  //>>docs: http://api.jqueryui.com/draggable/\n  //>>demos: http://jqueryui.com/draggable/\n  //>>css.structure: ../../themes/base/draggable.css\n\n\n  $.widget(\"ui.draggable\", $.ui.mouse, {\n    version: \"1.12.1\",\n    widgetEventPrefix: \"drag\",\n    options: {\n      addClasses: true,\n      appendTo: \"parent\",\n      axis: false,\n      connectToSortable: false,\n      containment: false,\n      cursor: \"auto\",\n      cursorAt: false,\n      grid: false,\n      handle: false,\n      helper: \"original\",\n      iframeFix: false,\n      opacity: false,\n      refreshPositions: false,\n      revert: false,\n      revertDuration: 500,\n      scope: \"default\",\n      scroll: true,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      snap: false,\n      snapMode: \"both\",\n      snapTolerance: 20,\n      stack: false,\n      zIndex: false,\n      // Callbacks\n      drag: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      if (this.options.helper === \"original\") {\n        this._setPositionRelative();\n      }\n\n      if (this.options.addClasses) {\n        this._addClass(\"ui-draggable\");\n      }\n\n      this._setHandleClassName();\n\n      this._mouseInit();\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"handle\") {\n        this._removeHandleClassName();\n\n        this._setHandleClassName();\n      }\n    },\n    _destroy: function _destroy() {\n      if ((this.helper || this.element).is(\".ui-draggable-dragging\")) {\n        this.destroyOnClear = true;\n        return;\n      }\n\n      this._removeHandleClassName();\n\n      this._mouseDestroy();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var o = this.options; // Among others, prevent a drag on a resizable-handle\n\n      if (this.helper || o.disabled || $(event.target).closest(\".ui-resizable-handle\").length > 0) {\n        return false;\n      } //Quit if we're not on a valid handle\n\n\n      this.handle = this._getHandle(event);\n\n      if (!this.handle) {\n        return false;\n      }\n\n      this._blurActiveElement(event);\n\n      this._blockFrames(o.iframeFix === true ? \"iframe\" : o.iframeFix);\n\n      return true;\n    },\n    _blockFrames: function _blockFrames(selector) {\n      this.iframeBlocks = this.document.find(selector).map(function () {\n        var iframe = $(this);\n        return $(\"<div>\").css(\"position\", \"absolute\").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];\n      });\n    },\n    _unblockFrames: function _unblockFrames() {\n      if (this.iframeBlocks) {\n        this.iframeBlocks.remove();\n        delete this.iframeBlocks;\n      }\n    },\n    _blurActiveElement: function _blurActiveElement(event) {\n      var activeElement = $.ui.safeActiveElement(this.document[0]),\n          target = $(event.target); // Don't blur if the event occurred on an element that is within\n      // the currently focused element\n      // See #10527, #12472\n\n      if (target.closest(activeElement).length) {\n        return;\n      } // Blur any element that currently has focus, see #4261\n\n\n      $.ui.safeBlur(activeElement);\n    },\n    _mouseStart: function _mouseStart(event) {\n      var o = this.options; //Create and append the visible helper\n\n      this.helper = this._createHelper(event);\n\n      this._addClass(this.helper, \"ui-draggable-dragging\"); //Cache the helper size\n\n\n      this._cacheHelperProportions(); //If ddmanager is used for droppables, set the global draggable\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.current = this;\n      }\n      /*\r\n       * - Position generation -\r\n       * This block generates everything position related - it's the core of draggables.\r\n       */\n      //Cache the margins of the original element\n\n\n      this._cacheMargins(); //Store the helper's css position\n\n\n      this.cssPosition = this.helper.css(\"position\");\n      this.scrollParent = this.helper.scrollParent(true);\n      this.offsetParent = this.helper.offsetParent();\n      this.hasFixedAncestor = this.helper.parents().filter(function () {\n        return $(this).css(\"position\") === \"fixed\";\n      }).length > 0; //The element's absolute position on the page minus margins\n\n      this.positionAbs = this.element.offset();\n\n      this._refreshOffsets(event); //Generate the original position\n\n\n      this.originalPosition = this.position = this._generatePosition(event, false);\n      this.originalPageX = event.pageX;\n      this.originalPageY = event.pageY; //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\n      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt); //Set a containment if given in the options\n\n      this._setContainment(); //Trigger event + callbacks\n\n\n      if (this._trigger(\"start\", event) === false) {\n        this._clear();\n\n        return false;\n      } //Recache the helper size\n\n\n      this._cacheHelperProportions(); //Prepare the droppable offsets\n\n\n      if ($.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(this, event);\n      } // Execute the drag once - this causes the helper not to be visible before getting its\n      // correct position\n\n\n      this._mouseDrag(event, true); // If the ddmanager is used for droppables, inform the manager that dragging has started\n      // (see #5003)\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStart(this, event);\n      }\n\n      return true;\n    },\n    _refreshOffsets: function _refreshOffsets(event) {\n      this.offset = {\n        top: this.positionAbs.top - this.margins.top,\n        left: this.positionAbs.left - this.margins.left,\n        scroll: false,\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset()\n      };\n      this.offset.click = {\n        left: event.pageX - this.offset.left,\n        top: event.pageY - this.offset.top\n      };\n    },\n    _mouseDrag: function _mouseDrag(event, noPropagation) {\n      // reset any necessary cached properties (see #5009)\n      if (this.hasFixedAncestor) {\n        this.offset.parent = this._getParentOffset();\n      } //Compute the helpers position\n\n\n      this.position = this._generatePosition(event, true);\n      this.positionAbs = this._convertPositionTo(\"absolute\"); //Call plugins and callbacks and use the resulting position if something is returned\n\n      if (!noPropagation) {\n        var ui = this._uiHash();\n\n        if (this._trigger(\"drag\", event, ui) === false) {\n          this._mouseUp(new $.Event(\"mouseup\", event));\n\n          return false;\n        }\n\n        this.position = ui.position;\n      }\n\n      this.helper[0].style.left = this.position.left + \"px\";\n      this.helper[0].style.top = this.position.top + \"px\";\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.drag(this, event);\n      }\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      //If we are using droppables, inform the manager about the drop\n      var that = this,\n          dropped = false;\n\n      if ($.ui.ddmanager && !this.options.dropBehaviour) {\n        dropped = $.ui.ddmanager.drop(this, event);\n      } //if a drop comes from outside (a sortable)\n\n\n      if (this.dropped) {\n        dropped = this.dropped;\n        this.dropped = false;\n      }\n\n      if (this.options.revert === \"invalid\" && !dropped || this.options.revert === \"valid\" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {\n        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {\n          if (that._trigger(\"stop\", event) !== false) {\n            that._clear();\n          }\n        });\n      } else {\n        if (this._trigger(\"stop\", event) !== false) {\n          this._clear();\n        }\n      }\n\n      return false;\n    },\n    _mouseUp: function _mouseUp(event) {\n      this._unblockFrames(); // If the ddmanager is used for droppables, inform the manager that dragging has stopped\n      // (see #5003)\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.dragStop(this, event);\n      } // Only need to focus if the event occurred on the draggable itself, see #10527\n\n\n      if (this.handleElement.is(event.target)) {\n        // The interaction is over; whether or not the click resulted in a drag,\n        // focus the element\n        this.element.trigger(\"focus\");\n      }\n\n      return $.ui.mouse.prototype._mouseUp.call(this, event);\n    },\n    cancel: function cancel() {\n      if (this.helper.is(\".ui-draggable-dragging\")) {\n        this._mouseUp(new $.Event(\"mouseup\", {\n          target: this.element[0]\n        }));\n      } else {\n        this._clear();\n      }\n\n      return this;\n    },\n    _getHandle: function _getHandle(event) {\n      return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;\n    },\n    _setHandleClassName: function _setHandleClassName() {\n      this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;\n\n      this._addClass(this.handleElement, \"ui-draggable-handle\");\n    },\n    _removeHandleClassName: function _removeHandleClassName() {\n      this._removeClass(this.handleElement, \"ui-draggable-handle\");\n    },\n    _createHelper: function _createHelper(event) {\n      var o = this.options,\n          helperIsFunction = $.isFunction(o.helper),\n          helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === \"clone\" ? this.element.clone().removeAttr(\"id\") : this.element;\n\n      if (!helper.parents(\"body\").length) {\n        helper.appendTo(o.appendTo === \"parent\" ? this.element[0].parentNode : o.appendTo);\n      } // Http://bugs.jqueryui.com/ticket/9446\n      // a helper function can return the original element\n      // which wouldn't have been set to relative in _create\n\n\n      if (helperIsFunction && helper[0] === this.element[0]) {\n        this._setPositionRelative();\n      }\n\n      if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css(\"position\"))) {\n        helper.css(\"position\", \"absolute\");\n      }\n\n      return helper;\n    },\n    _setPositionRelative: function _setPositionRelative() {\n      if (!/^(?:r|a|f)/.test(this.element.css(\"position\"))) {\n        this.element[0].style.position = \"relative\";\n      }\n    },\n    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n      if (typeof obj === \"string\") {\n        obj = obj.split(\" \");\n      }\n\n      if ($.isArray(obj)) {\n        obj = {\n          left: +obj[0],\n          top: +obj[1] || 0\n        };\n      }\n\n      if (\"left\" in obj) {\n        this.offset.click.left = obj.left + this.margins.left;\n      }\n\n      if (\"right\" in obj) {\n        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n      }\n\n      if (\"top\" in obj) {\n        this.offset.click.top = obj.top + this.margins.top;\n      }\n\n      if (\"bottom\" in obj) {\n        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n      }\n    },\n    _isRootNode: function _isRootNode(element) {\n      return /(html|body)/i.test(element.tagName) || element === this.document[0];\n    },\n    _getParentOffset: function _getParentOffset() {\n      //Get the offsetParent and cache its position\n      var po = this.offsetParent.offset(),\n          document = this.document[0]; // This is a special case where we need to modify a offset calculated on start, since the\n      // following happened:\n      // 1. The position of the helper is absolute, so it's position is calculated based on the\n      // next positioned parent\n      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n      // the document, which means that the scroll is included in the initial calculation of the\n      // offset of the parent, and never recalculated upon drag\n\n      if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n        po.left += this.scrollParent.scrollLeft();\n        po.top += this.scrollParent.scrollTop();\n      }\n\n      if (this._isRootNode(this.offsetParent[0])) {\n        po = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      return {\n        top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function _getRelativeOffset() {\n      if (this.cssPosition !== \"relative\") {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n\n      var p = this.element.position(),\n          scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n\n      return {\n        top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),\n        left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)\n      };\n    },\n    _cacheMargins: function _cacheMargins() {\n      this.margins = {\n        left: parseInt(this.element.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.element.css(\"marginTop\"), 10) || 0,\n        right: parseInt(this.element.css(\"marginRight\"), 10) || 0,\n        bottom: parseInt(this.element.css(\"marginBottom\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function _cacheHelperProportions() {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function _setContainment() {\n      var isUserScrollable,\n          c,\n          ce,\n          o = this.options,\n          document = this.document[0];\n      this.relativeContainer = null;\n\n      if (!o.containment) {\n        this.containment = null;\n        return;\n      }\n\n      if (o.containment === \"window\") {\n        this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n        return;\n      }\n\n      if (o.containment === \"document\") {\n        this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n        return;\n      }\n\n      if (o.containment.constructor === Array) {\n        this.containment = o.containment;\n        return;\n      }\n\n      if (o.containment === \"parent\") {\n        o.containment = this.helper[0].parentNode;\n      }\n\n      c = $(o.containment);\n      ce = c[0];\n\n      if (!ce) {\n        return;\n      }\n\n      isUserScrollable = /(scroll|auto)/.test(c.css(\"overflow\"));\n      this.containment = [(parseInt(c.css(\"borderLeftWidth\"), 10) || 0) + (parseInt(c.css(\"paddingLeft\"), 10) || 0), (parseInt(c.css(\"borderTopWidth\"), 10) || 0) + (parseInt(c.css(\"paddingTop\"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css(\"borderRightWidth\"), 10) || 0) - (parseInt(c.css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css(\"borderBottomWidth\"), 10) || 0) - (parseInt(c.css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];\n      this.relativeContainer = c;\n    },\n    _convertPositionTo: function _convertPositionTo(d, pos) {\n      if (!pos) {\n        pos = this.position;\n      }\n\n      var mod = d === \"absolute\" ? 1 : -1,\n          scrollIsRootNode = this._isRootNode(this.scrollParent[0]);\n\n      return {\n        top: // The absolute mouse position\n        pos.top + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.top * mod + // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.top * mod - (this.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,\n        left: // The absolute mouse position\n        pos.left + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.left * mod + // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.left * mod - (this.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod\n      };\n    },\n    _generatePosition: function _generatePosition(event, constrainPosition) {\n      var containment,\n          co,\n          top,\n          left,\n          o = this.options,\n          scrollIsRootNode = this._isRootNode(this.scrollParent[0]),\n          pageX = event.pageX,\n          pageY = event.pageY; // Cache the scroll\n\n\n      if (!scrollIsRootNode || !this.offset.scroll) {\n        this.offset.scroll = {\n          top: this.scrollParent.scrollTop(),\n          left: this.scrollParent.scrollLeft()\n        };\n      }\n      /*\r\n       * - Position constraining -\r\n       * Constrain the position to a mix of grid, containment.\r\n       */\n      // If we are not dragging yet, we won't check for options\n\n\n      if (constrainPosition) {\n        if (this.containment) {\n          if (this.relativeContainer) {\n            co = this.relativeContainer.offset();\n            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];\n          } else {\n            containment = this.containment;\n          }\n\n          if (event.pageX - this.offset.click.left < containment[0]) {\n            pageX = containment[0] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top < containment[1]) {\n            pageY = containment[1] + this.offset.click.top;\n          }\n\n          if (event.pageX - this.offset.click.left > containment[2]) {\n            pageX = containment[2] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top > containment[3]) {\n            pageY = containment[3] + this.offset.click.top;\n          }\n        }\n\n        if (o.grid) {\n          //Check for grid elements set to 0 to prevent divide by 0 error causing invalid\n          // argument errors in IE (see ticket #6950)\n          top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;\n          pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n          left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;\n          pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n        }\n\n        if (o.axis === \"y\") {\n          pageX = this.originalPageX;\n        }\n\n        if (o.axis === \"x\") {\n          pageY = this.originalPageY;\n        }\n      }\n\n      return {\n        top: // The absolute mouse position\n        pageY - // Click offset (relative to the element)\n        this.offset.click.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.top - // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.top + (this.cssPosition === \"fixed\" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),\n        left: // The absolute mouse position\n        pageX - // Click offset (relative to the element)\n        this.offset.click.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.left - // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.left + (this.cssPosition === \"fixed\" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)\n      };\n    },\n    _clear: function _clear() {\n      this._removeClass(this.helper, \"ui-draggable-dragging\");\n\n      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {\n        this.helper.remove();\n      }\n\n      this.helper = null;\n      this.cancelHelperRemoval = false;\n\n      if (this.destroyOnClear) {\n        this.destroy();\n      }\n    },\n    // From now on bulk stuff - mainly helpers\n    _trigger: function _trigger(type, event, ui) {\n      ui = ui || this._uiHash();\n      $.ui.plugin.call(this, type, [event, ui, this], true); // Absolute position and offset (see #6884 ) have to be recalculated after plugins\n\n      if (/^(drag|start|stop)/.test(type)) {\n        this.positionAbs = this._convertPositionTo(\"absolute\");\n        ui.offset = this.positionAbs;\n      }\n\n      return $.Widget.prototype._trigger.call(this, type, event, ui);\n    },\n    plugins: {},\n    _uiHash: function _uiHash() {\n      return {\n        helper: this.helper,\n        position: this.position,\n        originalPosition: this.originalPosition,\n        offset: this.positionAbs\n      };\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"connectToSortable\", {\n    start: function start(event, ui, draggable) {\n      var uiSortable = $.extend({}, ui, {\n        item: draggable.element\n      });\n      draggable.sortables = [];\n      $(draggable.options.connectToSortable).each(function () {\n        var sortable = $(this).sortable(\"instance\");\n\n        if (sortable && !sortable.options.disabled) {\n          draggable.sortables.push(sortable); // RefreshPositions is called at drag start to refresh the containerCache\n          // which is used in drag. This ensures it's initialized and synchronized\n          // with any changes that might have happened on the page since initialization.\n\n          sortable.refreshPositions();\n\n          sortable._trigger(\"activate\", event, uiSortable);\n        }\n      });\n    },\n    stop: function stop(event, ui, draggable) {\n      var uiSortable = $.extend({}, ui, {\n        item: draggable.element\n      });\n      draggable.cancelHelperRemoval = false;\n      $.each(draggable.sortables, function () {\n        var sortable = this;\n\n        if (sortable.isOver) {\n          sortable.isOver = 0; // Allow this sortable to handle removing the helper\n\n          draggable.cancelHelperRemoval = true;\n          sortable.cancelHelperRemoval = false; // Use _storedCSS To restore properties in the sortable,\n          // as this also handles revert (#9675) since the draggable\n          // may have modified them in unexpected ways (#8809)\n\n          sortable._storedCSS = {\n            position: sortable.placeholder.css(\"position\"),\n            top: sortable.placeholder.css(\"top\"),\n            left: sortable.placeholder.css(\"left\")\n          };\n\n          sortable._mouseStop(event); // Once drag has ended, the sortable should return to using\n          // its original helper, not the shared helper from draggable\n\n\n          sortable.options.helper = sortable.options._helper;\n        } else {\n          // Prevent this Sortable from removing the helper.\n          // However, don't set the draggable to remove the helper\n          // either as another connected Sortable may yet handle the removal.\n          sortable.cancelHelperRemoval = true;\n\n          sortable._trigger(\"deactivate\", event, uiSortable);\n        }\n      });\n    },\n    drag: function drag(event, ui, draggable) {\n      $.each(draggable.sortables, function () {\n        var innermostIntersecting = false,\n            sortable = this; // Copy over variables that sortable's _intersectsWith uses\n\n        sortable.positionAbs = draggable.positionAbs;\n        sortable.helperProportions = draggable.helperProportions;\n        sortable.offset.click = draggable.offset.click;\n\n        if (sortable._intersectsWith(sortable.containerCache)) {\n          innermostIntersecting = true;\n          $.each(draggable.sortables, function () {\n            // Copy over variables that sortable's _intersectsWith uses\n            this.positionAbs = draggable.positionAbs;\n            this.helperProportions = draggable.helperProportions;\n            this.offset.click = draggable.offset.click;\n\n            if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {\n              innermostIntersecting = false;\n            }\n\n            return innermostIntersecting;\n          });\n        }\n\n        if (innermostIntersecting) {\n          // If it intersects, we use a little isOver variable and set it once,\n          // so that the move-in stuff gets fired only once.\n          if (!sortable.isOver) {\n            sortable.isOver = 1; // Store draggable's parent in case we need to reappend to it later.\n\n            draggable._parent = ui.helper.parent();\n            sortable.currentItem = ui.helper.appendTo(sortable.element).data(\"ui-sortable-item\", true); // Store helper option to later restore it\n\n            sortable.options._helper = sortable.options.helper;\n\n            sortable.options.helper = function () {\n              return ui.helper[0];\n            }; // Fire the start events of the sortable with our passed browser event,\n            // and our own helper (so it doesn't create a new one)\n\n\n            event.target = sortable.currentItem[0];\n\n            sortable._mouseCapture(event, true);\n\n            sortable._mouseStart(event, true, true); // Because the browser event is way off the new appended portlet,\n            // modify necessary variables to reflect the changes\n\n\n            sortable.offset.click.top = draggable.offset.click.top;\n            sortable.offset.click.left = draggable.offset.click.left;\n            sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;\n            sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;\n\n            draggable._trigger(\"toSortable\", event); // Inform draggable that the helper is in a valid drop zone,\n            // used solely in the revert option to handle \"valid/invalid\".\n\n\n            draggable.dropped = sortable.element; // Need to refreshPositions of all sortables in the case that\n            // adding to one sortable changes the location of the other sortables (#9675)\n\n            $.each(draggable.sortables, function () {\n              this.refreshPositions();\n            }); // Hack so receive/update callbacks work (mostly)\n\n            draggable.currentItem = draggable.element;\n            sortable.fromOutside = draggable;\n          }\n\n          if (sortable.currentItem) {\n            sortable._mouseDrag(event); // Copy the sortable's position because the draggable's can potentially reflect\n            // a relative position, while sortable is always absolute, which the dragged\n            // element has now become. (#8809)\n\n\n            ui.position = sortable.position;\n          }\n        } else {\n          // If it doesn't intersect with the sortable, and it intersected before,\n          // we fake the drag stop of the sortable, but make sure it doesn't remove\n          // the helper by using cancelHelperRemoval.\n          if (sortable.isOver) {\n            sortable.isOver = 0;\n            sortable.cancelHelperRemoval = true; // Calling sortable's mouseStop would trigger a revert,\n            // so revert must be temporarily false until after mouseStop is called.\n\n            sortable.options._revert = sortable.options.revert;\n            sortable.options.revert = false;\n\n            sortable._trigger(\"out\", event, sortable._uiHash(sortable));\n\n            sortable._mouseStop(event, true); // Restore sortable behaviors that were modfied\n            // when the draggable entered the sortable area (#9481)\n\n\n            sortable.options.revert = sortable.options._revert;\n            sortable.options.helper = sortable.options._helper;\n\n            if (sortable.placeholder) {\n              sortable.placeholder.remove();\n            } // Restore and recalculate the draggable's offset considering the sortable\n            // may have modified them in unexpected ways. (#8809, #10669)\n\n\n            ui.helper.appendTo(draggable._parent);\n\n            draggable._refreshOffsets(event);\n\n            ui.position = draggable._generatePosition(event, true);\n\n            draggable._trigger(\"fromSortable\", event); // Inform draggable that the helper is no longer in a valid drop zone\n\n\n            draggable.dropped = false; // Need to refreshPositions of all sortables just in case removing\n            // from one sortable changes the location of other sortables (#9675)\n\n            $.each(draggable.sortables, function () {\n              this.refreshPositions();\n            });\n          }\n        }\n      });\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"cursor\", {\n    start: function start(event, ui, instance) {\n      var t = $(\"body\"),\n          o = instance.options;\n\n      if (t.css(\"cursor\")) {\n        o._cursor = t.css(\"cursor\");\n      }\n\n      t.css(\"cursor\", o.cursor);\n    },\n    stop: function stop(event, ui, instance) {\n      var o = instance.options;\n\n      if (o._cursor) {\n        $(\"body\").css(\"cursor\", o._cursor);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"opacity\", {\n    start: function start(event, ui, instance) {\n      var t = $(ui.helper),\n          o = instance.options;\n\n      if (t.css(\"opacity\")) {\n        o._opacity = t.css(\"opacity\");\n      }\n\n      t.css(\"opacity\", o.opacity);\n    },\n    stop: function stop(event, ui, instance) {\n      var o = instance.options;\n\n      if (o._opacity) {\n        $(ui.helper).css(\"opacity\", o._opacity);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"scroll\", {\n    start: function start(event, ui, i) {\n      if (!i.scrollParentNotHidden) {\n        i.scrollParentNotHidden = i.helper.scrollParent(false);\n      }\n\n      if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== \"HTML\") {\n        i.overflowOffset = i.scrollParentNotHidden.offset();\n      }\n    },\n    drag: function drag(event, ui, i) {\n      var o = i.options,\n          scrolled = false,\n          scrollParent = i.scrollParentNotHidden[0],\n          document = i.document[0];\n\n      if (scrollParent !== document && scrollParent.tagName !== \"HTML\") {\n        if (!o.axis || o.axis !== \"x\") {\n          if (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {\n            scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;\n          } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {\n            scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;\n          }\n        }\n\n        if (!o.axis || o.axis !== \"y\") {\n          if (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {\n            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;\n          } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {\n            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;\n          }\n        }\n      } else {\n        if (!o.axis || o.axis !== \"x\") {\n          if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\n          } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\n          }\n        }\n\n        if (!o.axis || o.axis !== \"y\") {\n          if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\n          } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\n            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\n          }\n        }\n      }\n\n      if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(i, event);\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"snap\", {\n    start: function start(event, ui, i) {\n      var o = i.options;\n      i.snapElements = [];\n      $(o.snap.constructor !== String ? o.snap.items || \":data(ui-draggable)\" : o.snap).each(function () {\n        var $t = $(this),\n            $o = $t.offset();\n\n        if (this !== i.element[0]) {\n          i.snapElements.push({\n            item: this,\n            width: $t.outerWidth(),\n            height: $t.outerHeight(),\n            top: $o.top,\n            left: $o.left\n          });\n        }\n      });\n    },\n    drag: function drag(event, ui, inst) {\n      var ts,\n          bs,\n          ls,\n          rs,\n          l,\n          r,\n          t,\n          b,\n          i,\n          first,\n          o = inst.options,\n          d = o.snapTolerance,\n          x1 = ui.offset.left,\n          x2 = x1 + inst.helperProportions.width,\n          y1 = ui.offset.top,\n          y2 = y1 + inst.helperProportions.height;\n\n      for (i = inst.snapElements.length - 1; i >= 0; i--) {\n        l = inst.snapElements[i].left - inst.margins.left;\n        r = l + inst.snapElements[i].width;\n        t = inst.snapElements[i].top - inst.margins.top;\n        b = t + inst.snapElements[i].height;\n\n        if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {\n          if (inst.snapElements[i].snapping) {\n            inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {\n              snapItem: inst.snapElements[i].item\n            }));\n          }\n\n          inst.snapElements[i].snapping = false;\n          continue;\n        }\n\n        if (o.snapMode !== \"inner\") {\n          ts = Math.abs(t - y2) <= d;\n          bs = Math.abs(b - y1) <= d;\n          ls = Math.abs(l - x2) <= d;\n          rs = Math.abs(r - x1) <= d;\n\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t - inst.helperProportions.height,\n              left: 0\n            }).top;\n          }\n\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b,\n              left: 0\n            }).top;\n          }\n\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l - inst.helperProportions.width\n            }).left;\n          }\n\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r\n            }).left;\n          }\n        }\n\n        first = ts || bs || ls || rs;\n\n        if (o.snapMode !== \"outer\") {\n          ts = Math.abs(t - y1) <= d;\n          bs = Math.abs(b - y2) <= d;\n          ls = Math.abs(l - x1) <= d;\n          rs = Math.abs(r - x2) <= d;\n\n          if (ts) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: t,\n              left: 0\n            }).top;\n          }\n\n          if (bs) {\n            ui.position.top = inst._convertPositionTo(\"relative\", {\n              top: b - inst.helperProportions.height,\n              left: 0\n            }).top;\n          }\n\n          if (ls) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: l\n            }).left;\n          }\n\n          if (rs) {\n            ui.position.left = inst._convertPositionTo(\"relative\", {\n              top: 0,\n              left: r - inst.helperProportions.width\n            }).left;\n          }\n        }\n\n        if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {\n          inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {\n            snapItem: inst.snapElements[i].item\n          }));\n        }\n\n        inst.snapElements[i].snapping = ts || bs || ls || rs || first;\n      }\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"stack\", {\n    start: function start(event, ui, instance) {\n      var min,\n          o = instance.options,\n          group = $.makeArray($(o.stack)).sort(function (a, b) {\n        return (parseInt($(a).css(\"zIndex\"), 10) || 0) - (parseInt($(b).css(\"zIndex\"), 10) || 0);\n      });\n\n      if (!group.length) {\n        return;\n      }\n\n      min = parseInt($(group[0]).css(\"zIndex\"), 10) || 0;\n      $(group).each(function (i) {\n        $(this).css(\"zIndex\", min + i);\n      });\n      this.css(\"zIndex\", min + group.length);\n    }\n  });\n  $.ui.plugin.add(\"draggable\", \"zIndex\", {\n    start: function start(event, ui, instance) {\n      var t = $(ui.helper),\n          o = instance.options;\n\n      if (t.css(\"zIndex\")) {\n        o._zIndex = t.css(\"zIndex\");\n      }\n\n      t.css(\"zIndex\", o.zIndex);\n    },\n    stop: function stop(event, ui, instance) {\n      var o = instance.options;\n\n      if (o._zIndex) {\n        $(ui.helper).css(\"zIndex\", o._zIndex);\n      }\n    }\n  });\n  var widgetsDraggable = $.ui.draggable;\n  /*!\r\n   * jQuery UI Droppable 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Droppable\n  //>>group: Interactions\n  //>>description: Enables drop targets for draggable elements.\n  //>>docs: http://api.jqueryui.com/droppable/\n  //>>demos: http://jqueryui.com/droppable/\n\n  $.widget(\"ui.droppable\", {\n    version: \"1.12.1\",\n    widgetEventPrefix: \"drop\",\n    options: {\n      accept: \"*\",\n      addClasses: true,\n      greedy: false,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      // Callbacks\n      activate: null,\n      deactivate: null,\n      drop: null,\n      out: null,\n      over: null\n    },\n    _create: function _create() {\n      var proportions,\n          o = this.options,\n          accept = o.accept;\n      this.isover = false;\n      this.isout = true;\n      this.accept = $.isFunction(accept) ? accept : function (d) {\n        return d.is(accept);\n      };\n\n      this.proportions = function ()\n      /* valueToWrite */\n      {\n        if (arguments.length) {\n          // Store the droppable's proportions\n          proportions = arguments[0];\n        } else {\n          // Retrieve or derive the droppable's proportions\n          return proportions ? proportions : proportions = {\n            width: this.element[0].offsetWidth,\n            height: this.element[0].offsetHeight\n          };\n        }\n      };\n\n      this._addToManager(o.scope);\n\n      o.addClasses && this._addClass(\"ui-droppable\");\n    },\n    _addToManager: function _addToManager(scope) {\n      // Add the reference and positions to the manager\n      $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];\n      $.ui.ddmanager.droppables[scope].push(this);\n    },\n    _splice: function _splice(drop) {\n      var i = 0;\n\n      for (; i < drop.length; i++) {\n        if (drop[i] === this) {\n          drop.splice(i, 1);\n        }\n      }\n    },\n    _destroy: function _destroy() {\n      var drop = $.ui.ddmanager.droppables[this.options.scope];\n\n      this._splice(drop);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"accept\") {\n        this.accept = $.isFunction(value) ? value : function (d) {\n          return d.is(value);\n        };\n      } else if (key === \"scope\") {\n        var drop = $.ui.ddmanager.droppables[this.options.scope];\n\n        this._splice(drop);\n\n        this._addToManager(value);\n      }\n\n      this._super(key, value);\n    },\n    _activate: function _activate(event) {\n      var draggable = $.ui.ddmanager.current;\n\n      this._addActiveClass();\n\n      if (draggable) {\n        this._trigger(\"activate\", event, this.ui(draggable));\n      }\n    },\n    _deactivate: function _deactivate(event) {\n      var draggable = $.ui.ddmanager.current;\n\n      this._removeActiveClass();\n\n      if (draggable) {\n        this._trigger(\"deactivate\", event, this.ui(draggable));\n      }\n    },\n    _over: function _over(event) {\n      var draggable = $.ui.ddmanager.current; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        this._addHoverClass();\n\n        this._trigger(\"over\", event, this.ui(draggable));\n      }\n    },\n    _out: function _out(event) {\n      var draggable = $.ui.ddmanager.current; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        this._removeHoverClass();\n\n        this._trigger(\"out\", event, this.ui(draggable));\n      }\n    },\n    _drop: function _drop(event, custom) {\n      var draggable = custom || $.ui.ddmanager.current,\n          childrenIntersection = false; // Bail if draggable and droppable are same element\n\n      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n        return false;\n      }\n\n      this.element.find(\":data(ui-droppable)\").not(\".ui-draggable-dragging\").each(function () {\n        var inst = $(this).droppable(\"instance\");\n\n        if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && intersect(draggable, $.extend(inst, {\n          offset: inst.element.offset()\n        }), inst.options.tolerance, event)) {\n          childrenIntersection = true;\n          return false;\n        }\n      });\n\n      if (childrenIntersection) {\n        return false;\n      }\n\n      if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n        this._removeActiveClass();\n\n        this._removeHoverClass();\n\n        this._trigger(\"drop\", event, this.ui(draggable));\n\n        return this.element;\n      }\n\n      return false;\n    },\n    ui: function ui(c) {\n      return {\n        draggable: c.currentItem || c.element,\n        helper: c.helper,\n        position: c.position,\n        offset: c.positionAbs\n      };\n    },\n    // Extension points just to make backcompat sane and avoid duplicating logic\n    // TODO: Remove in 1.13 along with call to it below\n    _addHoverClass: function _addHoverClass() {\n      this._addClass(\"ui-droppable-hover\");\n    },\n    _removeHoverClass: function _removeHoverClass() {\n      this._removeClass(\"ui-droppable-hover\");\n    },\n    _addActiveClass: function _addActiveClass() {\n      this._addClass(\"ui-droppable-active\");\n    },\n    _removeActiveClass: function _removeActiveClass() {\n      this._removeClass(\"ui-droppable-active\");\n    }\n  });\n\n  var intersect = $.ui.intersect = function () {\n    function isOverAxis(x, reference, size) {\n      return x >= reference && x < reference + size;\n    }\n\n    return function (draggable, droppable, toleranceMode, event) {\n      if (!droppable.offset) {\n        return false;\n      }\n\n      var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left,\n          y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top,\n          x2 = x1 + draggable.helperProportions.width,\n          y2 = y1 + draggable.helperProportions.height,\n          l = droppable.offset.left,\n          t = droppable.offset.top,\n          r = l + droppable.proportions().width,\n          b = t + droppable.proportions().height;\n\n      switch (toleranceMode) {\n        case \"fit\":\n          return l <= x1 && x2 <= r && t <= y1 && y2 <= b;\n\n        case \"intersect\":\n          return l < x1 + draggable.helperProportions.width / 2 && // Right Half\n          x2 - draggable.helperProportions.width / 2 < r && // Left Half\n          t < y1 + draggable.helperProportions.height / 2 && // Bottom Half\n          y2 - draggable.helperProportions.height / 2 < b;\n        // Top Half\n\n        case \"pointer\":\n          return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);\n\n        case \"touch\":\n          return (y1 >= t && y1 <= b || // Top edge touching\n          y2 >= t && y2 <= b || // Bottom edge touching\n          y1 < t && y2 > b // Surrounded vertically\n          ) && (x1 >= l && x1 <= r || // Left edge touching\n          x2 >= l && x2 <= r || // Right edge touching\n          x1 < l && x2 > r // Surrounded horizontally\n          );\n\n        default:\n          return false;\n      }\n    };\n  }();\n  /*\r\n  \tThis manager tracks offsets of draggables and droppables\r\n  */\n\n\n  $.ui.ddmanager = {\n    current: null,\n    droppables: {\n      \"default\": []\n    },\n    prepareOffsets: function prepareOffsets(t, event) {\n      var i,\n          j,\n          m = $.ui.ddmanager.droppables[t.options.scope] || [],\n          type = event ? event.type : null,\n          // workaround for #2317\n      list = (t.currentItem || t.element).find(\":data(ui-droppable)\").addBack();\n\n      droppablesLoop: for (i = 0; i < m.length; i++) {\n        // No disabled and non-accepted\n        if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {\n          continue;\n        } // Filter out elements in the current dragged item\n\n\n        for (j = 0; j < list.length; j++) {\n          if (list[j] === m[i].element[0]) {\n            m[i].proportions().height = 0;\n            continue droppablesLoop;\n          }\n        }\n\n        m[i].visible = m[i].element.css(\"display\") !== \"none\";\n\n        if (!m[i].visible) {\n          continue;\n        } // Activate the droppable if used directly from draggables\n\n\n        if (type === \"mousedown\") {\n          m[i]._activate.call(m[i], event);\n        }\n\n        m[i].offset = m[i].element.offset();\n        m[i].proportions({\n          width: m[i].element[0].offsetWidth,\n          height: m[i].element[0].offsetHeight\n        });\n      }\n    },\n    drop: function drop(draggable, event) {\n      var dropped = false; // Create a copy of the droppables in case the list changes during the drop (#9116)\n\n      $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {\n        if (!this.options) {\n          return;\n        }\n\n        if (!this.options.disabled && this.visible && intersect(draggable, this, this.options.tolerance, event)) {\n          dropped = this._drop.call(this, event) || dropped;\n        }\n\n        if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {\n          this.isout = true;\n          this.isover = false;\n\n          this._deactivate.call(this, event);\n        }\n      });\n      return dropped;\n    },\n    dragStart: function dragStart(draggable, event) {\n      // Listen for scrolling so that if the dragging causes scrolling the position of the\n      // droppables can be recalculated (see #5003)\n      draggable.element.parentsUntil(\"body\").on(\"scroll.droppable\", function () {\n        if (!draggable.options.refreshPositions) {\n          $.ui.ddmanager.prepareOffsets(draggable, event);\n        }\n      });\n    },\n    drag: function drag(draggable, event) {\n      // If you have a highly dynamic page, you might try this option. It renders positions\n      // every time you move the mouse.\n      if (draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      } // Run through all droppables and check their positions based on specific tolerance options\n\n\n      $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {\n        if (this.options.disabled || this.greedyChild || !this.visible) {\n          return;\n        }\n\n        var parentInstance,\n            scope,\n            parent,\n            intersects = intersect(draggable, this, this.options.tolerance, event),\n            c = !intersects && this.isover ? \"isout\" : intersects && !this.isover ? \"isover\" : null;\n\n        if (!c) {\n          return;\n        }\n\n        if (this.options.greedy) {\n          // find droppable parents with same scope\n          scope = this.options.scope;\n          parent = this.element.parents(\":data(ui-droppable)\").filter(function () {\n            return $(this).droppable(\"instance\").options.scope === scope;\n          });\n\n          if (parent.length) {\n            parentInstance = $(parent[0]).droppable(\"instance\");\n            parentInstance.greedyChild = c === \"isover\";\n          }\n        } // We just moved into a greedy child\n\n\n        if (parentInstance && c === \"isover\") {\n          parentInstance.isover = false;\n          parentInstance.isout = true;\n\n          parentInstance._out.call(parentInstance, event);\n        }\n\n        this[c] = true;\n        this[c === \"isout\" ? \"isover\" : \"isout\"] = false;\n        this[c === \"isover\" ? \"_over\" : \"_out\"].call(this, event); // We just moved out of a greedy child\n\n        if (parentInstance && c === \"isout\") {\n          parentInstance.isout = false;\n          parentInstance.isover = true;\n\n          parentInstance._over.call(parentInstance, event);\n        }\n      });\n    },\n    dragStop: function dragStop(draggable, event) {\n      draggable.element.parentsUntil(\"body\").off(\"scroll.droppable\"); // Call prepareOffsets one final time since IE does not fire return scroll events when\n      // overflow was caused by drag (see #5003)\n\n      if (!draggable.options.refreshPositions) {\n        $.ui.ddmanager.prepareOffsets(draggable, event);\n      }\n    }\n  }; // DEPRECATED\n  // TODO: switch return back to widget declaration at top of file when this is removed\n\n  if ($.uiBackCompat !== false) {\n    // Backcompat for activeClass and hoverClass options\n    $.widget(\"ui.droppable\", $.ui.droppable, {\n      options: {\n        hoverClass: false,\n        activeClass: false\n      },\n      _addActiveClass: function _addActiveClass() {\n        this._super();\n\n        if (this.options.activeClass) {\n          this.element.addClass(this.options.activeClass);\n        }\n      },\n      _removeActiveClass: function _removeActiveClass() {\n        this._super();\n\n        if (this.options.activeClass) {\n          this.element.removeClass(this.options.activeClass);\n        }\n      },\n      _addHoverClass: function _addHoverClass() {\n        this._super();\n\n        if (this.options.hoverClass) {\n          this.element.addClass(this.options.hoverClass);\n        }\n      },\n      _removeHoverClass: function _removeHoverClass() {\n        this._super();\n\n        if (this.options.hoverClass) {\n          this.element.removeClass(this.options.hoverClass);\n        }\n      }\n    });\n  }\n\n  var widgetsDroppable = $.ui.droppable;\n  /*!\r\n   * jQuery UI Resizable 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Resizable\n  //>>group: Interactions\n  //>>description: Enables resize functionality for any element.\n  //>>docs: http://api.jqueryui.com/resizable/\n  //>>demos: http://jqueryui.com/resizable/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/resizable.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.widget(\"ui.resizable\", $.ui.mouse, {\n    version: \"1.12.1\",\n    widgetEventPrefix: \"resize\",\n    options: {\n      alsoResize: false,\n      animate: false,\n      animateDuration: \"slow\",\n      animateEasing: \"swing\",\n      aspectRatio: false,\n      autoHide: false,\n      classes: {\n        \"ui-resizable-se\": \"ui-icon ui-icon-gripsmall-diagonal-se\"\n      },\n      containment: false,\n      ghost: false,\n      grid: false,\n      handles: \"e,s,se\",\n      helper: false,\n      maxHeight: null,\n      maxWidth: null,\n      minHeight: 10,\n      minWidth: 10,\n      // See #7960\n      zIndex: 90,\n      // Callbacks\n      resize: null,\n      start: null,\n      stop: null\n    },\n    _num: function _num(value) {\n      return parseFloat(value) || 0;\n    },\n    _isNumber: function _isNumber(value) {\n      return !isNaN(parseFloat(value));\n    },\n    _hasScroll: function _hasScroll(el, a) {\n      if ($(el).css(\"overflow\") === \"hidden\") {\n        return false;\n      }\n\n      var scroll = a && a === \"left\" ? \"scrollLeft\" : \"scrollTop\",\n          has = false;\n\n      if (el[scroll] > 0) {\n        return true;\n      } // TODO: determine which cases actually cause this to happen\n      // if the element doesn't have the scroll set, see if it's possible to\n      // set the scroll\n\n\n      el[scroll] = 1;\n      has = el[scroll] > 0;\n      el[scroll] = 0;\n      return has;\n    },\n    _create: function _create() {\n      var margins,\n          o = this.options,\n          that = this;\n\n      this._addClass(\"ui-resizable\");\n\n      $.extend(this, {\n        _aspectRatio: !!o.aspectRatio,\n        aspectRatio: o.aspectRatio,\n        originalElement: this.element,\n        _proportionallyResizeElements: [],\n        _helper: o.helper || o.ghost || o.animate ? o.helper || \"ui-resizable-helper\" : null\n      }); // Wrap the element if it cannot hold child nodes\n\n      if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {\n        this.element.wrap($(\"<div class='ui-wrapper' style='overflow: hidden;'></div>\").css({\n          position: this.element.css(\"position\"),\n          width: this.element.outerWidth(),\n          height: this.element.outerHeight(),\n          top: this.element.css(\"top\"),\n          left: this.element.css(\"left\")\n        }));\n        this.element = this.element.parent().data(\"ui-resizable\", this.element.resizable(\"instance\"));\n        this.elementIsWrapper = true;\n        margins = {\n          marginTop: this.originalElement.css(\"marginTop\"),\n          marginRight: this.originalElement.css(\"marginRight\"),\n          marginBottom: this.originalElement.css(\"marginBottom\"),\n          marginLeft: this.originalElement.css(\"marginLeft\")\n        };\n        this.element.css(margins);\n        this.originalElement.css(\"margin\", 0); // support: Safari\n        // Prevent Safari textarea resize\n\n        this.originalResizeStyle = this.originalElement.css(\"resize\");\n        this.originalElement.css(\"resize\", \"none\");\n\n        this._proportionallyResizeElements.push(this.originalElement.css({\n          position: \"static\",\n          zoom: 1,\n          display: \"block\"\n        })); // Support: IE9\n        // avoid IE jump (hard set the margin)\n\n\n        this.originalElement.css(margins);\n\n        this._proportionallyResize();\n      }\n\n      this._setupHandles();\n\n      if (o.autoHide) {\n        $(this.element).on(\"mouseenter\", function () {\n          if (o.disabled) {\n            return;\n          }\n\n          that._removeClass(\"ui-resizable-autohide\");\n\n          that._handles.show();\n        }).on(\"mouseleave\", function () {\n          if (o.disabled) {\n            return;\n          }\n\n          if (!that.resizing) {\n            that._addClass(\"ui-resizable-autohide\");\n\n            that._handles.hide();\n          }\n        });\n      }\n\n      this._mouseInit();\n    },\n    _destroy: function _destroy() {\n      this._mouseDestroy();\n\n      var wrapper,\n          _destroy = function _destroy(exp) {\n        $(exp).removeData(\"resizable\").removeData(\"ui-resizable\").off(\".resizable\").find(\".ui-resizable-handle\").remove();\n      }; // TODO: Unwrap at same DOM position\n\n\n      if (this.elementIsWrapper) {\n        _destroy(this.element);\n\n        wrapper = this.element;\n        this.originalElement.css({\n          position: wrapper.css(\"position\"),\n          width: wrapper.outerWidth(),\n          height: wrapper.outerHeight(),\n          top: wrapper.css(\"top\"),\n          left: wrapper.css(\"left\")\n        }).insertAfter(wrapper);\n        wrapper.remove();\n      }\n\n      this.originalElement.css(\"resize\", this.originalResizeStyle);\n\n      _destroy(this.originalElement);\n\n      return this;\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      switch (key) {\n        case \"handles\":\n          this._removeHandles();\n\n          this._setupHandles();\n\n          break;\n\n        default:\n          break;\n      }\n    },\n    _setupHandles: function _setupHandles() {\n      var o = this.options,\n          handle,\n          i,\n          n,\n          hname,\n          axis,\n          that = this;\n      this.handles = o.handles || (!$(\".ui-resizable-handle\", this.element).length ? \"e,s,se\" : {\n        n: \".ui-resizable-n\",\n        e: \".ui-resizable-e\",\n        s: \".ui-resizable-s\",\n        w: \".ui-resizable-w\",\n        se: \".ui-resizable-se\",\n        sw: \".ui-resizable-sw\",\n        ne: \".ui-resizable-ne\",\n        nw: \".ui-resizable-nw\"\n      });\n      this._handles = $();\n\n      if (this.handles.constructor === String) {\n        if (this.handles === \"all\") {\n          this.handles = \"n,e,s,w,se,sw,ne,nw\";\n        }\n\n        n = this.handles.split(\",\");\n        this.handles = {};\n\n        for (i = 0; i < n.length; i++) {\n          handle = $.trim(n[i]);\n          hname = \"ui-resizable-\" + handle;\n          axis = $(\"<div>\");\n\n          this._addClass(axis, \"ui-resizable-handle \" + hname);\n\n          axis.css({\n            zIndex: o.zIndex\n          });\n          this.handles[handle] = \".ui-resizable-\" + handle;\n          this.element.append(axis);\n        }\n      }\n\n      this._renderAxis = function (target) {\n        var i, axis, padPos, padWrapper;\n        target = target || this.element;\n\n        for (i in this.handles) {\n          if (this.handles[i].constructor === String) {\n            this.handles[i] = this.element.children(this.handles[i]).first().show();\n          } else if (this.handles[i].jquery || this.handles[i].nodeType) {\n            this.handles[i] = $(this.handles[i]);\n\n            this._on(this.handles[i], {\n              \"mousedown\": that._mouseDown\n            });\n          }\n\n          if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {\n            axis = $(this.handles[i], this.element);\n            padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();\n            padPos = [\"padding\", /ne|nw|n/.test(i) ? \"Top\" : /se|sw|s/.test(i) ? \"Bottom\" : /^e$/.test(i) ? \"Right\" : \"Left\"].join(\"\");\n            target.css(padPos, padWrapper);\n\n            this._proportionallyResize();\n          }\n\n          this._handles = this._handles.add(this.handles[i]);\n        }\n      }; // TODO: make renderAxis a prototype function\n\n\n      this._renderAxis(this.element);\n\n      this._handles = this._handles.add(this.element.find(\".ui-resizable-handle\"));\n\n      this._handles.disableSelection();\n\n      this._handles.on(\"mouseover\", function () {\n        if (!that.resizing) {\n          if (this.className) {\n            axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);\n          }\n\n          that.axis = axis && axis[1] ? axis[1] : \"se\";\n        }\n      });\n\n      if (o.autoHide) {\n        this._handles.hide();\n\n        this._addClass(\"ui-resizable-autohide\");\n      }\n    },\n    _removeHandles: function _removeHandles() {\n      this._handles.remove();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var i,\n          handle,\n          capture = false;\n\n      for (i in this.handles) {\n        handle = $(this.handles[i])[0];\n\n        if (handle === event.target || $.contains(handle, event.target)) {\n          capture = true;\n        }\n      }\n\n      return !this.options.disabled && capture;\n    },\n    _mouseStart: function _mouseStart(event) {\n      var curleft,\n          curtop,\n          cursor,\n          o = this.options,\n          el = this.element;\n      this.resizing = true;\n\n      this._renderProxy();\n\n      curleft = this._num(this.helper.css(\"left\"));\n      curtop = this._num(this.helper.css(\"top\"));\n\n      if (o.containment) {\n        curleft += $(o.containment).scrollLeft() || 0;\n        curtop += $(o.containment).scrollTop() || 0;\n      }\n\n      this.offset = this.helper.offset();\n      this.position = {\n        left: curleft,\n        top: curtop\n      };\n      this.size = this._helper ? {\n        width: this.helper.width(),\n        height: this.helper.height()\n      } : {\n        width: el.width(),\n        height: el.height()\n      };\n      this.originalSize = this._helper ? {\n        width: el.outerWidth(),\n        height: el.outerHeight()\n      } : {\n        width: el.width(),\n        height: el.height()\n      };\n      this.sizeDiff = {\n        width: el.outerWidth() - el.width(),\n        height: el.outerHeight() - el.height()\n      };\n      this.originalPosition = {\n        left: curleft,\n        top: curtop\n      };\n      this.originalMousePosition = {\n        left: event.pageX,\n        top: event.pageY\n      };\n      this.aspectRatio = typeof o.aspectRatio === \"number\" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;\n      cursor = $(\".ui-resizable-\" + this.axis).css(\"cursor\");\n      $(\"body\").css(\"cursor\", cursor === \"auto\" ? this.axis + \"-resize\" : cursor);\n\n      this._addClass(\"ui-resizable-resizing\");\n\n      this._propagate(\"start\", event);\n\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var data,\n          props,\n          smp = this.originalMousePosition,\n          a = this.axis,\n          dx = event.pageX - smp.left || 0,\n          dy = event.pageY - smp.top || 0,\n          trigger = this._change[a];\n\n      this._updatePrevProperties();\n\n      if (!trigger) {\n        return false;\n      }\n\n      data = trigger.apply(this, [event, dx, dy]);\n\n      this._updateVirtualBoundaries(event.shiftKey);\n\n      if (this._aspectRatio || event.shiftKey) {\n        data = this._updateRatio(data, event);\n      }\n\n      data = this._respectSize(data, event);\n\n      this._updateCache(data);\n\n      this._propagate(\"resize\", event);\n\n      props = this._applyChanges();\n\n      if (!this._helper && this._proportionallyResizeElements.length) {\n        this._proportionallyResize();\n      }\n\n      if (!$.isEmptyObject(props)) {\n        this._updatePrevProperties();\n\n        this._trigger(\"resize\", event, this.ui());\n\n        this._applyChanges();\n      }\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      this.resizing = false;\n      var pr,\n          ista,\n          soffseth,\n          soffsetw,\n          s,\n          left,\n          top,\n          o = this.options,\n          that = this;\n\n      if (this._helper) {\n        pr = this._proportionallyResizeElements;\n        ista = pr.length && /textarea/i.test(pr[0].nodeName);\n        soffseth = ista && this._hasScroll(pr[0], \"left\") ? 0 : that.sizeDiff.height;\n        soffsetw = ista ? 0 : that.sizeDiff.width;\n        s = {\n          width: that.helper.width() - soffsetw,\n          height: that.helper.height() - soffseth\n        };\n        left = parseFloat(that.element.css(\"left\")) + (that.position.left - that.originalPosition.left) || null;\n        top = parseFloat(that.element.css(\"top\")) + (that.position.top - that.originalPosition.top) || null;\n\n        if (!o.animate) {\n          this.element.css($.extend(s, {\n            top: top,\n            left: left\n          }));\n        }\n\n        that.helper.height(that.size.height);\n        that.helper.width(that.size.width);\n\n        if (this._helper && !o.animate) {\n          this._proportionallyResize();\n        }\n      }\n\n      $(\"body\").css(\"cursor\", \"auto\");\n\n      this._removeClass(\"ui-resizable-resizing\");\n\n      this._propagate(\"stop\", event);\n\n      if (this._helper) {\n        this.helper.remove();\n      }\n\n      return false;\n    },\n    _updatePrevProperties: function _updatePrevProperties() {\n      this.prevPosition = {\n        top: this.position.top,\n        left: this.position.left\n      };\n      this.prevSize = {\n        width: this.size.width,\n        height: this.size.height\n      };\n    },\n    _applyChanges: function _applyChanges() {\n      var props = {};\n\n      if (this.position.top !== this.prevPosition.top) {\n        props.top = this.position.top + \"px\";\n      }\n\n      if (this.position.left !== this.prevPosition.left) {\n        props.left = this.position.left + \"px\";\n      }\n\n      if (this.size.width !== this.prevSize.width) {\n        props.width = this.size.width + \"px\";\n      }\n\n      if (this.size.height !== this.prevSize.height) {\n        props.height = this.size.height + \"px\";\n      }\n\n      this.helper.css(props);\n      return props;\n    },\n    _updateVirtualBoundaries: function _updateVirtualBoundaries(forceAspectRatio) {\n      var pMinWidth,\n          pMaxWidth,\n          pMinHeight,\n          pMaxHeight,\n          b,\n          o = this.options;\n      b = {\n        minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,\n        maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,\n        minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,\n        maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity\n      };\n\n      if (this._aspectRatio || forceAspectRatio) {\n        pMinWidth = b.minHeight * this.aspectRatio;\n        pMinHeight = b.minWidth / this.aspectRatio;\n        pMaxWidth = b.maxHeight * this.aspectRatio;\n        pMaxHeight = b.maxWidth / this.aspectRatio;\n\n        if (pMinWidth > b.minWidth) {\n          b.minWidth = pMinWidth;\n        }\n\n        if (pMinHeight > b.minHeight) {\n          b.minHeight = pMinHeight;\n        }\n\n        if (pMaxWidth < b.maxWidth) {\n          b.maxWidth = pMaxWidth;\n        }\n\n        if (pMaxHeight < b.maxHeight) {\n          b.maxHeight = pMaxHeight;\n        }\n      }\n\n      this._vBoundaries = b;\n    },\n    _updateCache: function _updateCache(data) {\n      this.offset = this.helper.offset();\n\n      if (this._isNumber(data.left)) {\n        this.position.left = data.left;\n      }\n\n      if (this._isNumber(data.top)) {\n        this.position.top = data.top;\n      }\n\n      if (this._isNumber(data.height)) {\n        this.size.height = data.height;\n      }\n\n      if (this._isNumber(data.width)) {\n        this.size.width = data.width;\n      }\n    },\n    _updateRatio: function _updateRatio(data) {\n      var cpos = this.position,\n          csize = this.size,\n          a = this.axis;\n\n      if (this._isNumber(data.height)) {\n        data.width = data.height * this.aspectRatio;\n      } else if (this._isNumber(data.width)) {\n        data.height = data.width / this.aspectRatio;\n      }\n\n      if (a === \"sw\") {\n        data.left = cpos.left + (csize.width - data.width);\n        data.top = null;\n      }\n\n      if (a === \"nw\") {\n        data.top = cpos.top + (csize.height - data.height);\n        data.left = cpos.left + (csize.width - data.width);\n      }\n\n      return data;\n    },\n    _respectSize: function _respectSize(data) {\n      var o = this._vBoundaries,\n          a = this.axis,\n          ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width,\n          ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height,\n          isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width,\n          isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height,\n          dw = this.originalPosition.left + this.originalSize.width,\n          dh = this.originalPosition.top + this.originalSize.height,\n          cw = /sw|nw|w/.test(a),\n          ch = /nw|ne|n/.test(a);\n\n      if (isminw) {\n        data.width = o.minWidth;\n      }\n\n      if (isminh) {\n        data.height = o.minHeight;\n      }\n\n      if (ismaxw) {\n        data.width = o.maxWidth;\n      }\n\n      if (ismaxh) {\n        data.height = o.maxHeight;\n      }\n\n      if (isminw && cw) {\n        data.left = dw - o.minWidth;\n      }\n\n      if (ismaxw && cw) {\n        data.left = dw - o.maxWidth;\n      }\n\n      if (isminh && ch) {\n        data.top = dh - o.minHeight;\n      }\n\n      if (ismaxh && ch) {\n        data.top = dh - o.maxHeight;\n      } // Fixing jump error on top/left - bug #2330\n\n\n      if (!data.width && !data.height && !data.left && data.top) {\n        data.top = null;\n      } else if (!data.width && !data.height && !data.top && data.left) {\n        data.left = null;\n      }\n\n      return data;\n    },\n    _getPaddingPlusBorderDimensions: function _getPaddingPlusBorderDimensions(element) {\n      var i = 0,\n          widths = [],\n          borders = [element.css(\"borderTopWidth\"), element.css(\"borderRightWidth\"), element.css(\"borderBottomWidth\"), element.css(\"borderLeftWidth\")],\n          paddings = [element.css(\"paddingTop\"), element.css(\"paddingRight\"), element.css(\"paddingBottom\"), element.css(\"paddingLeft\")];\n\n      for (; i < 4; i++) {\n        widths[i] = parseFloat(borders[i]) || 0;\n        widths[i] += parseFloat(paddings[i]) || 0;\n      }\n\n      return {\n        height: widths[0] + widths[2],\n        width: widths[1] + widths[3]\n      };\n    },\n    _proportionallyResize: function _proportionallyResize() {\n      if (!this._proportionallyResizeElements.length) {\n        return;\n      }\n\n      var prel,\n          i = 0,\n          element = this.helper || this.element;\n\n      for (; i < this._proportionallyResizeElements.length; i++) {\n        prel = this._proportionallyResizeElements[i]; // TODO: Seems like a bug to cache this.outerDimensions\n        // considering that we are in a loop.\n\n        if (!this.outerDimensions) {\n          this.outerDimensions = this._getPaddingPlusBorderDimensions(prel);\n        }\n\n        prel.css({\n          height: element.height() - this.outerDimensions.height || 0,\n          width: element.width() - this.outerDimensions.width || 0\n        });\n      }\n    },\n    _renderProxy: function _renderProxy() {\n      var el = this.element,\n          o = this.options;\n      this.elementOffset = el.offset();\n\n      if (this._helper) {\n        this.helper = this.helper || $(\"<div style='overflow:hidden;'></div>\");\n\n        this._addClass(this.helper, this._helper);\n\n        this.helper.css({\n          width: this.element.outerWidth(),\n          height: this.element.outerHeight(),\n          position: \"absolute\",\n          left: this.elementOffset.left + \"px\",\n          top: this.elementOffset.top + \"px\",\n          zIndex: ++o.zIndex //TODO: Don't modify option\n\n        });\n        this.helper.appendTo(\"body\").disableSelection();\n      } else {\n        this.helper = this.element;\n      }\n    },\n    _change: {\n      e: function e(event, dx) {\n        return {\n          width: this.originalSize.width + dx\n        };\n      },\n      w: function w(event, dx) {\n        var cs = this.originalSize,\n            sp = this.originalPosition;\n        return {\n          left: sp.left + dx,\n          width: cs.width - dx\n        };\n      },\n      n: function n(event, dx, dy) {\n        var cs = this.originalSize,\n            sp = this.originalPosition;\n        return {\n          top: sp.top + dy,\n          height: cs.height - dy\n        };\n      },\n      s: function s(event, dx, dy) {\n        return {\n          height: this.originalSize.height + dy\n        };\n      },\n      se: function se(event, dx, dy) {\n        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n      },\n      sw: function sw(event, dx, dy) {\n        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n      },\n      ne: function ne(event, dx, dy) {\n        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n      },\n      nw: function nw(event, dx, dy) {\n        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n      }\n    },\n    _propagate: function _propagate(n, event) {\n      $.ui.plugin.call(this, n, [event, this.ui()]);\n      n !== \"resize\" && this._trigger(n, event, this.ui());\n    },\n    plugins: {},\n    ui: function ui() {\n      return {\n        originalElement: this.originalElement,\n        element: this.element,\n        helper: this.helper,\n        position: this.position,\n        size: this.size,\n        originalSize: this.originalSize,\n        originalPosition: this.originalPosition\n      };\n    }\n  });\n  /*\r\n   * Resizable Extensions\r\n   */\n\n  $.ui.plugin.add(\"resizable\", \"animate\", {\n    stop: function stop(event) {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options,\n          pr = that._proportionallyResizeElements,\n          ista = pr.length && /textarea/i.test(pr[0].nodeName),\n          soffseth = ista && that._hasScroll(pr[0], \"left\") ? 0 : that.sizeDiff.height,\n          soffsetw = ista ? 0 : that.sizeDiff.width,\n          style = {\n        width: that.size.width - soffsetw,\n        height: that.size.height - soffseth\n      },\n          left = parseFloat(that.element.css(\"left\")) + (that.position.left - that.originalPosition.left) || null,\n          top = parseFloat(that.element.css(\"top\")) + (that.position.top - that.originalPosition.top) || null;\n      that.element.animate($.extend(style, top && left ? {\n        top: top,\n        left: left\n      } : {}), {\n        duration: o.animateDuration,\n        easing: o.animateEasing,\n        step: function step() {\n          var data = {\n            width: parseFloat(that.element.css(\"width\")),\n            height: parseFloat(that.element.css(\"height\")),\n            top: parseFloat(that.element.css(\"top\")),\n            left: parseFloat(that.element.css(\"left\"))\n          };\n\n          if (pr && pr.length) {\n            $(pr[0]).css({\n              width: data.width,\n              height: data.height\n            });\n          } // Propagating resize, and updating values for each animation step\n\n\n          that._updateCache(data);\n\n          that._propagate(\"resize\", event);\n        }\n      });\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"containment\", {\n    start: function start() {\n      var element,\n          p,\n          co,\n          ch,\n          cw,\n          width,\n          height,\n          that = $(this).resizable(\"instance\"),\n          o = that.options,\n          el = that.element,\n          oc = o.containment,\n          ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;\n\n      if (!ce) {\n        return;\n      }\n\n      that.containerElement = $(ce);\n\n      if (/document/.test(oc) || oc === document) {\n        that.containerOffset = {\n          left: 0,\n          top: 0\n        };\n        that.containerPosition = {\n          left: 0,\n          top: 0\n        };\n        that.parentData = {\n          element: $(document),\n          left: 0,\n          top: 0,\n          width: $(document).width(),\n          height: $(document).height() || document.body.parentNode.scrollHeight\n        };\n      } else {\n        element = $(ce);\n        p = [];\n        $([\"Top\", \"Right\", \"Left\", \"Bottom\"]).each(function (i, name) {\n          p[i] = that._num(element.css(\"padding\" + name));\n        });\n        that.containerOffset = element.offset();\n        that.containerPosition = element.position();\n        that.containerSize = {\n          height: element.innerHeight() - p[3],\n          width: element.innerWidth() - p[1]\n        };\n        co = that.containerOffset;\n        ch = that.containerSize.height;\n        cw = that.containerSize.width;\n        width = that._hasScroll(ce, \"left\") ? ce.scrollWidth : cw;\n        height = that._hasScroll(ce) ? ce.scrollHeight : ch;\n        that.parentData = {\n          element: ce,\n          left: co.left,\n          top: co.top,\n          width: width,\n          height: height\n        };\n      }\n    },\n    resize: function resize(event) {\n      var woset,\n          hoset,\n          isParent,\n          isOffsetRelative,\n          that = $(this).resizable(\"instance\"),\n          o = that.options,\n          co = that.containerOffset,\n          cp = that.position,\n          pRatio = that._aspectRatio || event.shiftKey,\n          cop = {\n        top: 0,\n        left: 0\n      },\n          ce = that.containerElement,\n          continueResize = true;\n\n      if (ce[0] !== document && /static/.test(ce.css(\"position\"))) {\n        cop = co;\n      }\n\n      if (cp.left < (that._helper ? co.left : 0)) {\n        that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);\n\n        if (pRatio) {\n          that.size.height = that.size.width / that.aspectRatio;\n          continueResize = false;\n        }\n\n        that.position.left = o.helper ? co.left : 0;\n      }\n\n      if (cp.top < (that._helper ? co.top : 0)) {\n        that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);\n\n        if (pRatio) {\n          that.size.width = that.size.height * that.aspectRatio;\n          continueResize = false;\n        }\n\n        that.position.top = that._helper ? co.top : 0;\n      }\n\n      isParent = that.containerElement.get(0) === that.element.parent().get(0);\n      isOffsetRelative = /relative|absolute/.test(that.containerElement.css(\"position\"));\n\n      if (isParent && isOffsetRelative) {\n        that.offset.left = that.parentData.left + that.position.left;\n        that.offset.top = that.parentData.top + that.position.top;\n      } else {\n        that.offset.left = that.element.offset().left;\n        that.offset.top = that.element.offset().top;\n      }\n\n      woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));\n      hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));\n\n      if (woset + that.size.width >= that.parentData.width) {\n        that.size.width = that.parentData.width - woset;\n\n        if (pRatio) {\n          that.size.height = that.size.width / that.aspectRatio;\n          continueResize = false;\n        }\n      }\n\n      if (hoset + that.size.height >= that.parentData.height) {\n        that.size.height = that.parentData.height - hoset;\n\n        if (pRatio) {\n          that.size.width = that.size.height * that.aspectRatio;\n          continueResize = false;\n        }\n      }\n\n      if (!continueResize) {\n        that.position.left = that.prevPosition.left;\n        that.position.top = that.prevPosition.top;\n        that.size.width = that.prevSize.width;\n        that.size.height = that.prevSize.height;\n      }\n    },\n    stop: function stop() {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options,\n          co = that.containerOffset,\n          cop = that.containerPosition,\n          ce = that.containerElement,\n          helper = $(that.helper),\n          ho = helper.offset(),\n          w = helper.outerWidth() - that.sizeDiff.width,\n          h = helper.outerHeight() - that.sizeDiff.height;\n\n      if (that._helper && !o.animate && /relative/.test(ce.css(\"position\"))) {\n        $(this).css({\n          left: ho.left - cop.left - co.left,\n          width: w,\n          height: h\n        });\n      }\n\n      if (that._helper && !o.animate && /static/.test(ce.css(\"position\"))) {\n        $(this).css({\n          left: ho.left - cop.left - co.left,\n          width: w,\n          height: h\n        });\n      }\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"alsoResize\", {\n    start: function start() {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options;\n      $(o.alsoResize).each(function () {\n        var el = $(this);\n        el.data(\"ui-resizable-alsoresize\", {\n          width: parseFloat(el.width()),\n          height: parseFloat(el.height()),\n          left: parseFloat(el.css(\"left\")),\n          top: parseFloat(el.css(\"top\"))\n        });\n      });\n    },\n    resize: function resize(event, ui) {\n      var that = $(this).resizable(\"instance\"),\n          o = that.options,\n          os = that.originalSize,\n          op = that.originalPosition,\n          delta = {\n        height: that.size.height - os.height || 0,\n        width: that.size.width - os.width || 0,\n        top: that.position.top - op.top || 0,\n        left: that.position.left - op.left || 0\n      };\n      $(o.alsoResize).each(function () {\n        var el = $(this),\n            start = $(this).data(\"ui-resizable-alsoresize\"),\n            style = {},\n            css = el.parents(ui.originalElement[0]).length ? [\"width\", \"height\"] : [\"width\", \"height\", \"top\", \"left\"];\n        $.each(css, function (i, prop) {\n          var sum = (start[prop] || 0) + (delta[prop] || 0);\n\n          if (sum && sum >= 0) {\n            style[prop] = sum || null;\n          }\n        });\n        el.css(style);\n      });\n    },\n    stop: function stop() {\n      $(this).removeData(\"ui-resizable-alsoresize\");\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"ghost\", {\n    start: function start() {\n      var that = $(this).resizable(\"instance\"),\n          cs = that.size;\n      that.ghost = that.originalElement.clone();\n      that.ghost.css({\n        opacity: 0.25,\n        display: \"block\",\n        position: \"relative\",\n        height: cs.height,\n        width: cs.width,\n        margin: 0,\n        left: 0,\n        top: 0\n      });\n\n      that._addClass(that.ghost, \"ui-resizable-ghost\"); // DEPRECATED\n      // TODO: remove after 1.12\n\n\n      if ($.uiBackCompat !== false && typeof that.options.ghost === \"string\") {\n        // Ghost option\n        that.ghost.addClass(this.options.ghost);\n      }\n\n      that.ghost.appendTo(that.helper);\n    },\n    resize: function resize() {\n      var that = $(this).resizable(\"instance\");\n\n      if (that.ghost) {\n        that.ghost.css({\n          position: \"relative\",\n          height: that.size.height,\n          width: that.size.width\n        });\n      }\n    },\n    stop: function stop() {\n      var that = $(this).resizable(\"instance\");\n\n      if (that.ghost && that.helper) {\n        that.helper.get(0).removeChild(that.ghost.get(0));\n      }\n    }\n  });\n  $.ui.plugin.add(\"resizable\", \"grid\", {\n    resize: function resize() {\n      var outerDimensions,\n          that = $(this).resizable(\"instance\"),\n          o = that.options,\n          cs = that.size,\n          os = that.originalSize,\n          op = that.originalPosition,\n          a = that.axis,\n          grid = typeof o.grid === \"number\" ? [o.grid, o.grid] : o.grid,\n          gridX = grid[0] || 1,\n          gridY = grid[1] || 1,\n          ox = Math.round((cs.width - os.width) / gridX) * gridX,\n          oy = Math.round((cs.height - os.height) / gridY) * gridY,\n          newWidth = os.width + ox,\n          newHeight = os.height + oy,\n          isMaxWidth = o.maxWidth && o.maxWidth < newWidth,\n          isMaxHeight = o.maxHeight && o.maxHeight < newHeight,\n          isMinWidth = o.minWidth && o.minWidth > newWidth,\n          isMinHeight = o.minHeight && o.minHeight > newHeight;\n      o.grid = grid;\n\n      if (isMinWidth) {\n        newWidth += gridX;\n      }\n\n      if (isMinHeight) {\n        newHeight += gridY;\n      }\n\n      if (isMaxWidth) {\n        newWidth -= gridX;\n      }\n\n      if (isMaxHeight) {\n        newHeight -= gridY;\n      }\n\n      if (/^(se|s|e)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n      } else if (/^(ne)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n        that.position.top = op.top - oy;\n      } else if (/^(sw)$/.test(a)) {\n        that.size.width = newWidth;\n        that.size.height = newHeight;\n        that.position.left = op.left - ox;\n      } else {\n        if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {\n          outerDimensions = that._getPaddingPlusBorderDimensions(this);\n        }\n\n        if (newHeight - gridY > 0) {\n          that.size.height = newHeight;\n          that.position.top = op.top - oy;\n        } else {\n          newHeight = gridY - outerDimensions.height;\n          that.size.height = newHeight;\n          that.position.top = op.top + os.height - newHeight;\n        }\n\n        if (newWidth - gridX > 0) {\n          that.size.width = newWidth;\n          that.position.left = op.left - ox;\n        } else {\n          newWidth = gridX - outerDimensions.width;\n          that.size.width = newWidth;\n          that.position.left = op.left + os.width - newWidth;\n        }\n      }\n    }\n  });\n  var widgetsResizable = $.ui.resizable;\n  /*!\r\n   * jQuery UI Selectable 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Selectable\n  //>>group: Interactions\n  //>>description: Allows groups of elements to be selected with the mouse.\n  //>>docs: http://api.jqueryui.com/selectable/\n  //>>demos: http://jqueryui.com/selectable/\n  //>>css.structure: ../../themes/base/selectable.css\n\n  var widgetsSelectable = $.widget(\"ui.selectable\", $.ui.mouse, {\n    version: \"1.12.1\",\n    options: {\n      appendTo: \"body\",\n      autoRefresh: true,\n      distance: 0,\n      filter: \"*\",\n      tolerance: \"touch\",\n      // Callbacks\n      selected: null,\n      selecting: null,\n      start: null,\n      stop: null,\n      unselected: null,\n      unselecting: null\n    },\n    _create: function _create() {\n      var that = this;\n\n      this._addClass(\"ui-selectable\");\n\n      this.dragged = false; // Cache selectee children based on filter\n\n      this.refresh = function () {\n        that.elementPos = $(that.element[0]).offset();\n        that.selectees = $(that.options.filter, that.element[0]);\n\n        that._addClass(that.selectees, \"ui-selectee\");\n\n        that.selectees.each(function () {\n          var $this = $(this),\n              selecteeOffset = $this.offset(),\n              pos = {\n            left: selecteeOffset.left - that.elementPos.left,\n            top: selecteeOffset.top - that.elementPos.top\n          };\n          $.data(this, \"selectable-item\", {\n            element: this,\n            $element: $this,\n            left: pos.left,\n            top: pos.top,\n            right: pos.left + $this.outerWidth(),\n            bottom: pos.top + $this.outerHeight(),\n            startselected: false,\n            selected: $this.hasClass(\"ui-selected\"),\n            selecting: $this.hasClass(\"ui-selecting\"),\n            unselecting: $this.hasClass(\"ui-unselecting\")\n          });\n        });\n      };\n\n      this.refresh();\n\n      this._mouseInit();\n\n      this.helper = $(\"<div>\");\n\n      this._addClass(this.helper, \"ui-selectable-helper\");\n    },\n    _destroy: function _destroy() {\n      this.selectees.removeData(\"selectable-item\");\n\n      this._mouseDestroy();\n    },\n    _mouseStart: function _mouseStart(event) {\n      var that = this,\n          options = this.options;\n      this.opos = [event.pageX, event.pageY];\n      this.elementPos = $(this.element[0]).offset();\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      this.selectees = $(options.filter, this.element[0]);\n\n      this._trigger(\"start\", event);\n\n      $(options.appendTo).append(this.helper); // position helper (lasso)\n\n      this.helper.css({\n        \"left\": event.pageX,\n        \"top\": event.pageY,\n        \"width\": 0,\n        \"height\": 0\n      });\n\n      if (options.autoRefresh) {\n        this.refresh();\n      }\n\n      this.selectees.filter(\".ui-selected\").each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.startselected = true;\n\n        if (!event.metaKey && !event.ctrlKey) {\n          that._removeClass(selectee.$element, \"ui-selected\");\n\n          selectee.selected = false;\n\n          that._addClass(selectee.$element, \"ui-unselecting\");\n\n          selectee.unselecting = true; // selectable UNSELECTING callback\n\n          that._trigger(\"unselecting\", event, {\n            unselecting: selectee.element\n          });\n        }\n      });\n      $(event.target).parents().addBack().each(function () {\n        var doSelect,\n            selectee = $.data(this, \"selectable-item\");\n\n        if (selectee) {\n          doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass(\"ui-selected\");\n\n          that._removeClass(selectee.$element, doSelect ? \"ui-unselecting\" : \"ui-selected\")._addClass(selectee.$element, doSelect ? \"ui-selecting\" : \"ui-unselecting\");\n\n          selectee.unselecting = !doSelect;\n          selectee.selecting = doSelect;\n          selectee.selected = doSelect; // selectable (UN)SELECTING callback\n\n          if (doSelect) {\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          } else {\n            that._trigger(\"unselecting\", event, {\n              unselecting: selectee.element\n            });\n          }\n\n          return false;\n        }\n      });\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      this.dragged = true;\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      var tmp,\n          that = this,\n          options = this.options,\n          x1 = this.opos[0],\n          y1 = this.opos[1],\n          x2 = event.pageX,\n          y2 = event.pageY;\n\n      if (x1 > x2) {\n        tmp = x2;\n        x2 = x1;\n        x1 = tmp;\n      }\n\n      if (y1 > y2) {\n        tmp = y2;\n        y2 = y1;\n        y1 = tmp;\n      }\n\n      this.helper.css({\n        left: x1,\n        top: y1,\n        width: x2 - x1,\n        height: y2 - y1\n      });\n      this.selectees.each(function () {\n        var selectee = $.data(this, \"selectable-item\"),\n            hit = false,\n            offset = {}; //prevent helper from being selected if appendTo: selectable\n\n        if (!selectee || selectee.element === that.element[0]) {\n          return;\n        }\n\n        offset.left = selectee.left + that.elementPos.left;\n        offset.right = selectee.right + that.elementPos.left;\n        offset.top = selectee.top + that.elementPos.top;\n        offset.bottom = selectee.bottom + that.elementPos.top;\n\n        if (options.tolerance === \"touch\") {\n          hit = !(offset.left > x2 || offset.right < x1 || offset.top > y2 || offset.bottom < y1);\n        } else if (options.tolerance === \"fit\") {\n          hit = offset.left > x1 && offset.right < x2 && offset.top > y1 && offset.bottom < y2;\n        }\n\n        if (hit) {\n          // SELECT\n          if (selectee.selected) {\n            that._removeClass(selectee.$element, \"ui-selected\");\n\n            selectee.selected = false;\n          }\n\n          if (selectee.unselecting) {\n            that._removeClass(selectee.$element, \"ui-unselecting\");\n\n            selectee.unselecting = false;\n          }\n\n          if (!selectee.selecting) {\n            that._addClass(selectee.$element, \"ui-selecting\");\n\n            selectee.selecting = true; // selectable SELECTING callback\n\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          }\n        } else {\n          // UNSELECT\n          if (selectee.selecting) {\n            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {\n              that._removeClass(selectee.$element, \"ui-selecting\");\n\n              selectee.selecting = false;\n\n              that._addClass(selectee.$element, \"ui-selected\");\n\n              selectee.selected = true;\n            } else {\n              that._removeClass(selectee.$element, \"ui-selecting\");\n\n              selectee.selecting = false;\n\n              if (selectee.startselected) {\n                that._addClass(selectee.$element, \"ui-unselecting\");\n\n                selectee.unselecting = true;\n              } // selectable UNSELECTING callback\n\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n\n          if (selectee.selected) {\n            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {\n              that._removeClass(selectee.$element, \"ui-selected\");\n\n              selectee.selected = false;\n\n              that._addClass(selectee.$element, \"ui-unselecting\");\n\n              selectee.unselecting = true; // selectable UNSELECTING callback\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n        }\n      });\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      var that = this;\n      this.dragged = false;\n      $(\".ui-unselecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n\n        that._removeClass(selectee.$element, \"ui-unselecting\");\n\n        selectee.unselecting = false;\n        selectee.startselected = false;\n\n        that._trigger(\"unselected\", event, {\n          unselected: selectee.element\n        });\n      });\n      $(\".ui-selecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n\n        that._removeClass(selectee.$element, \"ui-selecting\")._addClass(selectee.$element, \"ui-selected\");\n\n        selectee.selecting = false;\n        selectee.selected = true;\n        selectee.startselected = true;\n\n        that._trigger(\"selected\", event, {\n          selected: selectee.element\n        });\n      });\n\n      this._trigger(\"stop\", event);\n\n      this.helper.remove();\n      return false;\n    }\n  });\n  /*!\r\n   * jQuery UI Sortable 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Sortable\n  //>>group: Interactions\n  //>>description: Enables items in a list to be sorted using the mouse.\n  //>>docs: http://api.jqueryui.com/sortable/\n  //>>demos: http://jqueryui.com/sortable/\n  //>>css.structure: ../../themes/base/sortable.css\n\n  var widgetsSortable = $.widget(\"ui.sortable\", $.ui.mouse, {\n    version: \"1.12.1\",\n    widgetEventPrefix: \"sort\",\n    ready: false,\n    options: {\n      appendTo: \"parent\",\n      axis: false,\n      connectWith: false,\n      containment: false,\n      cursor: \"auto\",\n      cursorAt: false,\n      dropOnEmpty: true,\n      forcePlaceholderSize: false,\n      forceHelperSize: false,\n      grid: false,\n      handle: false,\n      helper: \"original\",\n      items: \"> *\",\n      opacity: false,\n      placeholder: false,\n      revert: false,\n      scroll: true,\n      scrollSensitivity: 20,\n      scrollSpeed: 20,\n      scope: \"default\",\n      tolerance: \"intersect\",\n      zIndex: 1000,\n      // Callbacks\n      activate: null,\n      beforeStop: null,\n      change: null,\n      deactivate: null,\n      out: null,\n      over: null,\n      receive: null,\n      remove: null,\n      sort: null,\n      start: null,\n      stop: null,\n      update: null\n    },\n    _isOverAxis: function _isOverAxis(x, reference, size) {\n      return x >= reference && x < reference + size;\n    },\n    _isFloating: function _isFloating(item) {\n      return /left|right/.test(item.css(\"float\")) || /inline|table-cell/.test(item.css(\"display\"));\n    },\n    _create: function _create() {\n      this.containerCache = {};\n\n      this._addClass(\"ui-sortable\"); //Get the items\n\n\n      this.refresh(); //Let's determine the parent's offset\n\n      this.offset = this.element.offset(); //Initialize mouse events for interaction\n\n      this._mouseInit();\n\n      this._setHandleClassName(); //We're ready to go\n\n\n      this.ready = true;\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"handle\") {\n        this._setHandleClassName();\n      }\n    },\n    _setHandleClassName: function _setHandleClassName() {\n      var that = this;\n\n      this._removeClass(this.element.find(\".ui-sortable-handle\"), \"ui-sortable-handle\");\n\n      $.each(this.items, function () {\n        that._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, \"ui-sortable-handle\");\n      });\n    },\n    _destroy: function _destroy() {\n      this._mouseDestroy();\n\n      for (var i = this.items.length - 1; i >= 0; i--) {\n        this.items[i].item.removeData(this.widgetName + \"-item\");\n      }\n\n      return this;\n    },\n    _mouseCapture: function _mouseCapture(event, overrideHandle) {\n      var currentItem = null,\n          validHandle = false,\n          that = this;\n\n      if (this.reverting) {\n        return false;\n      }\n\n      if (this.options.disabled || this.options.type === \"static\") {\n        return false;\n      } //We have to refresh the items data once first\n\n\n      this._refreshItems(event); //Find out if the clicked node (or one of its parents) is a actual item in this.items\n\n\n      $(event.target).parents().each(function () {\n        if ($.data(this, that.widgetName + \"-item\") === that) {\n          currentItem = $(this);\n          return false;\n        }\n      });\n\n      if ($.data(event.target, that.widgetName + \"-item\") === that) {\n        currentItem = $(event.target);\n      }\n\n      if (!currentItem) {\n        return false;\n      }\n\n      if (this.options.handle && !overrideHandle) {\n        $(this.options.handle, currentItem).find(\"*\").addBack().each(function () {\n          if (this === event.target) {\n            validHandle = true;\n          }\n        });\n\n        if (!validHandle) {\n          return false;\n        }\n      }\n\n      this.currentItem = currentItem;\n\n      this._removeCurrentsFromItems();\n\n      return true;\n    },\n    _mouseStart: function _mouseStart(event, overrideHandle, noActivation) {\n      var i,\n          body,\n          o = this.options;\n      this.currentContainer = this; //We only need to call refreshPositions, because the refreshItems call has been moved to\n      // mouseCapture\n\n      this.refreshPositions(); //Create and append the visible helper\n\n      this.helper = this._createHelper(event); //Cache the helper size\n\n      this._cacheHelperProportions();\n      /*\r\n       * - Position generation -\r\n       * This block generates everything position related - it's the core of draggables.\r\n       */\n      //Cache the margins of the original element\n\n\n      this._cacheMargins(); //Get the next scrolling parent\n\n\n      this.scrollParent = this.helper.scrollParent(); //The element's absolute position on the page minus margins\n\n      this.offset = this.currentItem.offset();\n      this.offset = {\n        top: this.offset.top - this.margins.top,\n        left: this.offset.left - this.margins.left\n      };\n      $.extend(this.offset, {\n        click: {\n          //Where the click happened, relative to the element\n          left: event.pageX - this.offset.left,\n          top: event.pageY - this.offset.top\n        },\n        parent: this._getParentOffset(),\n        // This is a relative to absolute position minus the actual position calculation -\n        // only used for relative positioned helper\n        relative: this._getRelativeOffset()\n      }); // Only after we got the offset, we can change the helper's position to absolute\n      // TODO: Still need to figure out a way to make relative sorting possible\n\n      this.helper.css(\"position\", \"absolute\");\n      this.cssPosition = this.helper.css(\"position\"); //Generate the original position\n\n      this.originalPosition = this._generatePosition(event);\n      this.originalPageX = event.pageX;\n      this.originalPageY = event.pageY; //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n\n      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt); //Cache the former DOM position\n\n      this.domPosition = {\n        prev: this.currentItem.prev()[0],\n        parent: this.currentItem.parent()[0]\n      }; // If the helper is not the original, hide the original so it's not playing any role during\n      // the drag, won't cause anything bad this way\n\n      if (this.helper[0] !== this.currentItem[0]) {\n        this.currentItem.hide();\n      } //Create the placeholder\n\n\n      this._createPlaceholder(); //Set a containment if given in the options\n\n\n      if (o.containment) {\n        this._setContainment();\n      }\n\n      if (o.cursor && o.cursor !== \"auto\") {\n        // cursor option\n        body = this.document.find(\"body\"); // Support: IE\n\n        this.storedCursor = body.css(\"cursor\");\n        body.css(\"cursor\", o.cursor);\n        this.storedStylesheet = $(\"<style>*{ cursor: \" + o.cursor + \" !important; }</style>\").appendTo(body);\n      }\n\n      if (o.opacity) {\n        // opacity option\n        if (this.helper.css(\"opacity\")) {\n          this._storedOpacity = this.helper.css(\"opacity\");\n        }\n\n        this.helper.css(\"opacity\", o.opacity);\n      }\n\n      if (o.zIndex) {\n        // zIndex option\n        if (this.helper.css(\"zIndex\")) {\n          this._storedZIndex = this.helper.css(\"zIndex\");\n        }\n\n        this.helper.css(\"zIndex\", o.zIndex);\n      } //Prepare scrolling\n\n\n      if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== \"HTML\") {\n        this.overflowOffset = this.scrollParent.offset();\n      } //Call callbacks\n\n\n      this._trigger(\"start\", event, this._uiHash()); //Recache the helper size\n\n\n      if (!this._preserveHelperProportions) {\n        this._cacheHelperProportions();\n      } //Post \"activate\" events to possible containers\n\n\n      if (!noActivation) {\n        for (i = this.containers.length - 1; i >= 0; i--) {\n          this.containers[i]._trigger(\"activate\", event, this._uiHash(this));\n        }\n      } //Prepare possible droppables\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.current = this;\n      }\n\n      if ($.ui.ddmanager && !o.dropBehaviour) {\n        $.ui.ddmanager.prepareOffsets(this, event);\n      }\n\n      this.dragging = true;\n\n      this._addClass(this.helper, \"ui-sortable-helper\"); // Execute the drag once - this causes the helper not to be visiblebefore getting its\n      // correct position\n\n\n      this._mouseDrag(event);\n\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var i,\n          item,\n          itemElement,\n          intersection,\n          o = this.options,\n          scrolled = false; //Compute the helpers position\n\n      this.position = this._generatePosition(event);\n      this.positionAbs = this._convertPositionTo(\"absolute\");\n\n      if (!this.lastPositionAbs) {\n        this.lastPositionAbs = this.positionAbs;\n      } //Do scrolling\n\n\n      if (this.options.scroll) {\n        if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== \"HTML\") {\n          if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {\n            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;\n          } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {\n            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;\n          }\n\n          if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {\n            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;\n          } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {\n            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;\n          }\n        } else {\n          if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {\n            scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);\n          } else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {\n            scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);\n          }\n\n          if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {\n            scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);\n          } else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {\n            scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);\n          }\n        }\n\n        if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n          $.ui.ddmanager.prepareOffsets(this, event);\n        }\n      } //Regenerate the absolute position used for position checks\n\n\n      this.positionAbs = this._convertPositionTo(\"absolute\"); //Set the helper position\n\n      if (!this.options.axis || this.options.axis !== \"y\") {\n        this.helper[0].style.left = this.position.left + \"px\";\n      }\n\n      if (!this.options.axis || this.options.axis !== \"x\") {\n        this.helper[0].style.top = this.position.top + \"px\";\n      } //Rearrange\n\n\n      for (i = this.items.length - 1; i >= 0; i--) {\n        //Cache variables and intersection, continue if no intersection\n        item = this.items[i];\n        itemElement = item.item[0];\n        intersection = this._intersectsWithPointer(item);\n\n        if (!intersection) {\n          continue;\n        } // Only put the placeholder inside the current Container, skip all\n        // items from other containers. This works because when moving\n        // an item from one container to another the\n        // currentContainer is switched before the placeholder is moved.\n        //\n        // Without this, moving items in \"sub-sortables\" can cause\n        // the placeholder to jitter between the outer and inner container.\n\n\n        if (item.instance !== this.currentContainer) {\n          continue;\n        } // Cannot intersect with itself\n        // no useless actions that have been done before\n        // no action if the item moved is the parent of the item checked\n\n\n        if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? \"next\" : \"prev\"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === \"semi-dynamic\" ? !$.contains(this.element[0], itemElement) : true)) {\n          this.direction = intersection === 1 ? \"down\" : \"up\";\n\n          if (this.options.tolerance === \"pointer\" || this._intersectsWithSides(item)) {\n            this._rearrange(event, item);\n          } else {\n            break;\n          }\n\n          this._trigger(\"change\", event, this._uiHash());\n\n          break;\n        }\n      } //Post events to containers\n\n\n      this._contactContainers(event); //Interconnect with droppables\n\n\n      if ($.ui.ddmanager) {\n        $.ui.ddmanager.drag(this, event);\n      } //Call callbacks\n\n\n      this._trigger(\"sort\", event, this._uiHash());\n\n      this.lastPositionAbs = this.positionAbs;\n      return false;\n    },\n    _mouseStop: function _mouseStop(event, noPropagation) {\n      if (!event) {\n        return;\n      } //If we are using droppables, inform the manager about the drop\n\n\n      if ($.ui.ddmanager && !this.options.dropBehaviour) {\n        $.ui.ddmanager.drop(this, event);\n      }\n\n      if (this.options.revert) {\n        var that = this,\n            cur = this.placeholder.offset(),\n            axis = this.options.axis,\n            animation = {};\n\n        if (!axis || axis === \"x\") {\n          animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);\n        }\n\n        if (!axis || axis === \"y\") {\n          animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);\n        }\n\n        this.reverting = true;\n        $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function () {\n          that._clear(event);\n        });\n      } else {\n        this._clear(event, noPropagation);\n      }\n\n      return false;\n    },\n    cancel: function cancel() {\n      if (this.dragging) {\n        this._mouseUp(new $.Event(\"mouseup\", {\n          target: null\n        }));\n\n        if (this.options.helper === \"original\") {\n          this.currentItem.css(this._storedCSS);\n\n          this._removeClass(this.currentItem, \"ui-sortable-helper\");\n        } else {\n          this.currentItem.show();\n        } //Post deactivating events to containers\n\n\n        for (var i = this.containers.length - 1; i >= 0; i--) {\n          this.containers[i]._trigger(\"deactivate\", null, this._uiHash(this));\n\n          if (this.containers[i].containerCache.over) {\n            this.containers[i]._trigger(\"out\", null, this._uiHash(this));\n\n            this.containers[i].containerCache.over = 0;\n          }\n        }\n      }\n\n      if (this.placeholder) {\n        //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,\n        // it unbinds ALL events from the original node!\n        if (this.placeholder[0].parentNode) {\n          this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n        }\n\n        if (this.options.helper !== \"original\" && this.helper && this.helper[0].parentNode) {\n          this.helper.remove();\n        }\n\n        $.extend(this, {\n          helper: null,\n          dragging: false,\n          reverting: false,\n          _noFinalSort: null\n        });\n\n        if (this.domPosition.prev) {\n          $(this.domPosition.prev).after(this.currentItem);\n        } else {\n          $(this.domPosition.parent).prepend(this.currentItem);\n        }\n      }\n\n      return this;\n    },\n    serialize: function serialize(o) {\n      var items = this._getItemsAsjQuery(o && o.connected),\n          str = [];\n\n      o = o || {};\n      $(items).each(function () {\n        var res = ($(o.item || this).attr(o.attribute || \"id\") || \"\").match(o.expression || /(.+)[\\-=_](.+)/);\n\n        if (res) {\n          str.push((o.key || res[1] + \"[]\") + \"=\" + (o.key && o.expression ? res[1] : res[2]));\n        }\n      });\n\n      if (!str.length && o.key) {\n        str.push(o.key + \"=\");\n      }\n\n      return str.join(\"&\");\n    },\n    toArray: function toArray(o) {\n      var items = this._getItemsAsjQuery(o && o.connected),\n          ret = [];\n\n      o = o || {};\n      items.each(function () {\n        ret.push($(o.item || this).attr(o.attribute || \"id\") || \"\");\n      });\n      return ret;\n    },\n\n    /* Be careful with the following core functions */\n    _intersectsWith: function _intersectsWith(item) {\n      var x1 = this.positionAbs.left,\n          x2 = x1 + this.helperProportions.width,\n          y1 = this.positionAbs.top,\n          y2 = y1 + this.helperProportions.height,\n          l = item.left,\n          r = l + item.width,\n          t = item.top,\n          b = t + item.height,\n          dyClick = this.offset.click.top,\n          dxClick = this.offset.click.left,\n          isOverElementHeight = this.options.axis === \"x\" || y1 + dyClick > t && y1 + dyClick < b,\n          isOverElementWidth = this.options.axis === \"y\" || x1 + dxClick > l && x1 + dxClick < r,\n          isOverElement = isOverElementHeight && isOverElementWidth;\n\n      if (this.options.tolerance === \"pointer\" || this.options.forcePointerForContainers || this.options.tolerance !== \"pointer\" && this.helperProportions[this.floating ? \"width\" : \"height\"] > item[this.floating ? \"width\" : \"height\"]) {\n        return isOverElement;\n      } else {\n        return l < x1 + this.helperProportions.width / 2 && // Right Half\n        x2 - this.helperProportions.width / 2 < r && // Left Half\n        t < y1 + this.helperProportions.height / 2 && // Bottom Half\n        y2 - this.helperProportions.height / 2 < b; // Top Half\n      }\n    },\n    _intersectsWithPointer: function _intersectsWithPointer(item) {\n      var verticalDirection,\n          horizontalDirection,\n          isOverElementHeight = this.options.axis === \"x\" || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),\n          isOverElementWidth = this.options.axis === \"y\" || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),\n          isOverElement = isOverElementHeight && isOverElementWidth;\n\n      if (!isOverElement) {\n        return false;\n      }\n\n      verticalDirection = this._getDragVerticalDirection();\n      horizontalDirection = this._getDragHorizontalDirection();\n      return this.floating ? horizontalDirection === \"right\" || verticalDirection === \"down\" ? 2 : 1 : verticalDirection && (verticalDirection === \"down\" ? 2 : 1);\n    },\n    _intersectsWithSides: function _intersectsWithSides(item) {\n      var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height),\n          isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width),\n          verticalDirection = this._getDragVerticalDirection(),\n          horizontalDirection = this._getDragHorizontalDirection();\n\n      if (this.floating && horizontalDirection) {\n        return horizontalDirection === \"right\" && isOverRightHalf || horizontalDirection === \"left\" && !isOverRightHalf;\n      } else {\n        return verticalDirection && (verticalDirection === \"down\" && isOverBottomHalf || verticalDirection === \"up\" && !isOverBottomHalf);\n      }\n    },\n    _getDragVerticalDirection: function _getDragVerticalDirection() {\n      var delta = this.positionAbs.top - this.lastPositionAbs.top;\n      return delta !== 0 && (delta > 0 ? \"down\" : \"up\");\n    },\n    _getDragHorizontalDirection: function _getDragHorizontalDirection() {\n      var delta = this.positionAbs.left - this.lastPositionAbs.left;\n      return delta !== 0 && (delta > 0 ? \"right\" : \"left\");\n    },\n    refresh: function refresh(event) {\n      this._refreshItems(event);\n\n      this._setHandleClassName();\n\n      this.refreshPositions();\n      return this;\n    },\n    _connectWith: function _connectWith() {\n      var options = this.options;\n      return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;\n    },\n    _getItemsAsjQuery: function _getItemsAsjQuery(connected) {\n      var i,\n          j,\n          cur,\n          inst,\n          items = [],\n          queries = [],\n          connectWith = this._connectWith();\n\n      if (connectWith && connected) {\n        for (i = connectWith.length - 1; i >= 0; i--) {\n          cur = $(connectWith[i], this.document[0]);\n\n          for (j = cur.length - 1; j >= 0; j--) {\n            inst = $.data(cur[j], this.widgetFullName);\n\n            if (inst && inst !== this && !inst.options.disabled) {\n              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), inst]);\n            }\n          }\n        }\n      }\n\n      queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {\n        options: this.options,\n        item: this.currentItem\n      }) : $(this.options.items, this.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), this]);\n\n      function addItems() {\n        items.push(this);\n      }\n\n      for (i = queries.length - 1; i >= 0; i--) {\n        queries[i][0].each(addItems);\n      }\n\n      return $(items);\n    },\n    _removeCurrentsFromItems: function _removeCurrentsFromItems() {\n      var list = this.currentItem.find(\":data(\" + this.widgetName + \"-item)\");\n      this.items = $.grep(this.items, function (item) {\n        for (var j = 0; j < list.length; j++) {\n          if (list[j] === item.item[0]) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    },\n    _refreshItems: function _refreshItems(event) {\n      this.items = [];\n      this.containers = [this];\n\n      var i,\n          j,\n          cur,\n          inst,\n          targetData,\n          _queries,\n          item,\n          queriesLength,\n          items = this.items,\n          queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {\n        item: this.currentItem\n      }) : $(this.options.items, this.element), this]],\n          connectWith = this._connectWith(); //Shouldn't be run the first time through due to massive slow-down\n\n\n      if (connectWith && this.ready) {\n        for (i = connectWith.length - 1; i >= 0; i--) {\n          cur = $(connectWith[i], this.document[0]);\n\n          for (j = cur.length - 1; j >= 0; j--) {\n            inst = $.data(cur[j], this.widgetFullName);\n\n            if (inst && inst !== this && !inst.options.disabled) {\n              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {\n                item: this.currentItem\n              }) : $(inst.options.items, inst.element), inst]);\n              this.containers.push(inst);\n            }\n          }\n        }\n      }\n\n      for (i = queries.length - 1; i >= 0; i--) {\n        targetData = queries[i][1];\n        _queries = queries[i][0];\n\n        for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {\n          item = $(_queries[j]); // Data for target checking (mouse manager)\n\n          item.data(this.widgetName + \"-item\", targetData);\n          items.push({\n            item: item,\n            instance: targetData,\n            width: 0,\n            height: 0,\n            left: 0,\n            top: 0\n          });\n        }\n      }\n    },\n    refreshPositions: function refreshPositions(fast) {\n      // Determine whether items are being displayed horizontally\n      this.floating = this.items.length ? this.options.axis === \"x\" || this._isFloating(this.items[0].item) : false; //This has to be redone because due to the item being moved out/into the offsetParent,\n      // the offsetParent's position will change\n\n      if (this.offsetParent && this.helper) {\n        this.offset.parent = this._getParentOffset();\n      }\n\n      var i, item, t, p;\n\n      for (i = this.items.length - 1; i >= 0; i--) {\n        item = this.items[i]; //We ignore calculating positions of all connected containers when we're not over them\n\n        if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {\n          continue;\n        }\n\n        t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;\n\n        if (!fast) {\n          item.width = t.outerWidth();\n          item.height = t.outerHeight();\n        }\n\n        p = t.offset();\n        item.left = p.left;\n        item.top = p.top;\n      }\n\n      if (this.options.custom && this.options.custom.refreshContainers) {\n        this.options.custom.refreshContainers.call(this);\n      } else {\n        for (i = this.containers.length - 1; i >= 0; i--) {\n          p = this.containers[i].element.offset();\n          this.containers[i].containerCache.left = p.left;\n          this.containers[i].containerCache.top = p.top;\n          this.containers[i].containerCache.width = this.containers[i].element.outerWidth();\n          this.containers[i].containerCache.height = this.containers[i].element.outerHeight();\n        }\n      }\n\n      return this;\n    },\n    _createPlaceholder: function _createPlaceholder(that) {\n      that = that || this;\n      var className,\n          o = that.options;\n\n      if (!o.placeholder || o.placeholder.constructor === String) {\n        className = o.placeholder;\n        o.placeholder = {\n          element: function element() {\n            var nodeName = that.currentItem[0].nodeName.toLowerCase(),\n                element = $(\"<\" + nodeName + \">\", that.document[0]);\n\n            that._addClass(element, \"ui-sortable-placeholder\", className || that.currentItem[0].className)._removeClass(element, \"ui-sortable-helper\");\n\n            if (nodeName === \"tbody\") {\n              that._createTrPlaceholder(that.currentItem.find(\"tr\").eq(0), $(\"<tr>\", that.document[0]).appendTo(element));\n            } else if (nodeName === \"tr\") {\n              that._createTrPlaceholder(that.currentItem, element);\n            } else if (nodeName === \"img\") {\n              element.attr(\"src\", that.currentItem.attr(\"src\"));\n            }\n\n            if (!className) {\n              element.css(\"visibility\", \"hidden\");\n            }\n\n            return element;\n          },\n          update: function update(container, p) {\n            // 1. If a className is set as 'placeholder option, we don't force sizes -\n            // the class is responsible for that\n            // 2. The option 'forcePlaceholderSize can be enabled to force it even if a\n            // class name is specified\n            if (className && !o.forcePlaceholderSize) {\n              return;\n            } //If the element doesn't have a actual height by itself (without styles coming\n            // from a stylesheet), it receives the inline height from the dragged item\n\n\n            if (!p.height()) {\n              p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css(\"paddingTop\") || 0, 10) - parseInt(that.currentItem.css(\"paddingBottom\") || 0, 10));\n            }\n\n            if (!p.width()) {\n              p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css(\"paddingLeft\") || 0, 10) - parseInt(that.currentItem.css(\"paddingRight\") || 0, 10));\n            }\n          }\n        };\n      } //Create the placeholder\n\n\n      that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem)); //Append it after the actual current item\n\n      that.currentItem.after(that.placeholder); //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)\n\n      o.placeholder.update(that, that.placeholder);\n    },\n    _createTrPlaceholder: function _createTrPlaceholder(sourceTr, targetTr) {\n      var that = this;\n      sourceTr.children().each(function () {\n        $(\"<td>&#160;</td>\", that.document[0]).attr(\"colspan\", $(this).attr(\"colspan\") || 1).appendTo(targetTr);\n      });\n    },\n    _contactContainers: function _contactContainers(event) {\n      var i,\n          j,\n          dist,\n          itemWithLeastDistance,\n          posProperty,\n          sizeProperty,\n          cur,\n          nearBottom,\n          floating,\n          axis,\n          innermostContainer = null,\n          innermostIndex = null; // Get innermost container that intersects with item\n\n      for (i = this.containers.length - 1; i >= 0; i--) {\n        // Never consider a container that's located within the item itself\n        if ($.contains(this.currentItem[0], this.containers[i].element[0])) {\n          continue;\n        }\n\n        if (this._intersectsWith(this.containers[i].containerCache)) {\n          // If we've already found a container and it's more \"inner\" than this, then continue\n          if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {\n            continue;\n          }\n\n          innermostContainer = this.containers[i];\n          innermostIndex = i;\n        } else {\n          // container doesn't intersect. trigger \"out\" event if necessary\n          if (this.containers[i].containerCache.over) {\n            this.containers[i]._trigger(\"out\", event, this._uiHash(this));\n\n            this.containers[i].containerCache.over = 0;\n          }\n        }\n      } // If no intersecting containers found, return\n\n\n      if (!innermostContainer) {\n        return;\n      } // Move the item into the container if it's not there already\n\n\n      if (this.containers.length === 1) {\n        if (!this.containers[innermostIndex].containerCache.over) {\n          this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\n          this.containers[innermostIndex].containerCache.over = 1;\n        }\n      } else {\n        // When entering a new container, we will find the item with the least distance and\n        // append our item near it\n        dist = 10000;\n        itemWithLeastDistance = null;\n        floating = innermostContainer.floating || this._isFloating(this.currentItem);\n        posProperty = floating ? \"left\" : \"top\";\n        sizeProperty = floating ? \"width\" : \"height\";\n        axis = floating ? \"pageX\" : \"pageY\";\n\n        for (j = this.items.length - 1; j >= 0; j--) {\n          if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {\n            continue;\n          }\n\n          if (this.items[j].item[0] === this.currentItem[0]) {\n            continue;\n          }\n\n          cur = this.items[j].item.offset()[posProperty];\n          nearBottom = false;\n\n          if (event[axis] - cur > this.items[j][sizeProperty] / 2) {\n            nearBottom = true;\n          }\n\n          if (Math.abs(event[axis] - cur) < dist) {\n            dist = Math.abs(event[axis] - cur);\n            itemWithLeastDistance = this.items[j];\n            this.direction = nearBottom ? \"up\" : \"down\";\n          }\n        } //Check if dropOnEmpty is enabled\n\n\n        if (!itemWithLeastDistance && !this.options.dropOnEmpty) {\n          return;\n        }\n\n        if (this.currentContainer === this.containers[innermostIndex]) {\n          if (!this.currentContainer.containerCache.over) {\n            this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash());\n\n            this.currentContainer.containerCache.over = 1;\n          }\n\n          return;\n        }\n\n        itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);\n\n        this._trigger(\"change\", event, this._uiHash());\n\n        this.containers[innermostIndex]._trigger(\"change\", event, this._uiHash(this));\n\n        this.currentContainer = this.containers[innermostIndex]; //Update the placeholder\n\n        this.options.placeholder.update(this.currentContainer, this.placeholder);\n\n        this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n\n        this.containers[innermostIndex].containerCache.over = 1;\n      }\n    },\n    _createHelper: function _createHelper(event) {\n      var o = this.options,\n          helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : o.helper === \"clone\" ? this.currentItem.clone() : this.currentItem; //Add the helper to the DOM if that didn't happen already\n\n      if (!helper.parents(\"body\").length) {\n        $(o.appendTo !== \"parent\" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);\n      }\n\n      if (helper[0] === this.currentItem[0]) {\n        this._storedCSS = {\n          width: this.currentItem[0].style.width,\n          height: this.currentItem[0].style.height,\n          position: this.currentItem.css(\"position\"),\n          top: this.currentItem.css(\"top\"),\n          left: this.currentItem.css(\"left\")\n        };\n      }\n\n      if (!helper[0].style.width || o.forceHelperSize) {\n        helper.width(this.currentItem.width());\n      }\n\n      if (!helper[0].style.height || o.forceHelperSize) {\n        helper.height(this.currentItem.height());\n      }\n\n      return helper;\n    },\n    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {\n      if (typeof obj === \"string\") {\n        obj = obj.split(\" \");\n      }\n\n      if ($.isArray(obj)) {\n        obj = {\n          left: +obj[0],\n          top: +obj[1] || 0\n        };\n      }\n\n      if (\"left\" in obj) {\n        this.offset.click.left = obj.left + this.margins.left;\n      }\n\n      if (\"right\" in obj) {\n        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n      }\n\n      if (\"top\" in obj) {\n        this.offset.click.top = obj.top + this.margins.top;\n      }\n\n      if (\"bottom\" in obj) {\n        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n      }\n    },\n    _getParentOffset: function _getParentOffset() {\n      //Get the offsetParent and cache its position\n      this.offsetParent = this.helper.offsetParent();\n      var po = this.offsetParent.offset(); // This is a special case where we need to modify a offset calculated on start, since the\n      // following happened:\n      // 1. The position of the helper is absolute, so it's position is calculated based on the\n      // next positioned parent\n      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n      // the document, which means that the scroll is included in the initial calculation of the\n      // offset of the parent, and never recalculated upon drag\n\n      if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n        po.left += this.scrollParent.scrollLeft();\n        po.top += this.scrollParent.scrollTop();\n      } // This needs to be actually done for all browsers, since pageX/pageY includes this\n      // information with an ugly IE fix\n\n\n      if (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === \"html\" && $.ui.ie) {\n        po = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      return {\n        top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n        left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function _getRelativeOffset() {\n      if (this.cssPosition === \"relative\") {\n        var p = this.currentItem.position();\n        return {\n          top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\n          left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\n        };\n      } else {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n    },\n    _cacheMargins: function _cacheMargins() {\n      this.margins = {\n        left: parseInt(this.currentItem.css(\"marginLeft\"), 10) || 0,\n        top: parseInt(this.currentItem.css(\"marginTop\"), 10) || 0\n      };\n    },\n    _cacheHelperProportions: function _cacheHelperProportions() {\n      this.helperProportions = {\n        width: this.helper.outerWidth(),\n        height: this.helper.outerHeight()\n      };\n    },\n    _setContainment: function _setContainment() {\n      var ce,\n          co,\n          over,\n          o = this.options;\n\n      if (o.containment === \"parent\") {\n        o.containment = this.helper[0].parentNode;\n      }\n\n      if (o.containment === \"document\" || o.containment === \"window\") {\n        this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, o.containment === \"document\" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (o.containment === \"document\" ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];\n      }\n\n      if (!/^(document|window|parent)$/.test(o.containment)) {\n        ce = $(o.containment)[0];\n        co = $(o.containment).offset();\n        over = $(ce).css(\"overflow\") !== \"hidden\";\n        this.containment = [co.left + (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingLeft\"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingTop\"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top];\n      }\n    },\n    _convertPositionTo: function _convertPositionTo(d, pos) {\n      if (!pos) {\n        pos = this.position;\n      }\n\n      var mod = d === \"absolute\" ? 1 : -1,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);\n      return {\n        top: // The absolute mouse position\n        pos.top + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.top * mod + // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.top * mod - (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,\n        left: // The absolute mouse position\n        pos.left + // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.left * mod + // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.left * mod - (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod\n      };\n    },\n    _generatePosition: function _generatePosition(event) {\n      var top,\n          left,\n          o = this.options,\n          pageX = event.pageX,\n          pageY = event.pageY,\n          scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n          scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName); // This is another very weird special case that only happens for relative elements:\n      // 1. If the css position is relative\n      // 2. and the scroll parent is the document or similar to the offset parent\n      // we have to refresh the relative offset during the scroll so there are no jumps\n\n      if (this.cssPosition === \"relative\" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {\n        this.offset.relative = this._getRelativeOffset();\n      }\n      /*\r\n       * - Position constraining -\r\n       * Constrain the position to a mix of grid, containment.\r\n       */\n\n\n      if (this.originalPosition) {\n        //If we are not dragging yet, we won't check for options\n        if (this.containment) {\n          if (event.pageX - this.offset.click.left < this.containment[0]) {\n            pageX = this.containment[0] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top < this.containment[1]) {\n            pageY = this.containment[1] + this.offset.click.top;\n          }\n\n          if (event.pageX - this.offset.click.left > this.containment[2]) {\n            pageX = this.containment[2] + this.offset.click.left;\n          }\n\n          if (event.pageY - this.offset.click.top > this.containment[3]) {\n            pageY = this.containment[3] + this.offset.click.top;\n          }\n        }\n\n        if (o.grid) {\n          top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];\n          pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;\n          left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];\n          pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;\n        }\n      }\n\n      return {\n        top: // The absolute mouse position\n        pageY - // Click offset (relative to the element)\n        this.offset.click.top - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.top - // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.top + (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),\n        left: // The absolute mouse position\n        pageX - // Click offset (relative to the element)\n        this.offset.click.left - // Only for relative positioned nodes: Relative offset from element to offset parent\n        this.offset.relative.left - // The offsetParent's offset without borders (offset + border)\n        this.offset.parent.left + (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())\n      };\n    },\n    _rearrange: function _rearrange(event, i, a, hardRefresh) {\n      a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === \"down\" ? i.item[0] : i.item[0].nextSibling); //Various things done here to improve the performance:\n      // 1. we create a setTimeout, that calls refreshPositions\n      // 2. on the instance, we have a counter variable, that get's higher after every append\n      // 3. on the local scope, we copy the counter variable, and check in the timeout,\n      // if it's still the same\n      // 4. this lets only the last addition to the timeout stack through\n\n      this.counter = this.counter ? ++this.counter : 1;\n      var counter = this.counter;\n\n      this._delay(function () {\n        if (counter === this.counter) {\n          //Precompute after each DOM insertion, NOT on mousemove\n          this.refreshPositions(!hardRefresh);\n        }\n      });\n    },\n    _clear: function _clear(event, noPropagation) {\n      this.reverting = false; // We delay all events that have to be triggered to after the point where the placeholder\n      // has been removed and everything else normalized again\n\n      var i,\n          delayedTriggers = []; // We first have to update the dom position of the actual currentItem\n      // Note: don't do it if the current item is already removed (by a user), or it gets\n      // reappended (see #4088)\n\n      if (!this._noFinalSort && this.currentItem.parent().length) {\n        this.placeholder.before(this.currentItem);\n      }\n\n      this._noFinalSort = null;\n\n      if (this.helper[0] === this.currentItem[0]) {\n        for (i in this._storedCSS) {\n          if (this._storedCSS[i] === \"auto\" || this._storedCSS[i] === \"static\") {\n            this._storedCSS[i] = \"\";\n          }\n        }\n\n        this.currentItem.css(this._storedCSS);\n\n        this._removeClass(this.currentItem, \"ui-sortable-helper\");\n      } else {\n        this.currentItem.show();\n      }\n\n      if (this.fromOutside && !noPropagation) {\n        delayedTriggers.push(function (event) {\n          this._trigger(\"receive\", event, this._uiHash(this.fromOutside));\n        });\n      }\n\n      if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(\".ui-sortable-helper\")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {\n        // Trigger update callback if the DOM position has changed\n        delayedTriggers.push(function (event) {\n          this._trigger(\"update\", event, this._uiHash());\n        });\n      } // Check if the items Container has Changed and trigger appropriate\n      // events.\n\n\n      if (this !== this.currentContainer) {\n        if (!noPropagation) {\n          delayedTriggers.push(function (event) {\n            this._trigger(\"remove\", event, this._uiHash());\n          });\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"receive\", event, this._uiHash(this));\n            };\n          }.call(this, this.currentContainer));\n          delayedTriggers.push(function (c) {\n            return function (event) {\n              c._trigger(\"update\", event, this._uiHash(this));\n            };\n          }.call(this, this.currentContainer));\n        }\n      } //Post events to containers\n\n\n      function delayEvent(type, instance, container) {\n        return function (event) {\n          container._trigger(type, event, instance._uiHash(instance));\n        };\n      }\n\n      for (i = this.containers.length - 1; i >= 0; i--) {\n        if (!noPropagation) {\n          delayedTriggers.push(delayEvent(\"deactivate\", this, this.containers[i]));\n        }\n\n        if (this.containers[i].containerCache.over) {\n          delayedTriggers.push(delayEvent(\"out\", this, this.containers[i]));\n          this.containers[i].containerCache.over = 0;\n        }\n      } //Do what was originally in plugins\n\n\n      if (this.storedCursor) {\n        this.document.find(\"body\").css(\"cursor\", this.storedCursor);\n        this.storedStylesheet.remove();\n      }\n\n      if (this._storedOpacity) {\n        this.helper.css(\"opacity\", this._storedOpacity);\n      }\n\n      if (this._storedZIndex) {\n        this.helper.css(\"zIndex\", this._storedZIndex === \"auto\" ? \"\" : this._storedZIndex);\n      }\n\n      this.dragging = false;\n\n      if (!noPropagation) {\n        this._trigger(\"beforeStop\", event, this._uiHash());\n      } //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,\n      // it unbinds ALL events from the original node!\n\n\n      this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\n\n      if (!this.cancelHelperRemoval) {\n        if (this.helper[0] !== this.currentItem[0]) {\n          this.helper.remove();\n        }\n\n        this.helper = null;\n      }\n\n      if (!noPropagation) {\n        for (i = 0; i < delayedTriggers.length; i++) {\n          // Trigger all delayed events\n          delayedTriggers[i].call(this, event);\n        }\n\n        this._trigger(\"stop\", event, this._uiHash());\n      }\n\n      this.fromOutside = false;\n      return !this.cancelHelperRemoval;\n    },\n    _trigger: function _trigger() {\n      if ($.Widget.prototype._trigger.apply(this, arguments) === false) {\n        this.cancel();\n      }\n    },\n    _uiHash: function _uiHash(_inst) {\n      var inst = _inst || this;\n      return {\n        helper: inst.helper,\n        placeholder: inst.placeholder || $([]),\n        position: inst.position,\n        originalPosition: inst.originalPosition,\n        offset: inst.positionAbs,\n        item: inst.currentItem,\n        sender: _inst ? _inst.element : null\n      };\n    }\n  });\n  /*!\r\n   * jQuery UI Accordion 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Accordion\n  //>>group: Widgets\n  // jscs:disable maximumLineLength\n  //>>description: Displays collapsible content panels for presenting information in a limited amount of space.\n  // jscs:enable maximumLineLength\n  //>>docs: http://api.jqueryui.com/accordion/\n  //>>demos: http://jqueryui.com/accordion/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/accordion.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  var widgetsAccordion = $.widget(\"ui.accordion\", {\n    version: \"1.12.1\",\n    options: {\n      active: 0,\n      animate: {},\n      classes: {\n        \"ui-accordion-header\": \"ui-corner-top\",\n        \"ui-accordion-header-collapsed\": \"ui-corner-all\",\n        \"ui-accordion-content\": \"ui-corner-bottom\"\n      },\n      collapsible: false,\n      event: \"click\",\n      header: \"> li > :first-child, > :not(li):even\",\n      heightStyle: \"auto\",\n      icons: {\n        activeHeader: \"ui-icon-triangle-1-s\",\n        header: \"ui-icon-triangle-1-e\"\n      },\n      // Callbacks\n      activate: null,\n      beforeActivate: null\n    },\n    hideProps: {\n      borderTopWidth: \"hide\",\n      borderBottomWidth: \"hide\",\n      paddingTop: \"hide\",\n      paddingBottom: \"hide\",\n      height: \"hide\"\n    },\n    showProps: {\n      borderTopWidth: \"show\",\n      borderBottomWidth: \"show\",\n      paddingTop: \"show\",\n      paddingBottom: \"show\",\n      height: \"show\"\n    },\n    _create: function _create() {\n      var options = this.options;\n      this.prevShow = this.prevHide = $();\n\n      this._addClass(\"ui-accordion\", \"ui-widget ui-helper-reset\");\n\n      this.element.attr(\"role\", \"tablist\"); // Don't allow collapsible: false and active: false / null\n\n      if (!options.collapsible && (options.active === false || options.active == null)) {\n        options.active = 0;\n      }\n\n      this._processPanels(); // handle negative values\n\n\n      if (options.active < 0) {\n        options.active += this.headers.length;\n      }\n\n      this._refresh();\n    },\n    _getCreateEventData: function _getCreateEventData() {\n      return {\n        header: this.active,\n        panel: !this.active.length ? $() : this.active.next()\n      };\n    },\n    _createIcons: function _createIcons() {\n      var icon,\n          children,\n          icons = this.options.icons;\n\n      if (icons) {\n        icon = $(\"<span>\");\n\n        this._addClass(icon, \"ui-accordion-header-icon\", \"ui-icon \" + icons.header);\n\n        icon.prependTo(this.headers);\n        children = this.active.children(\".ui-accordion-header-icon\");\n\n        this._removeClass(children, icons.header)._addClass(children, null, icons.activeHeader)._addClass(this.headers, \"ui-accordion-icons\");\n      }\n    },\n    _destroyIcons: function _destroyIcons() {\n      this._removeClass(this.headers, \"ui-accordion-icons\");\n\n      this.headers.children(\".ui-accordion-header-icon\").remove();\n    },\n    _destroy: function _destroy() {\n      var contents; // Clean up main element\n\n      this.element.removeAttr(\"role\"); // Clean up headers\n\n      this.headers.removeAttr(\"role aria-expanded aria-selected aria-controls tabIndex\").removeUniqueId();\n\n      this._destroyIcons(); // Clean up content panels\n\n\n      contents = this.headers.next().css(\"display\", \"\").removeAttr(\"role aria-hidden aria-labelledby\").removeUniqueId();\n\n      if (this.options.heightStyle !== \"content\") {\n        contents.css(\"height\", \"\");\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"active\") {\n        // _activate() will handle invalid values and update this.options\n        this._activate(value);\n\n        return;\n      }\n\n      if (key === \"event\") {\n        if (this.options.event) {\n          this._off(this.headers, this.options.event);\n        }\n\n        this._setupEvents(value);\n      }\n\n      this._super(key, value); // Setting collapsible: false while collapsed; open first panel\n\n\n      if (key === \"collapsible\" && !value && this.options.active === false) {\n        this._activate(0);\n      }\n\n      if (key === \"icons\") {\n        this._destroyIcons();\n\n        if (value) {\n          this._createIcons();\n        }\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this.element.attr(\"aria-disabled\", value); // Support: IE8 Only\n      // #5332 / #6059 - opacity doesn't cascade to positioned elements in IE\n      // so we need to add the disabled class to the headers and panels\n\n      this._toggleClass(null, \"ui-state-disabled\", !!value);\n\n      this._toggleClass(this.headers.add(this.headers.next()), null, \"ui-state-disabled\", !!value);\n    },\n    _keydown: function _keydown(event) {\n      if (event.altKey || event.ctrlKey) {\n        return;\n      }\n\n      var keyCode = $.ui.keyCode,\n          length = this.headers.length,\n          currentIndex = this.headers.index(event.target),\n          toFocus = false;\n\n      switch (event.keyCode) {\n        case keyCode.RIGHT:\n        case keyCode.DOWN:\n          toFocus = this.headers[(currentIndex + 1) % length];\n          break;\n\n        case keyCode.LEFT:\n        case keyCode.UP:\n          toFocus = this.headers[(currentIndex - 1 + length) % length];\n          break;\n\n        case keyCode.SPACE:\n        case keyCode.ENTER:\n          this._eventHandler(event);\n\n          break;\n\n        case keyCode.HOME:\n          toFocus = this.headers[0];\n          break;\n\n        case keyCode.END:\n          toFocus = this.headers[length - 1];\n          break;\n      }\n\n      if (toFocus) {\n        $(event.target).attr(\"tabIndex\", -1);\n        $(toFocus).attr(\"tabIndex\", 0);\n        $(toFocus).trigger(\"focus\");\n        event.preventDefault();\n      }\n    },\n    _panelKeyDown: function _panelKeyDown(event) {\n      if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {\n        $(event.currentTarget).prev().trigger(\"focus\");\n      }\n    },\n    refresh: function refresh() {\n      var options = this.options;\n\n      this._processPanels(); // Was collapsed or no panel\n\n\n      if (options.active === false && options.collapsible === true || !this.headers.length) {\n        options.active = false;\n        this.active = $(); // active false only when collapsible is true\n      } else if (options.active === false) {\n        this._activate(0); // was active, but active panel is gone\n\n      } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {\n        // all remaining panel are disabled\n        if (this.headers.length === this.headers.find(\".ui-state-disabled\").length) {\n          options.active = false;\n          this.active = $(); // activate previous panel\n        } else {\n          this._activate(Math.max(0, options.active - 1));\n        } // was active, active panel still exists\n\n      } else {\n        // make sure active index is correct\n        options.active = this.headers.index(this.active);\n      }\n\n      this._destroyIcons();\n\n      this._refresh();\n    },\n    _processPanels: function _processPanels() {\n      var prevHeaders = this.headers,\n          prevPanels = this.panels;\n      this.headers = this.element.find(this.options.header);\n\n      this._addClass(this.headers, \"ui-accordion-header ui-accordion-header-collapsed\", \"ui-state-default\");\n\n      this.panels = this.headers.next().filter(\":not(.ui-accordion-content-active)\").hide();\n\n      this._addClass(this.panels, \"ui-accordion-content\", \"ui-helper-reset ui-widget-content\"); // Avoid memory leaks (#10056)\n\n\n      if (prevPanels) {\n        this._off(prevHeaders.not(this.headers));\n\n        this._off(prevPanels.not(this.panels));\n      }\n    },\n    _refresh: function _refresh() {\n      var maxHeight,\n          options = this.options,\n          heightStyle = options.heightStyle,\n          parent = this.element.parent();\n      this.active = this._findActive(options.active);\n\n      this._addClass(this.active, \"ui-accordion-header-active\", \"ui-state-active\")._removeClass(this.active, \"ui-accordion-header-collapsed\");\n\n      this._addClass(this.active.next(), \"ui-accordion-content-active\");\n\n      this.active.next().show();\n      this.headers.attr(\"role\", \"tab\").each(function () {\n        var header = $(this),\n            headerId = header.uniqueId().attr(\"id\"),\n            panel = header.next(),\n            panelId = panel.uniqueId().attr(\"id\");\n        header.attr(\"aria-controls\", panelId);\n        panel.attr(\"aria-labelledby\", headerId);\n      }).next().attr(\"role\", \"tabpanel\");\n      this.headers.not(this.active).attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\",\n        tabIndex: -1\n      }).next().attr({\n        \"aria-hidden\": \"true\"\n      }).hide(); // Make sure at least one header is in the tab order\n\n      if (!this.active.length) {\n        this.headers.eq(0).attr(\"tabIndex\", 0);\n      } else {\n        this.active.attr({\n          \"aria-selected\": \"true\",\n          \"aria-expanded\": \"true\",\n          tabIndex: 0\n        }).next().attr({\n          \"aria-hidden\": \"false\"\n        });\n      }\n\n      this._createIcons();\n\n      this._setupEvents(options.event);\n\n      if (heightStyle === \"fill\") {\n        maxHeight = parent.height();\n        this.element.siblings(\":visible\").each(function () {\n          var elem = $(this),\n              position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"fixed\") {\n            return;\n          }\n\n          maxHeight -= elem.outerHeight(true);\n        });\n        this.headers.each(function () {\n          maxHeight -= $(this).outerHeight(true);\n        });\n        this.headers.next().each(function () {\n          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n        }).css(\"overflow\", \"auto\");\n      } else if (heightStyle === \"auto\") {\n        maxHeight = 0;\n        this.headers.next().each(function () {\n          var isVisible = $(this).is(\":visible\");\n\n          if (!isVisible) {\n            $(this).show();\n          }\n\n          maxHeight = Math.max(maxHeight, $(this).css(\"height\", \"\").height());\n\n          if (!isVisible) {\n            $(this).hide();\n          }\n        }).height(maxHeight);\n      }\n    },\n    _activate: function _activate(index) {\n      var active = this._findActive(index)[0]; // Trying to activate the already active panel\n\n\n      if (active === this.active[0]) {\n        return;\n      } // Trying to collapse, simulate a click on the currently active header\n\n\n      active = active || this.active[0];\n\n      this._eventHandler({\n        target: active,\n        currentTarget: active,\n        preventDefault: $.noop\n      });\n    },\n    _findActive: function _findActive(selector) {\n      return typeof selector === \"number\" ? this.headers.eq(selector) : $();\n    },\n    _setupEvents: function _setupEvents(event) {\n      var events = {\n        keydown: \"_keydown\"\n      };\n\n      if (event) {\n        $.each(event.split(\" \"), function (index, eventName) {\n          events[eventName] = \"_eventHandler\";\n        });\n      }\n\n      this._off(this.headers.add(this.headers.next()));\n\n      this._on(this.headers, events);\n\n      this._on(this.headers.next(), {\n        keydown: \"_panelKeyDown\"\n      });\n\n      this._hoverable(this.headers);\n\n      this._focusable(this.headers);\n    },\n    _eventHandler: function _eventHandler(event) {\n      var activeChildren,\n          clickedChildren,\n          options = this.options,\n          active = this.active,\n          clicked = $(event.currentTarget),\n          clickedIsActive = clicked[0] === active[0],\n          collapsing = clickedIsActive && options.collapsible,\n          toShow = collapsing ? $() : clicked.next(),\n          toHide = active.next(),\n          eventData = {\n        oldHeader: active,\n        oldPanel: toHide,\n        newHeader: collapsing ? $() : clicked,\n        newPanel: toShow\n      };\n      event.preventDefault();\n\n      if ( // click on active header, but not collapsible\n      clickedIsActive && !options.collapsible || // allow canceling activation\n      this._trigger(\"beforeActivate\", event, eventData) === false) {\n        return;\n      }\n\n      options.active = collapsing ? false : this.headers.index(clicked); // When the call to ._toggle() comes after the class changes\n      // it causes a very odd bug in IE 8 (see #6720)\n\n      this.active = clickedIsActive ? $() : clicked;\n\n      this._toggle(eventData); // Switch classes\n      // corner classes on the previously active header stay after the animation\n\n\n      this._removeClass(active, \"ui-accordion-header-active\", \"ui-state-active\");\n\n      if (options.icons) {\n        activeChildren = active.children(\".ui-accordion-header-icon\");\n\n        this._removeClass(activeChildren, null, options.icons.activeHeader)._addClass(activeChildren, null, options.icons.header);\n      }\n\n      if (!clickedIsActive) {\n        this._removeClass(clicked, \"ui-accordion-header-collapsed\")._addClass(clicked, \"ui-accordion-header-active\", \"ui-state-active\");\n\n        if (options.icons) {\n          clickedChildren = clicked.children(\".ui-accordion-header-icon\");\n\n          this._removeClass(clickedChildren, null, options.icons.header)._addClass(clickedChildren, null, options.icons.activeHeader);\n        }\n\n        this._addClass(clicked.next(), \"ui-accordion-content-active\");\n      }\n    },\n    _toggle: function _toggle(data) {\n      var toShow = data.newPanel,\n          toHide = this.prevShow.length ? this.prevShow : data.oldPanel; // Handle activating a panel during the animation for another activation\n\n      this.prevShow.add(this.prevHide).stop(true, true);\n      this.prevShow = toShow;\n      this.prevHide = toHide;\n\n      if (this.options.animate) {\n        this._animate(toShow, toHide, data);\n      } else {\n        toHide.hide();\n        toShow.show();\n\n        this._toggleComplete(data);\n      }\n\n      toHide.attr({\n        \"aria-hidden\": \"true\"\n      });\n      toHide.prev().attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\"\n      }); // if we're switching panels, remove the old header from the tab order\n      // if we're opening from collapsed state, remove the previous header from the tab order\n      // if we're collapsing, then keep the collapsing header in the tab order\n\n      if (toShow.length && toHide.length) {\n        toHide.prev().attr({\n          \"tabIndex\": -1,\n          \"aria-expanded\": \"false\"\n        });\n      } else if (toShow.length) {\n        this.headers.filter(function () {\n          return parseInt($(this).attr(\"tabIndex\"), 10) === 0;\n        }).attr(\"tabIndex\", -1);\n      }\n\n      toShow.attr(\"aria-hidden\", \"false\").prev().attr({\n        \"aria-selected\": \"true\",\n        \"aria-expanded\": \"true\",\n        tabIndex: 0\n      });\n    },\n    _animate: function _animate(toShow, toHide, data) {\n      var total,\n          easing,\n          duration,\n          that = this,\n          adjust = 0,\n          boxSizing = toShow.css(\"box-sizing\"),\n          down = toShow.length && (!toHide.length || toShow.index() < toHide.index()),\n          animate = this.options.animate || {},\n          options = down && animate.down || animate,\n          complete = function complete() {\n        that._toggleComplete(data);\n      };\n\n      if (typeof options === \"number\") {\n        duration = options;\n      }\n\n      if (typeof options === \"string\") {\n        easing = options;\n      } // fall back from options to animation in case of partial down settings\n\n\n      easing = easing || options.easing || animate.easing;\n      duration = duration || options.duration || animate.duration;\n\n      if (!toHide.length) {\n        return toShow.animate(this.showProps, duration, easing, complete);\n      }\n\n      if (!toShow.length) {\n        return toHide.animate(this.hideProps, duration, easing, complete);\n      }\n\n      total = toShow.show().outerHeight();\n      toHide.animate(this.hideProps, {\n        duration: duration,\n        easing: easing,\n        step: function step(now, fx) {\n          fx.now = Math.round(now);\n        }\n      });\n      toShow.hide().animate(this.showProps, {\n        duration: duration,\n        easing: easing,\n        complete: complete,\n        step: function step(now, fx) {\n          fx.now = Math.round(now);\n\n          if (fx.prop !== \"height\") {\n            if (boxSizing === \"content-box\") {\n              adjust += fx.now;\n            }\n          } else if (that.options.heightStyle !== \"content\") {\n            fx.now = Math.round(total - toHide.outerHeight() - adjust);\n            adjust = 0;\n          }\n        }\n      });\n    },\n    _toggleComplete: function _toggleComplete(data) {\n      var toHide = data.oldPanel,\n          prev = toHide.prev();\n\n      this._removeClass(toHide, \"ui-accordion-content-active\");\n\n      this._removeClass(prev, \"ui-accordion-header-active\")._addClass(prev, \"ui-accordion-header-collapsed\"); // Work around for rendering bug in IE (#5421)\n\n\n      if (toHide.length) {\n        toHide.parent()[0].className = toHide.parent()[0].className;\n      }\n\n      this._trigger(\"activate\", null, data);\n    }\n  });\n  /*!\r\n   * jQuery UI Menu 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Menu\n  //>>group: Widgets\n  //>>description: Creates nestable menus.\n  //>>docs: http://api.jqueryui.com/menu/\n  //>>demos: http://jqueryui.com/menu/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/menu.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  var widgetsMenu = $.widget(\"ui.menu\", {\n    version: \"1.12.1\",\n    defaultElement: \"<ul>\",\n    delay: 300,\n    options: {\n      icons: {\n        submenu: \"ui-icon-caret-1-e\"\n      },\n      items: \"> *\",\n      menus: \"ul\",\n      position: {\n        my: \"left top\",\n        at: \"right top\"\n      },\n      role: \"menu\",\n      // Callbacks\n      blur: null,\n      focus: null,\n      select: null\n    },\n    _create: function _create() {\n      this.activeMenu = this.element; // Flag used to prevent firing of the click handler\n      // as the event bubbles up through nested menus\n\n      this.mouseHandled = false;\n      this.element.uniqueId().attr({\n        role: this.options.role,\n        tabIndex: 0\n      });\n\n      this._addClass(\"ui-menu\", \"ui-widget ui-widget-content\");\n\n      this._on({\n        // Prevent focus from sticking to links inside menu after clicking\n        // them (focus should always stay on UL during navigation).\n        \"mousedown .ui-menu-item\": function mousedownUiMenuItem(event) {\n          event.preventDefault();\n        },\n        \"click .ui-menu-item\": function clickUiMenuItem(event) {\n          var target = $(event.target);\n          var active = $($.ui.safeActiveElement(this.document[0]));\n\n          if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\n            this.select(event); // Only set the mouseHandled flag if the event will bubble, see #9469.\n\n            if (!event.isPropagationStopped()) {\n              this.mouseHandled = true;\n            } // Open submenu on click\n\n\n            if (target.has(\".ui-menu\").length) {\n              this.expand(event);\n            } else if (!this.element.is(\":focus\") && active.closest(\".ui-menu\").length) {\n              // Redirect focus to the menu\n              this.element.trigger(\"focus\", [true]); // If the active item is on the top level, let it stay active.\n              // Otherwise, blur the active item since it is no longer visible.\n\n              if (this.active && this.active.parents(\".ui-menu\").length === 1) {\n                clearTimeout(this.timer);\n              }\n            }\n          }\n        },\n        \"mouseenter .ui-menu-item\": function mouseenterUiMenuItem(event) {\n          // Ignore mouse events while typeahead is active, see #10458.\n          // Prevents focusing the wrong item when typeahead causes a scroll while the mouse\n          // is over an item in the menu\n          if (this.previousFilter) {\n            return;\n          }\n\n          var actualTarget = $(event.target).closest(\".ui-menu-item\"),\n              target = $(event.currentTarget); // Ignore bubbled events on parent items, see #11641\n\n          if (actualTarget[0] !== target[0]) {\n            return;\n          } // Remove ui-state-active class from siblings of the newly focused menu item\n          // to avoid a jump caused by adjacent elements both having a class with a border\n\n\n          this._removeClass(target.siblings().children(\".ui-state-active\"), null, \"ui-state-active\");\n\n          this.focus(event, target);\n        },\n        mouseleave: \"collapseAll\",\n        \"mouseleave .ui-menu\": \"collapseAll\",\n        focus: function focus(event, keepActiveItem) {\n          // If there's already an active item, keep it active\n          // If not, activate the first item\n          var item = this.active || this.element.find(this.options.items).eq(0);\n\n          if (!keepActiveItem) {\n            this.focus(event, item);\n          }\n        },\n        blur: function blur(event) {\n          this._delay(function () {\n            var notContained = !$.contains(this.element[0], $.ui.safeActiveElement(this.document[0]));\n\n            if (notContained) {\n              this.collapseAll(event);\n            }\n          });\n        },\n        keydown: \"_keydown\"\n      });\n\n      this.refresh(); // Clicks outside of a menu collapse any open menus\n\n      this._on(this.document, {\n        click: function click(event) {\n          if (this._closeOnDocumentClick(event)) {\n            this.collapseAll(event);\n          } // Reset the mouseHandled flag\n\n\n          this.mouseHandled = false;\n        }\n      });\n    },\n    _destroy: function _destroy() {\n      var items = this.element.find(\".ui-menu-item\").removeAttr(\"role aria-disabled\"),\n          submenus = items.children(\".ui-menu-item-wrapper\").removeUniqueId().removeAttr(\"tabIndex role aria-haspopup\"); // Destroy (sub)menus\n\n      this.element.removeAttr(\"aria-activedescendant\").find(\".ui-menu\").addBack().removeAttr(\"role aria-labelledby aria-expanded aria-hidden aria-disabled \" + \"tabIndex\").removeUniqueId().show();\n      submenus.children().each(function () {\n        var elem = $(this);\n\n        if (elem.data(\"ui-menu-submenu-caret\")) {\n          elem.remove();\n        }\n      });\n    },\n    _keydown: function _keydown(event) {\n      var match,\n          prev,\n          character,\n          skip,\n          preventDefault = true;\n\n      switch (event.keyCode) {\n        case $.ui.keyCode.PAGE_UP:\n          this.previousPage(event);\n          break;\n\n        case $.ui.keyCode.PAGE_DOWN:\n          this.nextPage(event);\n          break;\n\n        case $.ui.keyCode.HOME:\n          this._move(\"first\", \"first\", event);\n\n          break;\n\n        case $.ui.keyCode.END:\n          this._move(\"last\", \"last\", event);\n\n          break;\n\n        case $.ui.keyCode.UP:\n          this.previous(event);\n          break;\n\n        case $.ui.keyCode.DOWN:\n          this.next(event);\n          break;\n\n        case $.ui.keyCode.LEFT:\n          this.collapse(event);\n          break;\n\n        case $.ui.keyCode.RIGHT:\n          if (this.active && !this.active.is(\".ui-state-disabled\")) {\n            this.expand(event);\n          }\n\n          break;\n\n        case $.ui.keyCode.ENTER:\n        case $.ui.keyCode.SPACE:\n          this._activate(event);\n\n          break;\n\n        case $.ui.keyCode.ESCAPE:\n          this.collapse(event);\n          break;\n\n        default:\n          preventDefault = false;\n          prev = this.previousFilter || \"\";\n          skip = false; // Support number pad values\n\n          character = event.keyCode >= 96 && event.keyCode <= 105 ? (event.keyCode - 96).toString() : String.fromCharCode(event.keyCode);\n          clearTimeout(this.filterTimer);\n\n          if (character === prev) {\n            skip = true;\n          } else {\n            character = prev + character;\n          }\n\n          match = this._filterMenuItems(character);\n          match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(\".ui-menu-item\") : match; // If no matches on the current filter, reset to the last character pressed\n          // to move down the menu to the first item that starts with that character\n\n          if (!match.length) {\n            character = String.fromCharCode(event.keyCode);\n            match = this._filterMenuItems(character);\n          }\n\n          if (match.length) {\n            this.focus(event, match);\n            this.previousFilter = character;\n            this.filterTimer = this._delay(function () {\n              delete this.previousFilter;\n            }, 1000);\n          } else {\n            delete this.previousFilter;\n          }\n\n      }\n\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    },\n    _activate: function _activate(event) {\n      if (this.active && !this.active.is(\".ui-state-disabled\")) {\n        if (this.active.children(\"[aria-haspopup='true']\").length) {\n          this.expand(event);\n        } else {\n          this.select(event);\n        }\n      }\n    },\n    refresh: function refresh() {\n      var menus,\n          items,\n          newSubmenus,\n          newItems,\n          newWrappers,\n          that = this,\n          icon = this.options.icons.submenu,\n          submenus = this.element.find(this.options.menus);\n\n      this._toggleClass(\"ui-menu-icons\", null, !!this.element.find(\".ui-icon\").length); // Initialize nested menus\n\n\n      newSubmenus = submenus.filter(\":not(.ui-menu)\").hide().attr({\n        role: this.options.role,\n        \"aria-hidden\": \"true\",\n        \"aria-expanded\": \"false\"\n      }).each(function () {\n        var menu = $(this),\n            item = menu.prev(),\n            submenuCaret = $(\"<span>\").data(\"ui-menu-submenu-caret\", true);\n\n        that._addClass(submenuCaret, \"ui-menu-icon\", \"ui-icon \" + icon);\n\n        item.attr(\"aria-haspopup\", \"true\").prepend(submenuCaret);\n        menu.attr(\"aria-labelledby\", item.attr(\"id\"));\n      });\n\n      this._addClass(newSubmenus, \"ui-menu\", \"ui-widget ui-widget-content ui-front\");\n\n      menus = submenus.add(this.element);\n      items = menus.find(this.options.items); // Initialize menu-items containing spaces and/or dashes only as dividers\n\n      items.not(\".ui-menu-item\").each(function () {\n        var item = $(this);\n\n        if (that._isDivider(item)) {\n          that._addClass(item, \"ui-menu-divider\", \"ui-widget-content\");\n        }\n      }); // Don't refresh list items that are already adapted\n\n      newItems = items.not(\".ui-menu-item, .ui-menu-divider\");\n      newWrappers = newItems.children().not(\".ui-menu\").uniqueId().attr({\n        tabIndex: -1,\n        role: this._itemRole()\n      });\n\n      this._addClass(newItems, \"ui-menu-item\")._addClass(newWrappers, \"ui-menu-item-wrapper\"); // Add aria-disabled attribute to any disabled menu item\n\n\n      items.filter(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\"); // If the active item has been removed, blur the menu\n\n      if (this.active && !$.contains(this.element[0], this.active[0])) {\n        this.blur();\n      }\n    },\n    _itemRole: function _itemRole() {\n      return {\n        menu: \"menuitem\",\n        listbox: \"option\"\n      }[this.options.role];\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icons\") {\n        var icons = this.element.find(\".ui-menu-icon\");\n\n        this._removeClass(icons, null, this.options.icons.submenu)._addClass(icons, null, value.submenu);\n      }\n\n      this._super(key, value);\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this.element.attr(\"aria-disabled\", String(value));\n\n      this._toggleClass(null, \"ui-state-disabled\", !!value);\n    },\n    focus: function focus(event, item) {\n      var nested, focused, activeParent;\n      this.blur(event, event && event.type === \"focus\");\n\n      this._scrollIntoView(item);\n\n      this.active = item.first();\n      focused = this.active.children(\".ui-menu-item-wrapper\");\n\n      this._addClass(focused, null, \"ui-state-active\"); // Only update aria-activedescendant if there's a role\n      // otherwise we assume focus is managed elsewhere\n\n\n      if (this.options.role) {\n        this.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\n      } // Highlight active parent menu item, if any\n\n\n      activeParent = this.active.parent().closest(\".ui-menu-item\").children(\".ui-menu-item-wrapper\");\n\n      this._addClass(activeParent, null, \"ui-state-active\");\n\n      if (event && event.type === \"keydown\") {\n        this._close();\n      } else {\n        this.timer = this._delay(function () {\n          this._close();\n        }, this.delay);\n      }\n\n      nested = item.children(\".ui-menu\");\n\n      if (nested.length && event && /^mouse/.test(event.type)) {\n        this._startOpening(nested);\n      }\n\n      this.activeMenu = item.parent();\n\n      this._trigger(\"focus\", event, {\n        item: item\n      });\n    },\n    _scrollIntoView: function _scrollIntoView(item) {\n      var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n\n      if (this._hasScroll()) {\n        borderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\n        paddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\n        offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n        scroll = this.activeMenu.scrollTop();\n        elementHeight = this.activeMenu.height();\n        itemHeight = item.outerHeight();\n\n        if (offset < 0) {\n          this.activeMenu.scrollTop(scroll + offset);\n        } else if (offset + itemHeight > elementHeight) {\n          this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\n        }\n      }\n    },\n    blur: function blur(event, fromFocus) {\n      if (!fromFocus) {\n        clearTimeout(this.timer);\n      }\n\n      if (!this.active) {\n        return;\n      }\n\n      this._removeClass(this.active.children(\".ui-menu-item-wrapper\"), null, \"ui-state-active\");\n\n      this._trigger(\"blur\", event, {\n        item: this.active\n      });\n\n      this.active = null;\n    },\n    _startOpening: function _startOpening(submenu) {\n      clearTimeout(this.timer); // Don't open if already open fixes a Firefox bug that caused a .5 pixel\n      // shift in the submenu position when mousing over the caret icon\n\n      if (submenu.attr(\"aria-hidden\") !== \"true\") {\n        return;\n      }\n\n      this.timer = this._delay(function () {\n        this._close();\n\n        this._open(submenu);\n      }, this.delay);\n    },\n    _open: function _open(submenu) {\n      var position = $.extend({\n        of: this.active\n      }, this.options.position);\n      clearTimeout(this.timer);\n      this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\")).hide().attr(\"aria-hidden\", \"true\");\n      submenu.show().removeAttr(\"aria-hidden\").attr(\"aria-expanded\", \"true\").position(position);\n    },\n    collapseAll: function collapseAll(event, all) {\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        // If we were passed an event, look for the submenu that contains the event\n        var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(\".ui-menu\")); // If we found no valid submenu ancestor, use the main menu to close all\n        // sub menus anyway\n\n        if (!currentMenu.length) {\n          currentMenu = this.element;\n        }\n\n        this._close(currentMenu);\n\n        this.blur(event); // Work around active item staying active after menu is blurred\n\n        this._removeClass(currentMenu.find(\".ui-state-active\"), null, \"ui-state-active\");\n\n        this.activeMenu = currentMenu;\n      }, this.delay);\n    },\n    // With no arguments, closes the currently active menu - if nothing is active\n    // it closes all menus.  If passed an argument, it will search for menus BELOW\n    _close: function _close(startMenu) {\n      if (!startMenu) {\n        startMenu = this.active ? this.active.parent() : this.element;\n      }\n\n      startMenu.find(\".ui-menu\").hide().attr(\"aria-hidden\", \"true\").attr(\"aria-expanded\", \"false\");\n    },\n    _closeOnDocumentClick: function _closeOnDocumentClick(event) {\n      return !$(event.target).closest(\".ui-menu\").length;\n    },\n    _isDivider: function _isDivider(item) {\n      // Match hyphen, em dash, en dash\n      return !/[^\\-\\u2014\\u2013\\s]/.test(item.text());\n    },\n    collapse: function collapse(event) {\n      var newItem = this.active && this.active.parent().closest(\".ui-menu-item\", this.element);\n\n      if (newItem && newItem.length) {\n        this._close();\n\n        this.focus(event, newItem);\n      }\n    },\n    expand: function expand(event) {\n      var newItem = this.active && this.active.children(\".ui-menu \").find(this.options.items).first();\n\n      if (newItem && newItem.length) {\n        this._open(newItem.parent()); // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n\n\n        this._delay(function () {\n          this.focus(event, newItem);\n        });\n      }\n    },\n    next: function next(event) {\n      this._move(\"next\", \"first\", event);\n    },\n    previous: function previous(event) {\n      this._move(\"prev\", \"last\", event);\n    },\n    isFirstItem: function isFirstItem() {\n      return this.active && !this.active.prevAll(\".ui-menu-item\").length;\n    },\n    isLastItem: function isLastItem() {\n      return this.active && !this.active.nextAll(\".ui-menu-item\").length;\n    },\n    _move: function _move(direction, filter, event) {\n      var next;\n\n      if (this.active) {\n        if (direction === \"first\" || direction === \"last\") {\n          next = this.active[direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\").eq(-1);\n        } else {\n          next = this.active[direction + \"All\"](\".ui-menu-item\").eq(0);\n        }\n      }\n\n      if (!next || !next.length || !this.active) {\n        next = this.activeMenu.find(this.options.items)[filter]();\n      }\n\n      this.focus(event, next);\n    },\n    nextPage: function nextPage(event) {\n      var item, base, height;\n\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n\n      if (this.isLastItem()) {\n        return;\n      }\n\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.height();\n        this.active.nextAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base - height < 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? \"first\" : \"last\"]());\n      }\n    },\n    previousPage: function previousPage(event) {\n      var item, base, height;\n\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n\n      if (this.isFirstItem()) {\n        return;\n      }\n\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.height();\n        this.active.prevAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base + height > 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this.activeMenu.find(this.options.items).first());\n      }\n    },\n    _hasScroll: function _hasScroll() {\n      return this.element.outerHeight() < this.element.prop(\"scrollHeight\");\n    },\n    select: function select(event) {\n      // TODO: It should never be possible to not have an active item at this\n      // point, but the tests don't trigger mouseenter before click.\n      this.active = this.active || $(event.target).closest(\".ui-menu-item\");\n      var ui = {\n        item: this.active\n      };\n\n      if (!this.active.has(\".ui-menu\").length) {\n        this.collapseAll(event, true);\n      }\n\n      this._trigger(\"select\", event, ui);\n    },\n    _filterMenuItems: function _filterMenuItems(character) {\n      var escapedCharacter = character.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\"),\n          regex = new RegExp(\"^\" + escapedCharacter, \"i\");\n      return this.activeMenu.find(this.options.items) // Only match on items, not dividers or other content (#10571)\n      .filter(\".ui-menu-item\").filter(function () {\n        return regex.test($.trim($(this).children(\".ui-menu-item-wrapper\").text()));\n      });\n    }\n  });\n  /*!\r\n   * jQuery UI Autocomplete 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Autocomplete\n  //>>group: Widgets\n  //>>description: Lists suggested words as the user is typing.\n  //>>docs: http://api.jqueryui.com/autocomplete/\n  //>>demos: http://jqueryui.com/autocomplete/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/autocomplete.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.widget(\"ui.autocomplete\", {\n    version: \"1.12.1\",\n    defaultElement: \"<input>\",\n    options: {\n      appendTo: null,\n      autoFocus: false,\n      delay: 300,\n      minLength: 1,\n      position: {\n        my: \"left top\",\n        at: \"left bottom\",\n        collision: \"none\"\n      },\n      source: null,\n      // Callbacks\n      change: null,\n      close: null,\n      focus: null,\n      open: null,\n      response: null,\n      search: null,\n      select: null\n    },\n    requestIndex: 0,\n    pending: 0,\n    _create: function _create() {\n      // Some browsers only repeat keydown events, not keypress events,\n      // so we use the suppressKeyPress flag to determine if we've already\n      // handled the keydown event. #7269\n      // Unfortunately the code for & in keypress is the same as the up arrow,\n      // so we use the suppressKeyPressRepeat flag to avoid handling keypress\n      // events when we know the keydown event was used to modify the\n      // search term. #7799\n      var suppressKeyPress,\n          suppressKeyPressRepeat,\n          suppressInput,\n          nodeName = this.element[0].nodeName.toLowerCase(),\n          isTextarea = nodeName === \"textarea\",\n          isInput = nodeName === \"input\"; // Textareas are always multi-line\n      // Inputs are always single-line, even if inside a contentEditable element\n      // IE also treats inputs as contentEditable\n      // All other element types are determined by whether or not they're contentEditable\n\n      this.isMultiLine = isTextarea || !isInput && this._isContentEditable(this.element);\n      this.valueMethod = this.element[isTextarea || isInput ? \"val\" : \"text\"];\n      this.isNewMenu = true;\n\n      this._addClass(\"ui-autocomplete-input\");\n\n      this.element.attr(\"autocomplete\", \"off\");\n\n      this._on(this.element, {\n        keydown: function keydown(event) {\n          if (this.element.prop(\"readOnly\")) {\n            suppressKeyPress = true;\n            suppressInput = true;\n            suppressKeyPressRepeat = true;\n            return;\n          }\n\n          suppressKeyPress = false;\n          suppressInput = false;\n          suppressKeyPressRepeat = false;\n          var keyCode = $.ui.keyCode;\n\n          switch (event.keyCode) {\n            case keyCode.PAGE_UP:\n              suppressKeyPress = true;\n\n              this._move(\"previousPage\", event);\n\n              break;\n\n            case keyCode.PAGE_DOWN:\n              suppressKeyPress = true;\n\n              this._move(\"nextPage\", event);\n\n              break;\n\n            case keyCode.UP:\n              suppressKeyPress = true;\n\n              this._keyEvent(\"previous\", event);\n\n              break;\n\n            case keyCode.DOWN:\n              suppressKeyPress = true;\n\n              this._keyEvent(\"next\", event);\n\n              break;\n\n            case keyCode.ENTER:\n              // when menu is open and has focus\n              if (this.menu.active) {\n                // #6055 - Opera still allows the keypress to occur\n                // which causes forms to submit\n                suppressKeyPress = true;\n                event.preventDefault();\n                this.menu.select(event);\n              }\n\n              break;\n\n            case keyCode.TAB:\n              if (this.menu.active) {\n                this.menu.select(event);\n              }\n\n              break;\n\n            case keyCode.ESCAPE:\n              if (this.menu.element.is(\":visible\")) {\n                if (!this.isMultiLine) {\n                  this._value(this.term);\n                }\n\n                this.close(event); // Different browsers have different default behavior for escape\n                // Single press can mean undo or clear\n                // Double press in IE means clear the whole form\n\n                event.preventDefault();\n              }\n\n              break;\n\n            default:\n              suppressKeyPressRepeat = true; // search timeout should be triggered before the input value is changed\n\n              this._searchTimeout(event);\n\n              break;\n          }\n        },\n        keypress: function keypress(event) {\n          if (suppressKeyPress) {\n            suppressKeyPress = false;\n\n            if (!this.isMultiLine || this.menu.element.is(\":visible\")) {\n              event.preventDefault();\n            }\n\n            return;\n          }\n\n          if (suppressKeyPressRepeat) {\n            return;\n          } // Replicate some key handlers to allow them to repeat in Firefox and Opera\n\n\n          var keyCode = $.ui.keyCode;\n\n          switch (event.keyCode) {\n            case keyCode.PAGE_UP:\n              this._move(\"previousPage\", event);\n\n              break;\n\n            case keyCode.PAGE_DOWN:\n              this._move(\"nextPage\", event);\n\n              break;\n\n            case keyCode.UP:\n              this._keyEvent(\"previous\", event);\n\n              break;\n\n            case keyCode.DOWN:\n              this._keyEvent(\"next\", event);\n\n              break;\n          }\n        },\n        input: function input(event) {\n          if (suppressInput) {\n            suppressInput = false;\n            event.preventDefault();\n            return;\n          }\n\n          this._searchTimeout(event);\n        },\n        focus: function focus() {\n          this.selectedItem = null;\n          this.previous = this._value();\n        },\n        blur: function blur(event) {\n          if (this.cancelBlur) {\n            delete this.cancelBlur;\n            return;\n          }\n\n          clearTimeout(this.searching);\n          this.close(event);\n\n          this._change(event);\n        }\n      });\n\n      this._initSource();\n\n      this.menu = $(\"<ul>\").appendTo(this._appendTo()).menu({\n        // disable ARIA support, the live region takes care of that\n        role: null\n      }).hide().menu(\"instance\");\n\n      this._addClass(this.menu.element, \"ui-autocomplete\", \"ui-front\");\n\n      this._on(this.menu.element, {\n        mousedown: function mousedown(event) {\n          // prevent moving focus out of the text field\n          event.preventDefault(); // IE doesn't prevent moving focus even with event.preventDefault()\n          // so we set a flag to know when we should ignore the blur event\n\n          this.cancelBlur = true;\n\n          this._delay(function () {\n            delete this.cancelBlur; // Support: IE 8 only\n            // Right clicking a menu item or selecting text from the menu items will\n            // result in focus moving out of the input. However, we've already received\n            // and ignored the blur event because of the cancelBlur flag set above. So\n            // we restore focus to ensure that the menu closes properly based on the user's\n            // next actions.\n\n            if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {\n              this.element.trigger(\"focus\");\n            }\n          });\n        },\n        menufocus: function menufocus(event, ui) {\n          var label, item; // support: Firefox\n          // Prevent accidental activation of menu items in Firefox (#7024 #9118)\n\n          if (this.isNewMenu) {\n            this.isNewMenu = false;\n\n            if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {\n              this.menu.blur();\n              this.document.one(\"mousemove\", function () {\n                $(event.target).trigger(event.originalEvent);\n              });\n              return;\n            }\n          }\n\n          item = ui.item.data(\"ui-autocomplete-item\");\n\n          if (false !== this._trigger(\"focus\", event, {\n            item: item\n          })) {\n            // use value to match what will end up in the input, if it was a key event\n            if (event.originalEvent && /^key/.test(event.originalEvent.type)) {\n              this._value(item.value);\n            }\n          } // Announce the value in the liveRegion\n\n\n          label = ui.item.attr(\"aria-label\") || item.value;\n\n          if (label && $.trim(label).length) {\n            this.liveRegion.children().hide();\n            $(\"<div>\").text(label).appendTo(this.liveRegion);\n          }\n        },\n        menuselect: function menuselect(event, ui) {\n          var item = ui.item.data(\"ui-autocomplete-item\"),\n              previous = this.previous; // Only trigger when focus was lost (click on menu)\n\n          if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {\n            this.element.trigger(\"focus\");\n            this.previous = previous; // #6109 - IE triggers two focus events and the second\n            // is asynchronous, so we need to reset the previous\n            // term synchronously and asynchronously :-(\n\n            this._delay(function () {\n              this.previous = previous;\n              this.selectedItem = item;\n            });\n          }\n\n          if (false !== this._trigger(\"select\", event, {\n            item: item\n          })) {\n            this._value(item.value);\n          } // reset the term after the select event\n          // this allows custom select handling to work properly\n\n\n          this.term = this._value();\n          this.close(event);\n          this.selectedItem = item;\n        }\n      });\n\n      this.liveRegion = $(\"<div>\", {\n        role: \"status\",\n        \"aria-live\": \"assertive\",\n        \"aria-relevant\": \"additions\"\n      }).appendTo(this.document[0].body);\n\n      this._addClass(this.liveRegion, null, \"ui-helper-hidden-accessible\"); // Turning off autocomplete prevents the browser from remembering the\n      // value when navigating through history, so we re-enable autocomplete\n      // if the page is unloaded before the widget is destroyed. #7790\n\n\n      this._on(this.window, {\n        beforeunload: function beforeunload() {\n          this.element.removeAttr(\"autocomplete\");\n        }\n      });\n    },\n    _destroy: function _destroy() {\n      clearTimeout(this.searching);\n      this.element.removeAttr(\"autocomplete\");\n      this.menu.element.remove();\n      this.liveRegion.remove();\n    },\n    _setOption: function _setOption(key, value) {\n      this._super(key, value);\n\n      if (key === \"source\") {\n        this._initSource();\n      }\n\n      if (key === \"appendTo\") {\n        this.menu.element.appendTo(this._appendTo());\n      }\n\n      if (key === \"disabled\" && value && this.xhr) {\n        this.xhr.abort();\n      }\n    },\n    _isEventTargetInWidget: function _isEventTargetInWidget(event) {\n      var menuElement = this.menu.element[0];\n      return event.target === this.element[0] || event.target === menuElement || $.contains(menuElement, event.target);\n    },\n    _closeOnClickOutside: function _closeOnClickOutside(event) {\n      if (!this._isEventTargetInWidget(event)) {\n        this.close();\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element) {\n        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n      }\n\n      if (!element || !element[0]) {\n        element = this.element.closest(\".ui-front, dialog\");\n      }\n\n      if (!element.length) {\n        element = this.document[0].body;\n      }\n\n      return element;\n    },\n    _initSource: function _initSource() {\n      var array,\n          url,\n          that = this;\n\n      if ($.isArray(this.options.source)) {\n        array = this.options.source;\n\n        this.source = function (request, response) {\n          response($.ui.autocomplete.filter(array, request.term));\n        };\n      } else if (typeof this.options.source === \"string\") {\n        url = this.options.source;\n\n        this.source = function (request, response) {\n          if (that.xhr) {\n            that.xhr.abort();\n          }\n\n          that.xhr = $.ajax({\n            url: url,\n            data: request,\n            dataType: \"json\",\n            success: function success(data) {\n              response(data);\n            },\n            error: function error() {\n              response([]);\n            }\n          });\n        };\n      } else {\n        this.source = this.options.source;\n      }\n    },\n    _searchTimeout: function _searchTimeout(event) {\n      clearTimeout(this.searching);\n      this.searching = this._delay(function () {\n        // Search if the value has changed, or if the user retypes the same value (see #7434)\n        var equalValues = this.term === this._value(),\n            menuVisible = this.menu.element.is(\":visible\"),\n            modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;\n\n        if (!equalValues || equalValues && !menuVisible && !modifierKey) {\n          this.selectedItem = null;\n          this.search(null, event);\n        }\n      }, this.options.delay);\n    },\n    search: function search(value, event) {\n      value = value != null ? value : this._value(); // Always save the actual value, not the one passed as an argument\n\n      this.term = this._value();\n\n      if (value.length < this.options.minLength) {\n        return this.close(event);\n      }\n\n      if (this._trigger(\"search\", event) === false) {\n        return;\n      }\n\n      return this._search(value);\n    },\n    _search: function _search(value) {\n      this.pending++;\n\n      this._addClass(\"ui-autocomplete-loading\");\n\n      this.cancelSearch = false;\n      this.source({\n        term: value\n      }, this._response());\n    },\n    _response: function _response() {\n      var index = ++this.requestIndex;\n      return $.proxy(function (content) {\n        if (index === this.requestIndex) {\n          this.__response(content);\n        }\n\n        this.pending--;\n\n        if (!this.pending) {\n          this._removeClass(\"ui-autocomplete-loading\");\n        }\n      }, this);\n    },\n    __response: function __response(content) {\n      if (content) {\n        content = this._normalize(content);\n      }\n\n      this._trigger(\"response\", null, {\n        content: content\n      });\n\n      if (!this.options.disabled && content && content.length && !this.cancelSearch) {\n        this._suggest(content);\n\n        this._trigger(\"open\");\n      } else {\n        // use ._close() instead of .close() so we don't cancel future searches\n        this._close();\n      }\n    },\n    close: function close(event) {\n      this.cancelSearch = true;\n\n      this._close(event);\n    },\n    _close: function _close(event) {\n      // Remove the handler that closes the menu on outside clicks\n      this._off(this.document, \"mousedown\");\n\n      if (this.menu.element.is(\":visible\")) {\n        this.menu.element.hide();\n        this.menu.blur();\n        this.isNewMenu = true;\n\n        this._trigger(\"close\", event);\n      }\n    },\n    _change: function _change(event) {\n      if (this.previous !== this._value()) {\n        this._trigger(\"change\", event, {\n          item: this.selectedItem\n        });\n      }\n    },\n    _normalize: function _normalize(items) {\n      // assume all items have the right format when the first item is complete\n      if (items.length && items[0].label && items[0].value) {\n        return items;\n      }\n\n      return $.map(items, function (item) {\n        if (typeof item === \"string\") {\n          return {\n            label: item,\n            value: item\n          };\n        }\n\n        return $.extend({}, item, {\n          label: item.label || item.value,\n          value: item.value || item.label\n        });\n      });\n    },\n    _suggest: function _suggest(items) {\n      var ul = this.menu.element.empty();\n\n      this._renderMenu(ul, items);\n\n      this.isNewMenu = true;\n      this.menu.refresh(); // Size and position menu\n\n      ul.show();\n\n      this._resizeMenu();\n\n      ul.position($.extend({\n        of: this.element\n      }, this.options.position));\n\n      if (this.options.autoFocus) {\n        this.menu.next();\n      } // Listen for interactions outside of the widget (#6642)\n\n\n      this._on(this.document, {\n        mousedown: \"_closeOnClickOutside\"\n      });\n    },\n    _resizeMenu: function _resizeMenu() {\n      var ul = this.menu.element;\n      ul.outerWidth(Math.max( // Firefox wraps long text (possibly a rounding bug)\n      // so we add 1px to avoid the wrapping (#7513)\n      ul.width(\"\").outerWidth() + 1, this.element.outerWidth()));\n    },\n    _renderMenu: function _renderMenu(ul, items) {\n      var that = this;\n      $.each(items, function (index, item) {\n        that._renderItemData(ul, item);\n      });\n    },\n    _renderItemData: function _renderItemData(ul, item) {\n      return this._renderItem(ul, item).data(\"ui-autocomplete-item\", item);\n    },\n    _renderItem: function _renderItem(ul, item) {\n      return $(\"<li>\").append($(\"<div>\").text(item.label)).appendTo(ul);\n    },\n    _move: function _move(direction, event) {\n      if (!this.menu.element.is(\":visible\")) {\n        this.search(null, event);\n        return;\n      }\n\n      if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {\n        if (!this.isMultiLine) {\n          this._value(this.term);\n        }\n\n        this.menu.blur();\n        return;\n      }\n\n      this.menu[direction](event);\n    },\n    widget: function widget() {\n      return this.menu.element;\n    },\n    _value: function _value() {\n      return this.valueMethod.apply(this.element, arguments);\n    },\n    _keyEvent: function _keyEvent(keyEvent, event) {\n      if (!this.isMultiLine || this.menu.element.is(\":visible\")) {\n        this._move(keyEvent, event); // Prevents moving cursor to beginning/end of the text field in some browsers\n\n\n        event.preventDefault();\n      }\n    },\n    // Support: Chrome <=50\n    // We should be able to just use this.element.prop( \"isContentEditable\" )\n    // but hidden elements always report false in Chrome.\n    // https://code.google.com/p/chromium/issues/detail?id=313082\n    _isContentEditable: function _isContentEditable(element) {\n      if (!element.length) {\n        return false;\n      }\n\n      var editable = element.prop(\"contentEditable\");\n\n      if (editable === \"inherit\") {\n        return this._isContentEditable(element.parent());\n      }\n\n      return editable === \"true\";\n    }\n  });\n  $.extend($.ui.autocomplete, {\n    escapeRegex: function escapeRegex(value) {\n      return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n    },\n    filter: function filter(array, term) {\n      var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), \"i\");\n      return $.grep(array, function (value) {\n        return matcher.test(value.label || value.value || value);\n      });\n    }\n  }); // Live region extension, adding a `messages` option\n  // NOTE: This is an experimental API. We are still investigating\n  // a full solution for string manipulation and internationalization.\n\n  $.widget(\"ui.autocomplete\", $.ui.autocomplete, {\n    options: {\n      messages: {\n        noResults: \"No search results.\",\n        results: function results(amount) {\n          return amount + (amount > 1 ? \" results are\" : \" result is\") + \" available, use up and down arrow keys to navigate.\";\n        }\n      }\n    },\n    __response: function __response(content) {\n      var message;\n\n      this._superApply(arguments);\n\n      if (this.options.disabled || this.cancelSearch) {\n        return;\n      }\n\n      if (content && content.length) {\n        message = this.options.messages.results(content.length);\n      } else {\n        message = this.options.messages.noResults;\n      }\n\n      this.liveRegion.children().hide();\n      $(\"<div>\").text(message).appendTo(this.liveRegion);\n    }\n  });\n  var widgetsAutocomplete = $.ui.autocomplete;\n  /*!\r\n   * jQuery UI Controlgroup 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Controlgroup\n  //>>group: Widgets\n  //>>description: Visually groups form control widgets\n  //>>docs: http://api.jqueryui.com/controlgroup/\n  //>>demos: http://jqueryui.com/controlgroup/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/controlgroup.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;\n  var widgetsControlgroup = $.widget(\"ui.controlgroup\", {\n    version: \"1.12.1\",\n    defaultElement: \"<div>\",\n    options: {\n      direction: \"horizontal\",\n      disabled: null,\n      onlyVisible: true,\n      items: {\n        \"button\": \"input[type=button], input[type=submit], input[type=reset], button, a\",\n        \"controlgroupLabel\": \".ui-controlgroup-label\",\n        \"checkboxradio\": \"input[type='checkbox'], input[type='radio']\",\n        \"selectmenu\": \"select\",\n        \"spinner\": \".ui-spinner-input\"\n      }\n    },\n    _create: function _create() {\n      this._enhance();\n    },\n    // To support the enhanced option in jQuery Mobile, we isolate DOM manipulation\n    _enhance: function _enhance() {\n      this.element.attr(\"role\", \"toolbar\");\n      this.refresh();\n    },\n    _destroy: function _destroy() {\n      this._callChildMethod(\"destroy\");\n\n      this.childWidgets.removeData(\"ui-controlgroup-data\");\n      this.element.removeAttr(\"role\");\n\n      if (this.options.items.controlgroupLabel) {\n        this.element.find(this.options.items.controlgroupLabel).find(\".ui-controlgroup-label-contents\").contents().unwrap();\n      }\n    },\n    _initWidgets: function _initWidgets() {\n      var that = this,\n          childWidgets = []; // First we iterate over each of the items options\n\n      $.each(this.options.items, function (widget, selector) {\n        var labels;\n        var options = {}; // Make sure the widget has a selector set\n\n        if (!selector) {\n          return;\n        }\n\n        if (widget === \"controlgroupLabel\") {\n          labels = that.element.find(selector);\n          labels.each(function () {\n            var element = $(this);\n\n            if (element.children(\".ui-controlgroup-label-contents\").length) {\n              return;\n            }\n\n            element.contents().wrapAll(\"<span class='ui-controlgroup-label-contents'></span>\");\n          });\n\n          that._addClass(labels, null, \"ui-widget ui-widget-content ui-state-default\");\n\n          childWidgets = childWidgets.concat(labels.get());\n          return;\n        } // Make sure the widget actually exists\n\n\n        if (!$.fn[widget]) {\n          return;\n        } // We assume everything is in the middle to start because we can't determine\n        // first / last elements until all enhancments are done.\n\n\n        if (that[\"_\" + widget + \"Options\"]) {\n          options = that[\"_\" + widget + \"Options\"](\"middle\");\n        } else {\n          options = {\n            classes: {}\n          };\n        } // Find instances of this widget inside controlgroup and init them\n\n\n        that.element.find(selector).each(function () {\n          var element = $(this);\n          var instance = element[widget](\"instance\"); // We need to clone the default options for this type of widget to avoid\n          // polluting the variable options which has a wider scope than a single widget.\n\n          var instanceOptions = $.widget.extend({}, options); // If the button is the child of a spinner ignore it\n          // TODO: Find a more generic solution\n\n          if (widget === \"button\" && element.parent(\".ui-spinner\").length) {\n            return;\n          } // Create the widget if it doesn't exist\n\n\n          if (!instance) {\n            instance = element[widget]()[widget](\"instance\");\n          }\n\n          if (instance) {\n            instanceOptions.classes = that._resolveClassesValues(instanceOptions.classes, instance);\n          }\n\n          element[widget](instanceOptions); // Store an instance of the controlgroup to be able to reference\n          // from the outermost element for changing options and refresh\n\n          var widgetElement = element[widget](\"widget\");\n          $.data(widgetElement[0], \"ui-controlgroup-data\", instance ? instance : element[widget](\"instance\"));\n          childWidgets.push(widgetElement[0]);\n        });\n      });\n      this.childWidgets = $($.uniqueSort(childWidgets));\n\n      this._addClass(this.childWidgets, \"ui-controlgroup-item\");\n    },\n    _callChildMethod: function _callChildMethod(method) {\n      this.childWidgets.each(function () {\n        var element = $(this),\n            data = element.data(\"ui-controlgroup-data\");\n\n        if (data && data[method]) {\n          data[method]();\n        }\n      });\n    },\n    _updateCornerClass: function _updateCornerClass(element, position) {\n      var remove = \"ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all\";\n\n      var add = this._buildSimpleOptions(position, \"label\").classes.label;\n\n      this._removeClass(element, null, remove);\n\n      this._addClass(element, null, add);\n    },\n    _buildSimpleOptions: function _buildSimpleOptions(position, key) {\n      var direction = this.options.direction === \"vertical\";\n      var result = {\n        classes: {}\n      };\n      result.classes[key] = {\n        \"middle\": \"\",\n        \"first\": \"ui-corner-\" + (direction ? \"top\" : \"left\"),\n        \"last\": \"ui-corner-\" + (direction ? \"bottom\" : \"right\"),\n        \"only\": \"ui-corner-all\"\n      }[position];\n      return result;\n    },\n    _spinnerOptions: function _spinnerOptions(position) {\n      var options = this._buildSimpleOptions(position, \"ui-spinner\");\n\n      options.classes[\"ui-spinner-up\"] = \"\";\n      options.classes[\"ui-spinner-down\"] = \"\";\n      return options;\n    },\n    _buttonOptions: function _buttonOptions(position) {\n      return this._buildSimpleOptions(position, \"ui-button\");\n    },\n    _checkboxradioOptions: function _checkboxradioOptions(position) {\n      return this._buildSimpleOptions(position, \"ui-checkboxradio-label\");\n    },\n    _selectmenuOptions: function _selectmenuOptions(position) {\n      var direction = this.options.direction === \"vertical\";\n      return {\n        width: direction ? \"auto\" : false,\n        classes: {\n          middle: {\n            \"ui-selectmenu-button-open\": \"\",\n            \"ui-selectmenu-button-closed\": \"\"\n          },\n          first: {\n            \"ui-selectmenu-button-open\": \"ui-corner-\" + (direction ? \"top\" : \"tl\"),\n            \"ui-selectmenu-button-closed\": \"ui-corner-\" + (direction ? \"top\" : \"left\")\n          },\n          last: {\n            \"ui-selectmenu-button-open\": direction ? \"\" : \"ui-corner-tr\",\n            \"ui-selectmenu-button-closed\": \"ui-corner-\" + (direction ? \"bottom\" : \"right\")\n          },\n          only: {\n            \"ui-selectmenu-button-open\": \"ui-corner-top\",\n            \"ui-selectmenu-button-closed\": \"ui-corner-all\"\n          }\n        }[position]\n      };\n    },\n    _resolveClassesValues: function _resolveClassesValues(classes, instance) {\n      var result = {};\n      $.each(classes, function (key) {\n        var current = instance.options.classes[key] || \"\";\n        current = $.trim(current.replace(controlgroupCornerRegex, \"\"));\n        result[key] = (current + \" \" + classes[key]).replace(/\\s+/g, \" \");\n      });\n      return result;\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"direction\") {\n        this._removeClass(\"ui-controlgroup-\" + this.options.direction);\n      }\n\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        this._callChildMethod(value ? \"disable\" : \"enable\");\n\n        return;\n      }\n\n      this.refresh();\n    },\n    refresh: function refresh() {\n      var children,\n          that = this;\n\n      this._addClass(\"ui-controlgroup ui-controlgroup-\" + this.options.direction);\n\n      if (this.options.direction === \"horizontal\") {\n        this._addClass(null, \"ui-helper-clearfix\");\n      }\n\n      this._initWidgets();\n\n      children = this.childWidgets; // We filter here because we need to track all childWidgets not just the visible ones\n\n      if (this.options.onlyVisible) {\n        children = children.filter(\":visible\");\n      }\n\n      if (children.length) {\n        // We do this last because we need to make sure all enhancment is done\n        // before determining first and last\n        $.each([\"first\", \"last\"], function (index, value) {\n          var instance = children[value]().data(\"ui-controlgroup-data\");\n\n          if (instance && that[\"_\" + instance.widgetName + \"Options\"]) {\n            var options = that[\"_\" + instance.widgetName + \"Options\"](children.length === 1 ? \"only\" : value);\n            options.classes = that._resolveClassesValues(options.classes, instance);\n            instance.element[instance.widgetName](options);\n          } else {\n            that._updateCornerClass(children[value](), value);\n          }\n        }); // Finally call the refresh method on each of the child widgets.\n\n        this._callChildMethod(\"refresh\");\n      }\n    }\n  });\n  /*!\r\n   * jQuery UI Checkboxradio 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Checkboxradio\n  //>>group: Widgets\n  //>>description: Enhances a form with multiple themeable checkboxes or radio buttons.\n  //>>docs: http://api.jqueryui.com/checkboxradio/\n  //>>demos: http://jqueryui.com/checkboxradio/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/button.css\n  //>>css.structure: ../../themes/base/checkboxradio.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.widget(\"ui.checkboxradio\", [$.ui.formResetMixin, {\n    version: \"1.12.1\",\n    options: {\n      disabled: null,\n      label: null,\n      icon: true,\n      classes: {\n        \"ui-checkboxradio-label\": \"ui-corner-all\",\n        \"ui-checkboxradio-icon\": \"ui-corner-all\"\n      }\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var disabled, labels;\n      var that = this;\n      var options = this._super() || {}; // We read the type here, because it makes more sense to throw a element type error first,\n      // rather then the error for lack of a label. Often if its the wrong type, it\n      // won't have a label (e.g. calling on a div, btn, etc)\n\n      this._readType();\n\n      labels = this.element.labels(); // If there are multiple labels, use the last one\n\n      this.label = $(labels[labels.length - 1]);\n\n      if (!this.label.length) {\n        $.error(\"No label found for checkboxradio widget\");\n      }\n\n      this.originalLabel = \"\"; // We need to get the label text but this may also need to make sure it does not contain the\n      // input itself.\n\n      this.label.contents().not(this.element[0]).each(function () {\n        // The label contents could be text, html, or a mix. We concat each element to get a\n        // string representation of the label, without the input as part of it.\n        that.originalLabel += this.nodeType === 3 ? $(this).text() : this.outerHTML;\n      }); // Set the label option if we found label text\n\n      if (this.originalLabel) {\n        options.label = this.originalLabel;\n      }\n\n      disabled = this.element[0].disabled;\n\n      if (disabled != null) {\n        options.disabled = disabled;\n      }\n\n      return options;\n    },\n    _create: function _create() {\n      var checked = this.element[0].checked;\n\n      this._bindFormResetHandler();\n\n      if (this.options.disabled == null) {\n        this.options.disabled = this.element[0].disabled;\n      }\n\n      this._setOption(\"disabled\", this.options.disabled);\n\n      this._addClass(\"ui-checkboxradio\", \"ui-helper-hidden-accessible\");\n\n      this._addClass(this.label, \"ui-checkboxradio-label\", \"ui-button ui-widget\");\n\n      if (this.type === \"radio\") {\n        this._addClass(this.label, \"ui-checkboxradio-radio-label\");\n      }\n\n      if (this.options.label && this.options.label !== this.originalLabel) {\n        this._updateLabel();\n      } else if (this.originalLabel) {\n        this.options.label = this.originalLabel;\n      }\n\n      this._enhance();\n\n      if (checked) {\n        this._addClass(this.label, \"ui-checkboxradio-checked\", \"ui-state-active\");\n\n        if (this.icon) {\n          this._addClass(this.icon, null, \"ui-state-hover\");\n        }\n      }\n\n      this._on({\n        change: \"_toggleClasses\",\n        focus: function focus() {\n          this._addClass(this.label, null, \"ui-state-focus ui-visual-focus\");\n        },\n        blur: function blur() {\n          this._removeClass(this.label, null, \"ui-state-focus ui-visual-focus\");\n        }\n      });\n    },\n    _readType: function _readType() {\n      var nodeName = this.element[0].nodeName.toLowerCase();\n      this.type = this.element[0].type;\n\n      if (nodeName !== \"input\" || !/radio|checkbox/.test(this.type)) {\n        $.error(\"Can't create checkboxradio on element.nodeName=\" + nodeName + \" and element.type=\" + this.type);\n      }\n    },\n    // Support jQuery Mobile enhanced option\n    _enhance: function _enhance() {\n      this._updateIcon(this.element[0].checked);\n    },\n    widget: function widget() {\n      return this.label;\n    },\n    _getRadioGroup: function _getRadioGroup() {\n      var group;\n      var name = this.element[0].name;\n      var nameSelector = \"input[name='\" + $.ui.escapeSelector(name) + \"']\";\n\n      if (!name) {\n        return $([]);\n      }\n\n      if (this.form.length) {\n        group = $(this.form[0].elements).filter(nameSelector);\n      } else {\n        // Not inside a form, check all inputs that also are not inside a form\n        group = $(nameSelector).filter(function () {\n          return $(this).form().length === 0;\n        });\n      }\n\n      return group.not(this.element);\n    },\n    _toggleClasses: function _toggleClasses() {\n      var checked = this.element[0].checked;\n\n      this._toggleClass(this.label, \"ui-checkboxradio-checked\", \"ui-state-active\", checked);\n\n      if (this.options.icon && this.type === \"checkbox\") {\n        this._toggleClass(this.icon, null, \"ui-icon-check ui-state-checked\", checked)._toggleClass(this.icon, null, \"ui-icon-blank\", !checked);\n      }\n\n      if (this.type === \"radio\") {\n        this._getRadioGroup().each(function () {\n          var instance = $(this).checkboxradio(\"instance\");\n\n          if (instance) {\n            instance._removeClass(instance.label, \"ui-checkboxradio-checked\", \"ui-state-active\");\n          }\n        });\n      }\n    },\n    _destroy: function _destroy() {\n      this._unbindFormResetHandler();\n\n      if (this.icon) {\n        this.icon.remove();\n        this.iconSpace.remove();\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      // We don't allow the value to be set to nothing\n      if (key === \"label\" && !value) {\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        this._toggleClass(this.label, null, \"ui-state-disabled\", value);\n\n        this.element[0].disabled = value; // Don't refresh when setting disabled\n\n        return;\n      }\n\n      this.refresh();\n    },\n    _updateIcon: function _updateIcon(checked) {\n      var toAdd = \"ui-icon ui-icon-background \";\n\n      if (this.options.icon) {\n        if (!this.icon) {\n          this.icon = $(\"<span>\");\n          this.iconSpace = $(\"<span> </span>\");\n\n          this._addClass(this.iconSpace, \"ui-checkboxradio-icon-space\");\n        }\n\n        if (this.type === \"checkbox\") {\n          toAdd += checked ? \"ui-icon-check ui-state-checked\" : \"ui-icon-blank\";\n\n          this._removeClass(this.icon, null, checked ? \"ui-icon-blank\" : \"ui-icon-check\");\n        } else {\n          toAdd += \"ui-icon-blank\";\n        }\n\n        this._addClass(this.icon, \"ui-checkboxradio-icon\", toAdd);\n\n        if (!checked) {\n          this._removeClass(this.icon, null, \"ui-icon-check ui-state-checked\");\n        }\n\n        this.icon.prependTo(this.label).after(this.iconSpace);\n      } else if (this.icon !== undefined) {\n        this.icon.remove();\n        this.iconSpace.remove();\n        delete this.icon;\n      }\n    },\n    _updateLabel: function _updateLabel() {\n      // Remove the contents of the label ( minus the icon, icon space, and input )\n      var contents = this.label.contents().not(this.element[0]);\n\n      if (this.icon) {\n        contents = contents.not(this.icon[0]);\n      }\n\n      if (this.iconSpace) {\n        contents = contents.not(this.iconSpace[0]);\n      }\n\n      contents.remove();\n      this.label.append(this.options.label);\n    },\n    refresh: function refresh() {\n      var checked = this.element[0].checked,\n          isDisabled = this.element[0].disabled;\n\n      this._updateIcon(checked);\n\n      this._toggleClass(this.label, \"ui-checkboxradio-checked\", \"ui-state-active\", checked);\n\n      if (this.options.label !== null) {\n        this._updateLabel();\n      }\n\n      if (isDisabled !== this.options.disabled) {\n        this._setOptions({\n          \"disabled\": isDisabled\n        });\n      }\n    }\n  }]);\n  var widgetsCheckboxradio = $.ui.checkboxradio;\n  /*!\r\n   * jQuery UI Button 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Button\n  //>>group: Widgets\n  //>>description: Enhances a form with themeable buttons.\n  //>>docs: http://api.jqueryui.com/button/\n  //>>demos: http://jqueryui.com/button/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/button.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.widget(\"ui.button\", {\n    version: \"1.12.1\",\n    defaultElement: \"<button>\",\n    options: {\n      classes: {\n        \"ui-button\": \"ui-corner-all\"\n      },\n      disabled: null,\n      icon: null,\n      iconPosition: \"beginning\",\n      label: null,\n      showLabel: true\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var disabled,\n          // This is to support cases like in jQuery Mobile where the base widget does have\n      // an implementation of _getCreateOptions\n      options = this._super() || {};\n      this.isInput = this.element.is(\"input\");\n      disabled = this.element[0].disabled;\n\n      if (disabled != null) {\n        options.disabled = disabled;\n      }\n\n      this.originalLabel = this.isInput ? this.element.val() : this.element.html();\n\n      if (this.originalLabel) {\n        options.label = this.originalLabel;\n      }\n\n      return options;\n    },\n    _create: function _create() {\n      if (!this.option.showLabel & !this.options.icon) {\n        this.options.showLabel = true;\n      } // We have to check the option again here even though we did in _getCreateOptions,\n      // because null may have been passed on init which would override what was set in\n      // _getCreateOptions\n\n\n      if (this.options.disabled == null) {\n        this.options.disabled = this.element[0].disabled || false;\n      }\n\n      this.hasTitle = !!this.element.attr(\"title\"); // Check to see if the label needs to be set or if its already correct\n\n      if (this.options.label && this.options.label !== this.originalLabel) {\n        if (this.isInput) {\n          this.element.val(this.options.label);\n        } else {\n          this.element.html(this.options.label);\n        }\n      }\n\n      this._addClass(\"ui-button\", \"ui-widget\");\n\n      this._setOption(\"disabled\", this.options.disabled);\n\n      this._enhance();\n\n      if (this.element.is(\"a\")) {\n        this._on({\n          \"keyup\": function keyup(event) {\n            if (event.keyCode === $.ui.keyCode.SPACE) {\n              event.preventDefault(); // Support: PhantomJS <= 1.9, IE 8 Only\n              // If a native click is available use it so we actually cause navigation\n              // otherwise just trigger a click event\n\n              if (this.element[0].click) {\n                this.element[0].click();\n              } else {\n                this.element.trigger(\"click\");\n              }\n            }\n          }\n        });\n      }\n    },\n    _enhance: function _enhance() {\n      if (!this.element.is(\"button\")) {\n        this.element.attr(\"role\", \"button\");\n      }\n\n      if (this.options.icon) {\n        this._updateIcon(\"icon\", this.options.icon);\n\n        this._updateTooltip();\n      }\n    },\n    _updateTooltip: function _updateTooltip() {\n      this.title = this.element.attr(\"title\");\n\n      if (!this.options.showLabel && !this.title) {\n        this.element.attr(\"title\", this.options.label);\n      }\n    },\n    _updateIcon: function _updateIcon(option, value) {\n      var icon = option !== \"iconPosition\",\n          position = icon ? this.options.iconPosition : value,\n          displayBlock = position === \"top\" || position === \"bottom\"; // Create icon\n\n      if (!this.icon) {\n        this.icon = $(\"<span>\");\n\n        this._addClass(this.icon, \"ui-button-icon\", \"ui-icon\");\n\n        if (!this.options.showLabel) {\n          this._addClass(\"ui-button-icon-only\");\n        }\n      } else if (icon) {\n        // If we are updating the icon remove the old icon class\n        this._removeClass(this.icon, null, this.options.icon);\n      } // If we are updating the icon add the new icon class\n\n\n      if (icon) {\n        this._addClass(this.icon, null, value);\n      }\n\n      this._attachIcon(position); // If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove\n      // the iconSpace if there is one.\n\n\n      if (displayBlock) {\n        this._addClass(this.icon, null, \"ui-widget-icon-block\");\n\n        if (this.iconSpace) {\n          this.iconSpace.remove();\n        }\n      } else {\n        // Position is beginning or end so remove the ui-widget-icon-block class and add the\n        // space if it does not exist\n        if (!this.iconSpace) {\n          this.iconSpace = $(\"<span> </span>\");\n\n          this._addClass(this.iconSpace, \"ui-button-icon-space\");\n        }\n\n        this._removeClass(this.icon, null, \"ui-wiget-icon-block\");\n\n        this._attachIconSpace(position);\n      }\n    },\n    _destroy: function _destroy() {\n      this.element.removeAttr(\"role\");\n\n      if (this.icon) {\n        this.icon.remove();\n      }\n\n      if (this.iconSpace) {\n        this.iconSpace.remove();\n      }\n\n      if (!this.hasTitle) {\n        this.element.removeAttr(\"title\");\n      }\n    },\n    _attachIconSpace: function _attachIconSpace(iconPosition) {\n      this.icon[/^(?:end|bottom)/.test(iconPosition) ? \"before\" : \"after\"](this.iconSpace);\n    },\n    _attachIcon: function _attachIcon(iconPosition) {\n      this.element[/^(?:end|bottom)/.test(iconPosition) ? \"append\" : \"prepend\"](this.icon);\n    },\n    _setOptions: function _setOptions(options) {\n      var newShowLabel = options.showLabel === undefined ? this.options.showLabel : options.showLabel,\n          newIcon = options.icon === undefined ? this.options.icon : options.icon;\n\n      if (!newShowLabel && !newIcon) {\n        options.showLabel = true;\n      }\n\n      this._super(options);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icon\") {\n        if (value) {\n          this._updateIcon(key, value);\n        } else if (this.icon) {\n          this.icon.remove();\n\n          if (this.iconSpace) {\n            this.iconSpace.remove();\n          }\n        }\n      }\n\n      if (key === \"iconPosition\") {\n        this._updateIcon(key, value);\n      } // Make sure we can't end up with a button that has neither text nor icon\n\n\n      if (key === \"showLabel\") {\n        this._toggleClass(\"ui-button-icon-only\", null, !value);\n\n        this._updateTooltip();\n      }\n\n      if (key === \"label\") {\n        if (this.isInput) {\n          this.element.val(value);\n        } else {\n          // If there is an icon, append it, else nothing then append the value\n          // this avoids removal of the icon when setting label text\n          this.element.html(value);\n\n          if (this.icon) {\n            this._attachIcon(this.options.iconPosition);\n\n            this._attachIconSpace(this.options.iconPosition);\n          }\n        }\n      }\n\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        this._toggleClass(null, \"ui-state-disabled\", value);\n\n        this.element[0].disabled = value;\n\n        if (value) {\n          this.element.blur();\n        }\n      }\n    },\n    refresh: function refresh() {\n      // Make sure to only check disabled if its an element that supports this otherwise\n      // check for the disabled class to determine state\n      var isDisabled = this.element.is(\"input, button\") ? this.element[0].disabled : this.element.hasClass(\"ui-button-disabled\");\n\n      if (isDisabled !== this.options.disabled) {\n        this._setOptions({\n          disabled: isDisabled\n        });\n      }\n\n      this._updateTooltip();\n    }\n  }); // DEPRECATED\n\n  if ($.uiBackCompat !== false) {\n    // Text and Icons options\n    $.widget(\"ui.button\", $.ui.button, {\n      options: {\n        text: true,\n        icons: {\n          primary: null,\n          secondary: null\n        }\n      },\n      _create: function _create() {\n        if (this.options.showLabel && !this.options.text) {\n          this.options.showLabel = this.options.text;\n        }\n\n        if (!this.options.showLabel && this.options.text) {\n          this.options.text = this.options.showLabel;\n        }\n\n        if (!this.options.icon && (this.options.icons.primary || this.options.icons.secondary)) {\n          if (this.options.icons.primary) {\n            this.options.icon = this.options.icons.primary;\n          } else {\n            this.options.icon = this.options.icons.secondary;\n            this.options.iconPosition = \"end\";\n          }\n        } else if (this.options.icon) {\n          this.options.icons.primary = this.options.icon;\n        }\n\n        this._super();\n      },\n      _setOption: function _setOption(key, value) {\n        if (key === \"text\") {\n          this._super(\"showLabel\", value);\n\n          return;\n        }\n\n        if (key === \"showLabel\") {\n          this.options.text = value;\n        }\n\n        if (key === \"icon\") {\n          this.options.icons.primary = value;\n        }\n\n        if (key === \"icons\") {\n          if (value.primary) {\n            this._super(\"icon\", value.primary);\n\n            this._super(\"iconPosition\", \"beginning\");\n          } else if (value.secondary) {\n            this._super(\"icon\", value.secondary);\n\n            this._super(\"iconPosition\", \"end\");\n          }\n        }\n\n        this._superApply(arguments);\n      }\n    });\n\n    $.fn.button = function (orig) {\n      return function () {\n        if (!this.length || this.length && this[0].tagName !== \"INPUT\" || this.length && this[0].tagName === \"INPUT\" && this.attr(\"type\") !== \"checkbox\" && this.attr(\"type\") !== \"radio\") {\n          return orig.apply(this, arguments);\n        }\n\n        if (!$.ui.checkboxradio) {\n          $.error(\"Checkboxradio widget missing\");\n        }\n\n        if (arguments.length === 0) {\n          return this.checkboxradio({\n            \"icon\": false\n          });\n        }\n\n        return this.checkboxradio.apply(this, arguments);\n      };\n    }($.fn.button);\n\n    $.fn.buttonset = function () {\n      if (!$.ui.controlgroup) {\n        $.error(\"Controlgroup widget missing\");\n      }\n\n      if (arguments[0] === \"option\" && arguments[1] === \"items\" && arguments[2]) {\n        return this.controlgroup.apply(this, [arguments[0], \"items.button\", arguments[2]]);\n      }\n\n      if (arguments[0] === \"option\" && arguments[1] === \"items\") {\n        return this.controlgroup.apply(this, [arguments[0], \"items.button\"]);\n      }\n\n      if (typeof arguments[0] === \"object\" && arguments[0].items) {\n        arguments[0].items = {\n          button: arguments[0].items\n        };\n      }\n\n      return this.controlgroup.apply(this, arguments);\n    };\n  }\n\n  var widgetsButton = $.ui.button; // jscs:disable maximumLineLength\n\n  /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n\n  /*!\r\n   * jQuery UI Datepicker 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Datepicker\n  //>>group: Widgets\n  //>>description: Displays a calendar from an input or inline for selecting dates.\n  //>>docs: http://api.jqueryui.com/datepicker/\n  //>>demos: http://jqueryui.com/datepicker/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/datepicker.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.extend($.ui, {\n    datepicker: {\n      version: \"1.12.1\"\n    }\n  });\n  var datepicker_instActive;\n\n  function datepicker_getZindex(elem) {\n    var position, value;\n\n    while (elem.length && elem[0] !== document) {\n      // Ignore z-index if position is set to a value where z-index is ignored by the browser\n      // This makes behavior of this function consistent across browsers\n      // WebKit always returns auto if the element is positioned\n      position = elem.css(\"position\");\n\n      if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n        // IE returns 0 when zIndex is not specified\n        // other browsers return a string\n        // we ignore the case of nested elements with an explicit value of 0\n        // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n        value = parseInt(elem.css(\"zIndex\"), 10);\n\n        if (!isNaN(value) && value !== 0) {\n          return value;\n        }\n      }\n\n      elem = elem.parent();\n    }\n\n    return 0;\n  }\n  /* Date picker manager.\r\n     Use the singleton instance of this class, $.datepicker, to interact with the date picker.\r\n     Settings for (groups of) date pickers are maintained in an instance object,\r\n     allowing multiple different settings on the same page. */\n\n\n  function Datepicker() {\n    this._curInst = null; // The current instance in use\n\n    this._keyEvent = false; // If the last event was a key event\n\n    this._disabledInputs = []; // List of date picker inputs that have been disabled\n\n    this._datepickerShowing = false; // True if the popup picker is showing , false if not\n\n    this._inDialog = false; // True if showing within a \"dialog\", false if not\n\n    this._mainDivId = \"ui-datepicker-div\"; // The ID of the main datepicker division\n\n    this._inlineClass = \"ui-datepicker-inline\"; // The name of the inline marker class\n\n    this._appendClass = \"ui-datepicker-append\"; // The name of the append marker class\n\n    this._triggerClass = \"ui-datepicker-trigger\"; // The name of the trigger marker class\n\n    this._dialogClass = \"ui-datepicker-dialog\"; // The name of the dialog marker class\n\n    this._disableClass = \"ui-datepicker-disabled\"; // The name of the disabled covering marker class\n\n    this._unselectableClass = \"ui-datepicker-unselectable\"; // The name of the unselectable cell marker class\n\n    this._currentClass = \"ui-datepicker-current-day\"; // The name of the current day marker class\n\n    this._dayOverClass = \"ui-datepicker-days-cell-over\"; // The name of the day hover marker class\n\n    this.regional = []; // Available regional settings, indexed by language code\n\n    this.regional[\"\"] = {\n      // Default regional settings\n      closeText: \"Done\",\n      // Display text for close link\n      prevText: \"Prev\",\n      // Display text for previous month link\n      nextText: \"Next\",\n      // Display text for next month link\n      currentText: \"Today\",\n      // Display text for current month link\n      monthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      // Names of months for drop-down and formatting\n      monthNamesShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      // For formatting\n      dayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      // For formatting\n      dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      // For formatting\n      dayNamesMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n      // Column headings for days starting at Sunday\n      weekHeader: \"Wk\",\n      // Column header for week of the year\n      dateFormat: \"mm/dd/yy\",\n      // See format options on parseDate\n      firstDay: 0,\n      // The first day of the week, Sun = 0, Mon = 1, ...\n      isRTL: false,\n      // True if right-to-left language, false if left-to-right\n      showMonthAfterYear: false,\n      // True if the year select precedes month, false for month then year\n      yearSuffix: \"\" // Additional text to append to the year in the month headers\n\n    };\n    this._defaults = {\n      // Global defaults for all the date picker instances\n      showOn: \"focus\",\n      // \"focus\" for popup on focus,\n      // \"button\" for trigger button, or \"both\" for either\n      showAnim: \"fadeIn\",\n      // Name of jQuery animation for popup\n      showOptions: {},\n      // Options for enhanced animations\n      defaultDate: null,\n      // Used when field is blank: actual date,\n      // +/-number for offset from today, null for today\n      appendText: \"\",\n      // Display text following the input box, e.g. showing the format\n      buttonText: \"...\",\n      // Text for trigger button\n      buttonImage: \"\",\n      // URL for trigger button image\n      buttonImageOnly: false,\n      // True if the image appears alone, false if it appears on a button\n      hideIfNoPrevNext: false,\n      // True to hide next/previous month links\n      // if not applicable, false to just disable them\n      navigationAsDateFormat: false,\n      // True if date formatting applied to prev/today/next links\n      gotoCurrent: false,\n      // True if today link goes back to current selection instead\n      changeMonth: false,\n      // True if month can be selected directly, false if only prev/next\n      changeYear: false,\n      // True if year can be selected directly, false if only prev/next\n      yearRange: \"c-10:c+10\",\n      // Range of years to display in drop-down,\n      // either relative to today's year (-nn:+nn), relative to currently displayed year\n      // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\n      showOtherMonths: false,\n      // True to show dates in other months, false to leave blank\n      selectOtherMonths: false,\n      // True to allow selection of dates in other months, false for unselectable\n      showWeek: false,\n      // True to show week of the year, false to not show it\n      calculateWeek: this.iso8601Week,\n      // How to calculate the week of the year,\n      // takes a Date and returns the number of the week for it\n      shortYearCutoff: \"+10\",\n      // Short year values < this are in the current century,\n      // > this are in the previous century,\n      // string value starting with \"+\" for current year + value\n      minDate: null,\n      // The earliest selectable date, or null for no limit\n      maxDate: null,\n      // The latest selectable date, or null for no limit\n      duration: \"fast\",\n      // Duration of display/closure\n      beforeShowDay: null,\n      // Function that takes a date and returns an array with\n      // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n      // [2] = cell title (optional), e.g. $.datepicker.noWeekends\n      beforeShow: null,\n      // Function that takes an input field and\n      // returns a set of custom settings for the date picker\n      onSelect: null,\n      // Define a callback function when a date is selected\n      onChangeMonthYear: null,\n      // Define a callback function when the month or year is changed\n      onClose: null,\n      // Define a callback function when the datepicker is closed\n      numberOfMonths: 1,\n      // Number of months to show at a time\n      showCurrentAtPos: 0,\n      // The position in multipe months at which to show the current month (starting at 0)\n      stepMonths: 1,\n      // Number of months to step back/forward\n      stepBigMonths: 12,\n      // Number of months to step back/forward for the big links\n      altField: \"\",\n      // Selector for an alternate field to store selected dates into\n      altFormat: \"\",\n      // The date format to use for the alternate field\n      constrainInput: true,\n      // The input is constrained by the current date format\n      showButtonPanel: false,\n      // True to show button panel, false to not show it\n      autoSize: false,\n      // True to size the input for the date format, false to leave as is\n      disabled: false // The initial disabled state\n\n    };\n    $.extend(this._defaults, this.regional[\"\"]);\n    this.regional.en = $.extend(true, {}, this.regional[\"\"]);\n    this.regional[\"en-US\"] = $.extend(true, {}, this.regional.en);\n    this.dpDiv = datepicker_bindHover($(\"<div id='\" + this._mainDivId + \"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"));\n  }\n\n  $.extend(Datepicker.prototype, {\n    /* Class name added to elements to indicate already configured with a date picker. */\n    markerClassName: \"hasDatepicker\",\n    //Keep track of the maximum number of rows displayed (see #7043)\n    maxRows: 4,\n    // TODO rename to \"widget\" when switching to widget factory\n    _widgetDatepicker: function _widgetDatepicker() {\n      return this.dpDiv;\n    },\n\n    /* Override the default settings for all instances of the date picker.\r\n     * @param  settings  object - the new settings to use as defaults (anonymous object)\r\n     * @return the manager object\r\n     */\n    setDefaults: function setDefaults(settings) {\n      datepicker_extendRemove(this._defaults, settings || {});\n      return this;\n    },\n\n    /* Attach the date picker to a jQuery selection.\r\n     * @param  target\telement - the target input field or division or span\r\n     * @param  settings  object - the new settings to use for this date picker instance (anonymous)\r\n     */\n    _attachDatepicker: function _attachDatepicker(target, settings) {\n      var nodeName, inline, inst;\n      nodeName = target.nodeName.toLowerCase();\n      inline = nodeName === \"div\" || nodeName === \"span\";\n\n      if (!target.id) {\n        this.uuid += 1;\n        target.id = \"dp\" + this.uuid;\n      }\n\n      inst = this._newInst($(target), inline);\n      inst.settings = $.extend({}, settings || {});\n\n      if (nodeName === \"input\") {\n        this._connectDatepicker(target, inst);\n      } else if (inline) {\n        this._inlineDatepicker(target, inst);\n      }\n    },\n\n    /* Create a new instance object. */\n    _newInst: function _newInst(target, inline) {\n      var id = target[0].id.replace(/([^A-Za-z0-9_\\-])/g, \"\\\\\\\\$1\"); // escape jQuery meta chars\n\n      return {\n        id: id,\n        input: target,\n        // associated target\n        selectedDay: 0,\n        selectedMonth: 0,\n        selectedYear: 0,\n        // current selection\n        drawMonth: 0,\n        drawYear: 0,\n        // month being drawn\n        inline: inline,\n        // is datepicker inline or not\n        dpDiv: !inline ? this.dpDiv : // presentation div\n        datepicker_bindHover($(\"<div class='\" + this._inlineClass + \" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"))\n      };\n    },\n\n    /* Attach the date picker to an input field. */\n    _connectDatepicker: function _connectDatepicker(target, inst) {\n      var input = $(target);\n      inst.append = $([]);\n      inst.trigger = $([]);\n\n      if (input.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      this._attachments(input, inst);\n\n      input.addClass(this.markerClassName).on(\"keydown\", this._doKeyDown).on(\"keypress\", this._doKeyPress).on(\"keyup\", this._doKeyUp);\n\n      this._autoSize(inst);\n\n      $.data(target, \"datepicker\", inst); //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\n\n      if (inst.settings.disabled) {\n        this._disableDatepicker(target);\n      }\n    },\n\n    /* Make attachments based on settings. */\n    _attachments: function _attachments(input, inst) {\n      var showOn,\n          buttonText,\n          buttonImage,\n          appendText = this._get(inst, \"appendText\"),\n          isRTL = this._get(inst, \"isRTL\");\n\n      if (inst.append) {\n        inst.append.remove();\n      }\n\n      if (appendText) {\n        inst.append = $(\"<span class='\" + this._appendClass + \"'>\" + appendText + \"</span>\");\n        input[isRTL ? \"before\" : \"after\"](inst.append);\n      }\n\n      input.off(\"focus\", this._showDatepicker);\n\n      if (inst.trigger) {\n        inst.trigger.remove();\n      }\n\n      showOn = this._get(inst, \"showOn\");\n\n      if (showOn === \"focus\" || showOn === \"both\") {\n        // pop-up date picker when in the marked field\n        input.on(\"focus\", this._showDatepicker);\n      }\n\n      if (showOn === \"button\" || showOn === \"both\") {\n        // pop-up date picker when button clicked\n        buttonText = this._get(inst, \"buttonText\");\n        buttonImage = this._get(inst, \"buttonImage\");\n        inst.trigger = $(this._get(inst, \"buttonImageOnly\") ? $(\"<img/>\").addClass(this._triggerClass).attr({\n          src: buttonImage,\n          alt: buttonText,\n          title: buttonText\n        }) : $(\"<button type='button'></button>\").addClass(this._triggerClass).html(!buttonImage ? buttonText : $(\"<img/>\").attr({\n          src: buttonImage,\n          alt: buttonText,\n          title: buttonText\n        })));\n        input[isRTL ? \"before\" : \"after\"](inst.trigger);\n        inst.trigger.on(\"click\", function () {\n          if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {\n            $.datepicker._hideDatepicker();\n          } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {\n            $.datepicker._hideDatepicker();\n\n            $.datepicker._showDatepicker(input[0]);\n          } else {\n            $.datepicker._showDatepicker(input[0]);\n          }\n\n          return false;\n        });\n      }\n    },\n\n    /* Apply the maximum length for the date format. */\n    _autoSize: function _autoSize(inst) {\n      if (this._get(inst, \"autoSize\") && !inst.inline) {\n        var findMax,\n            max,\n            maxI,\n            i,\n            date = new Date(2009, 12 - 1, 20),\n            // Ensure double digits\n        dateFormat = this._get(inst, \"dateFormat\");\n\n        if (dateFormat.match(/[DM]/)) {\n          findMax = function findMax(names) {\n            max = 0;\n            maxI = 0;\n\n            for (i = 0; i < names.length; i++) {\n              if (names[i].length > max) {\n                max = names[i].length;\n                maxI = i;\n              }\n            }\n\n            return maxI;\n          };\n\n          date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? \"monthNames\" : \"monthNamesShort\")));\n          date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? \"dayNames\" : \"dayNamesShort\")) + 20 - date.getDay());\n        }\n\n        inst.input.attr(\"size\", this._formatDate(inst, date).length);\n      }\n    },\n\n    /* Attach an inline date picker to a div. */\n    _inlineDatepicker: function _inlineDatepicker(target, inst) {\n      var divSpan = $(target);\n\n      if (divSpan.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      divSpan.addClass(this.markerClassName).append(inst.dpDiv);\n      $.data(target, \"datepicker\", inst);\n\n      this._setDate(inst, this._getDefaultDate(inst), true);\n\n      this._updateDatepicker(inst);\n\n      this._updateAlternate(inst); //If disabled option is true, disable the datepicker before showing it (see ticket #5665)\n\n\n      if (inst.settings.disabled) {\n        this._disableDatepicker(target);\n      } // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n      // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\n\n\n      inst.dpDiv.css(\"display\", \"block\");\n    },\n\n    /* Pop-up the date picker in a \"dialog\" box.\r\n     * @param  input element - ignored\r\n     * @param  date\tstring or Date - the initial date to display\r\n     * @param  onSelect  function - the function to call when a date is selected\r\n     * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\r\n     * @param  pos int[2] - coordinates for the dialog's position within the screen or\r\n     *\t\t\t\t\tevent - with x/y coordinates or\r\n     *\t\t\t\t\tleave empty for default (screen centre)\r\n     * @return the manager object\r\n     */\n    _dialogDatepicker: function _dialogDatepicker(input, date, onSelect, settings, pos) {\n      var id,\n          browserWidth,\n          browserHeight,\n          scrollX,\n          scrollY,\n          inst = this._dialogInst; // internal instance\n\n      if (!inst) {\n        this.uuid += 1;\n        id = \"dp\" + this.uuid;\n        this._dialogInput = $(\"<input type='text' id='\" + id + \"' style='position: absolute; top: -100px; width: 0px;'/>\");\n\n        this._dialogInput.on(\"keydown\", this._doKeyDown);\n\n        $(\"body\").append(this._dialogInput);\n        inst = this._dialogInst = this._newInst(this._dialogInput, false);\n        inst.settings = {};\n        $.data(this._dialogInput[0], \"datepicker\", inst);\n      }\n\n      datepicker_extendRemove(inst.settings, settings || {});\n      date = date && date.constructor === Date ? this._formatDate(inst, date) : date;\n\n      this._dialogInput.val(date);\n\n      this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;\n\n      if (!this._pos) {\n        browserWidth = document.documentElement.clientWidth;\n        browserHeight = document.documentElement.clientHeight;\n        scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n        scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n        this._pos = // should use actual width/height below\n        [browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY];\n      } // Move input on screen for focus, but hidden behind dialog\n\n\n      this._dialogInput.css(\"left\", this._pos[0] + 20 + \"px\").css(\"top\", this._pos[1] + \"px\");\n\n      inst.settings.onSelect = onSelect;\n      this._inDialog = true;\n      this.dpDiv.addClass(this._dialogClass);\n\n      this._showDatepicker(this._dialogInput[0]);\n\n      if ($.blockUI) {\n        $.blockUI(this.dpDiv);\n      }\n\n      $.data(this._dialogInput[0], \"datepicker\", inst);\n      return this;\n    },\n\n    /* Detach a datepicker from its control.\r\n     * @param  target\telement - the target input field or division or span\r\n     */\n    _destroyDatepicker: function _destroyDatepicker(target) {\n      var nodeName,\n          $target = $(target),\n          inst = $.data(target, \"datepicker\");\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n      $.removeData(target, \"datepicker\");\n\n      if (nodeName === \"input\") {\n        inst.append.remove();\n        inst.trigger.remove();\n        $target.removeClass(this.markerClassName).off(\"focus\", this._showDatepicker).off(\"keydown\", this._doKeyDown).off(\"keypress\", this._doKeyPress).off(\"keyup\", this._doKeyUp);\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        $target.removeClass(this.markerClassName).empty();\n      }\n\n      if (datepicker_instActive === inst) {\n        datepicker_instActive = null;\n      }\n    },\n\n    /* Enable the date picker to a jQuery selection.\r\n     * @param  target\telement - the target input field or division or span\r\n     */\n    _enableDatepicker: function _enableDatepicker(target) {\n      var nodeName,\n          inline,\n          $target = $(target),\n          inst = $.data(target, \"datepicker\");\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n\n      if (nodeName === \"input\") {\n        target.disabled = false;\n        inst.trigger.filter(\"button\").each(function () {\n          this.disabled = false;\n        }).end().filter(\"img\").css({\n          opacity: \"1.0\",\n          cursor: \"\"\n        });\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        inline = $target.children(\".\" + this._inlineClass);\n        inline.children().removeClass(\"ui-state-disabled\");\n        inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", false);\n      }\n\n      this._disabledInputs = $.map(this._disabledInputs, function (value) {\n        return value === target ? null : value;\n      }); // delete entry\n    },\n\n    /* Disable the date picker to a jQuery selection.\r\n     * @param  target\telement - the target input field or division or span\r\n     */\n    _disableDatepicker: function _disableDatepicker(target) {\n      var nodeName,\n          inline,\n          $target = $(target),\n          inst = $.data(target, \"datepicker\");\n\n      if (!$target.hasClass(this.markerClassName)) {\n        return;\n      }\n\n      nodeName = target.nodeName.toLowerCase();\n\n      if (nodeName === \"input\") {\n        target.disabled = true;\n        inst.trigger.filter(\"button\").each(function () {\n          this.disabled = true;\n        }).end().filter(\"img\").css({\n          opacity: \"0.5\",\n          cursor: \"default\"\n        });\n      } else if (nodeName === \"div\" || nodeName === \"span\") {\n        inline = $target.children(\".\" + this._inlineClass);\n        inline.children().addClass(\"ui-state-disabled\");\n        inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", true);\n      }\n\n      this._disabledInputs = $.map(this._disabledInputs, function (value) {\n        return value === target ? null : value;\n      }); // delete entry\n\n      this._disabledInputs[this._disabledInputs.length] = target;\n    },\n\n    /* Is the first field in a jQuery collection disabled as a datepicker?\r\n     * @param  target\telement - the target input field or division or span\r\n     * @return boolean - true if disabled, false if enabled\r\n     */\n    _isDisabledDatepicker: function _isDisabledDatepicker(target) {\n      if (!target) {\n        return false;\n      }\n\n      for (var i = 0; i < this._disabledInputs.length; i++) {\n        if (this._disabledInputs[i] === target) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /* Retrieve the instance data for the target control.\r\n     * @param  target  element - the target input field or division or span\r\n     * @return  object - the associated instance data\r\n     * @throws  error if a jQuery problem getting data\r\n     */\n    _getInst: function _getInst(target) {\n      try {\n        return $.data(target, \"datepicker\");\n      } catch (err) {\n        throw \"Missing instance data for this datepicker\";\n      }\n    },\n\n    /* Update or retrieve the settings for a date picker attached to an input field or division.\r\n     * @param  target  element - the target input field or division or span\r\n     * @param  name\tobject - the new settings to update or\r\n     *\t\t\t\tstring - the name of the setting to change or retrieve,\r\n     *\t\t\t\twhen retrieving also \"all\" for all instance settings or\r\n     *\t\t\t\t\"defaults\" for all global defaults\r\n     * @param  value   any - the new value for the setting\r\n     *\t\t\t\t(omit if above is an object or to retrieve a value)\r\n     */\n    _optionDatepicker: function _optionDatepicker(target, name, value) {\n      var settings,\n          date,\n          minDate,\n          maxDate,\n          inst = this._getInst(target);\n\n      if (arguments.length === 2 && typeof name === \"string\") {\n        return name === \"defaults\" ? $.extend({}, $.datepicker._defaults) : inst ? name === \"all\" ? $.extend({}, inst.settings) : this._get(inst, name) : null;\n      }\n\n      settings = name || {};\n\n      if (typeof name === \"string\") {\n        settings = {};\n        settings[name] = value;\n      }\n\n      if (inst) {\n        if (this._curInst === inst) {\n          this._hideDatepicker();\n        }\n\n        date = this._getDateDatepicker(target, true);\n        minDate = this._getMinMaxDate(inst, \"min\");\n        maxDate = this._getMinMaxDate(inst, \"max\");\n        datepicker_extendRemove(inst.settings, settings); // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\n\n        if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {\n          inst.settings.minDate = this._formatDate(inst, minDate);\n        }\n\n        if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {\n          inst.settings.maxDate = this._formatDate(inst, maxDate);\n        }\n\n        if (\"disabled\" in settings) {\n          if (settings.disabled) {\n            this._disableDatepicker(target);\n          } else {\n            this._enableDatepicker(target);\n          }\n        }\n\n        this._attachments($(target), inst);\n\n        this._autoSize(inst);\n\n        this._setDate(inst, date);\n\n        this._updateAlternate(inst);\n\n        this._updateDatepicker(inst);\n      }\n    },\n    // Change method deprecated\n    _changeDatepicker: function _changeDatepicker(target, name, value) {\n      this._optionDatepicker(target, name, value);\n    },\n\n    /* Redraw the date picker attached to an input field or division.\r\n     * @param  target  element - the target input field or division or span\r\n     */\n    _refreshDatepicker: function _refreshDatepicker(target) {\n      var inst = this._getInst(target);\n\n      if (inst) {\n        this._updateDatepicker(inst);\n      }\n    },\n\n    /* Set the dates for a jQuery selection.\r\n     * @param  target element - the target input field or division or span\r\n     * @param  date\tDate - the new date\r\n     */\n    _setDateDatepicker: function _setDateDatepicker(target, date) {\n      var inst = this._getInst(target);\n\n      if (inst) {\n        this._setDate(inst, date);\n\n        this._updateDatepicker(inst);\n\n        this._updateAlternate(inst);\n      }\n    },\n\n    /* Get the date(s) for the first entry in a jQuery selection.\r\n     * @param  target element - the target input field or division or span\r\n     * @param  noDefault boolean - true if no default date is to be used\r\n     * @return Date - the current date\r\n     */\n    _getDateDatepicker: function _getDateDatepicker(target, noDefault) {\n      var inst = this._getInst(target);\n\n      if (inst && !inst.inline) {\n        this._setDateFromField(inst, noDefault);\n      }\n\n      return inst ? this._getDate(inst) : null;\n    },\n\n    /* Handle keystrokes. */\n    _doKeyDown: function _doKeyDown(event) {\n      var onSelect,\n          dateStr,\n          sel,\n          inst = $.datepicker._getInst(event.target),\n          handled = true,\n          isRTL = inst.dpDiv.is(\".ui-datepicker-rtl\");\n\n      inst._keyEvent = true;\n\n      if ($.datepicker._datepickerShowing) {\n        switch (event.keyCode) {\n          case 9:\n            $.datepicker._hideDatepicker();\n\n            handled = false;\n            break;\n          // hide on tab out\n\n          case 13:\n            sel = $(\"td.\" + $.datepicker._dayOverClass + \":not(.\" + $.datepicker._currentClass + \")\", inst.dpDiv);\n\n            if (sel[0]) {\n              $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);\n            }\n\n            onSelect = $.datepicker._get(inst, \"onSelect\");\n\n            if (onSelect) {\n              dateStr = $.datepicker._formatDate(inst); // Trigger custom callback\n\n              onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);\n            } else {\n              $.datepicker._hideDatepicker();\n            }\n\n            return false;\n          // don't submit the form\n\n          case 27:\n            $.datepicker._hideDatepicker();\n\n            break;\n          // hide on escape\n\n          case 33:\n            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\n            break;\n          // previous month/year on page up/+ ctrl\n\n          case 34:\n            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n\n            break;\n          // next month/year on page down/+ ctrl\n\n          case 35:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._clearDate(event.target);\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // clear on ctrl or command +end\n\n          case 36:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._gotoToday(event.target);\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // current on ctrl or command +home\n\n          case 37:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey; // -1 day on ctrl or command +left\n\n            if (event.originalEvent.altKey) {\n              $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, \"stepBigMonths\") : -$.datepicker._get(inst, \"stepMonths\"), \"M\");\n            } // next month/year on alt +left on Mac\n\n\n            break;\n\n          case 38:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, -7, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // -1 week on ctrl or command +up\n\n          case 39:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey; // +1 day on ctrl or command +right\n\n            if (event.originalEvent.altKey) {\n              $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, \"stepBigMonths\") : +$.datepicker._get(inst, \"stepMonths\"), \"M\");\n            } // next month/year on alt +right\n\n\n            break;\n\n          case 40:\n            if (event.ctrlKey || event.metaKey) {\n              $.datepicker._adjustDate(event.target, +7, \"D\");\n            }\n\n            handled = event.ctrlKey || event.metaKey;\n            break;\n          // +1 week on ctrl or command +down\n\n          default:\n            handled = false;\n        }\n      } else if (event.keyCode === 36 && event.ctrlKey) {\n        // display the date picker on ctrl+home\n        $.datepicker._showDatepicker(this);\n      } else {\n        handled = false;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n\n    /* Filter entered characters - based on date format. */\n    _doKeyPress: function _doKeyPress(event) {\n      var chars,\n          chr,\n          inst = $.datepicker._getInst(event.target);\n\n      if ($.datepicker._get(inst, \"constrainInput\")) {\n        chars = $.datepicker._possibleChars($.datepicker._get(inst, \"dateFormat\"));\n        chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);\n        return event.ctrlKey || event.metaKey || chr < \" \" || !chars || chars.indexOf(chr) > -1;\n      }\n    },\n\n    /* Synchronise manual entry and field/alternate field. */\n    _doKeyUp: function _doKeyUp(event) {\n      var date,\n          inst = $.datepicker._getInst(event.target);\n\n      if (inst.input.val() !== inst.lastVal) {\n        try {\n          date = $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));\n\n          if (date) {\n            // only if valid\n            $.datepicker._setDateFromField(inst);\n\n            $.datepicker._updateAlternate(inst);\n\n            $.datepicker._updateDatepicker(inst);\n          }\n        } catch (err) {}\n      }\n\n      return true;\n    },\n\n    /* Pop-up the date picker for a given input field.\r\n     * If false returned from beforeShow event handler do not show.\r\n     * @param  input  element - the input field attached to the date picker or\r\n     *\t\t\t\t\tevent - if triggered by focus\r\n     */\n    _showDatepicker: function _showDatepicker(input) {\n      input = input.target || input;\n\n      if (input.nodeName.toLowerCase() !== \"input\") {\n        // find from button/image trigger\n        input = $(\"input\", input.parentNode)[0];\n      }\n\n      if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {\n        // already here\n        return;\n      }\n\n      var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;\n      inst = $.datepicker._getInst(input);\n\n      if ($.datepicker._curInst && $.datepicker._curInst !== inst) {\n        $.datepicker._curInst.dpDiv.stop(true, true);\n\n        if (inst && $.datepicker._datepickerShowing) {\n          $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);\n        }\n      }\n\n      beforeShow = $.datepicker._get(inst, \"beforeShow\");\n      beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};\n\n      if (beforeShowSettings === false) {\n        return;\n      }\n\n      datepicker_extendRemove(inst.settings, beforeShowSettings);\n      inst.lastVal = null;\n      $.datepicker._lastInput = input;\n\n      $.datepicker._setDateFromField(inst);\n\n      if ($.datepicker._inDialog) {\n        // hide cursor\n        input.value = \"\";\n      }\n\n      if (!$.datepicker._pos) {\n        // position below input\n        $.datepicker._pos = $.datepicker._findPos(input);\n        $.datepicker._pos[1] += input.offsetHeight; // add the height\n      }\n\n      isFixed = false;\n      $(input).parents().each(function () {\n        isFixed |= $(this).css(\"position\") === \"fixed\";\n        return !isFixed;\n      });\n      offset = {\n        left: $.datepicker._pos[0],\n        top: $.datepicker._pos[1]\n      };\n      $.datepicker._pos = null; //to avoid flashes on Firefox\n\n      inst.dpDiv.empty(); // determine sizing offscreen\n\n      inst.dpDiv.css({\n        position: \"absolute\",\n        display: \"block\",\n        top: \"-1000px\"\n      });\n\n      $.datepicker._updateDatepicker(inst); // fix width for dynamic number of date pickers\n      // and adjust position before showing\n\n\n      offset = $.datepicker._checkOffset(inst, offset, isFixed);\n      inst.dpDiv.css({\n        position: $.datepicker._inDialog && $.blockUI ? \"static\" : isFixed ? \"fixed\" : \"absolute\",\n        display: \"none\",\n        left: offset.left + \"px\",\n        top: offset.top + \"px\"\n      });\n\n      if (!inst.inline) {\n        showAnim = $.datepicker._get(inst, \"showAnim\");\n        duration = $.datepicker._get(inst, \"duration\");\n        inst.dpDiv.css(\"z-index\", datepicker_getZindex($(input)) + 1);\n        $.datepicker._datepickerShowing = true;\n\n        if ($.effects && $.effects.effect[showAnim]) {\n          inst.dpDiv.show(showAnim, $.datepicker._get(inst, \"showOptions\"), duration);\n        } else {\n          inst.dpDiv[showAnim || \"show\"](showAnim ? duration : null);\n        }\n\n        if ($.datepicker._shouldFocusInput(inst)) {\n          inst.input.trigger(\"focus\");\n        }\n\n        $.datepicker._curInst = inst;\n      }\n    },\n\n    /* Generate the date picker content. */\n    _updateDatepicker: function _updateDatepicker(inst) {\n      this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\n\n      datepicker_instActive = inst; // for delegate hover events\n\n      inst.dpDiv.empty().append(this._generateHTML(inst));\n\n      this._attachHandlers(inst);\n\n      var origyearshtml,\n          numMonths = this._getNumberOfMonths(inst),\n          cols = numMonths[1],\n          width = 17,\n          activeCell = inst.dpDiv.find(\".\" + this._dayOverClass + \" a\");\n\n      if (activeCell.length > 0) {\n        datepicker_handleMouseover.apply(activeCell.get(0));\n      }\n\n      inst.dpDiv.removeClass(\"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\").width(\"\");\n\n      if (cols > 1) {\n        inst.dpDiv.addClass(\"ui-datepicker-multi-\" + cols).css(\"width\", width * cols + \"em\");\n      }\n\n      inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-multi\");\n      inst.dpDiv[(this._get(inst, \"isRTL\") ? \"add\" : \"remove\") + \"Class\"](\"ui-datepicker-rtl\");\n\n      if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {\n        inst.input.trigger(\"focus\");\n      } // Deffered render of the years select (to avoid flashes on Firefox)\n\n\n      if (inst.yearshtml) {\n        origyearshtml = inst.yearshtml;\n        setTimeout(function () {\n          //assure that inst.yearshtml didn't change.\n          if (origyearshtml === inst.yearshtml && inst.yearshtml) {\n            inst.dpDiv.find(\"select.ui-datepicker-year:first\").replaceWith(inst.yearshtml);\n          }\n\n          origyearshtml = inst.yearshtml = null;\n        }, 0);\n      }\n    },\n    // #6694 - don't focus the input if it's already focused\n    // this breaks the change event in IE\n    // Support: IE and jQuery <1.9\n    _shouldFocusInput: function _shouldFocusInput(inst) {\n      return inst.input && inst.input.is(\":visible\") && !inst.input.is(\":disabled\") && !inst.input.is(\":focus\");\n    },\n\n    /* Check positioning to remain on screen. */\n    _checkOffset: function _checkOffset(inst, offset, isFixed) {\n      var dpWidth = inst.dpDiv.outerWidth(),\n          dpHeight = inst.dpDiv.outerHeight(),\n          inputWidth = inst.input ? inst.input.outerWidth() : 0,\n          inputHeight = inst.input ? inst.input.outerHeight() : 0,\n          viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),\n          viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());\n      offset.left -= this._get(inst, \"isRTL\") ? dpWidth - inputWidth : 0;\n      offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;\n      offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0; // Now check if datepicker is showing outside window viewport - move to a better place if so.\n\n      offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);\n      offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);\n      return offset;\n    },\n\n    /* Find an object's position on the screen. */\n    _findPos: function _findPos(obj) {\n      var position,\n          inst = this._getInst(obj),\n          isRTL = this._get(inst, \"isRTL\");\n\n      while (obj && (obj.type === \"hidden\" || obj.nodeType !== 1 || $.expr.pseudos.hidden(obj))) {\n        obj = obj[isRTL ? \"previousSibling\" : \"nextSibling\"];\n      }\n\n      position = $(obj).offset();\n      return [position.left, position.top];\n    },\n\n    /* Hide the date picker from view.\r\n     * @param  input  element - the input field attached to the date picker\r\n     */\n    _hideDatepicker: function _hideDatepicker(input) {\n      var showAnim,\n          duration,\n          postProcess,\n          onClose,\n          inst = this._curInst;\n\n      if (!inst || input && inst !== $.data(input, \"datepicker\")) {\n        return;\n      }\n\n      if (this._datepickerShowing) {\n        showAnim = this._get(inst, \"showAnim\");\n        duration = this._get(inst, \"duration\");\n\n        postProcess = function postProcess() {\n          $.datepicker._tidyDialog(inst);\n        }; // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\n\n\n        if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {\n          inst.dpDiv.hide(showAnim, $.datepicker._get(inst, \"showOptions\"), duration, postProcess);\n        } else {\n          inst.dpDiv[showAnim === \"slideDown\" ? \"slideUp\" : showAnim === \"fadeIn\" ? \"fadeOut\" : \"hide\"](showAnim ? duration : null, postProcess);\n        }\n\n        if (!showAnim) {\n          postProcess();\n        }\n\n        this._datepickerShowing = false;\n        onClose = this._get(inst, \"onClose\");\n\n        if (onClose) {\n          onClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : \"\", inst]);\n        }\n\n        this._lastInput = null;\n\n        if (this._inDialog) {\n          this._dialogInput.css({\n            position: \"absolute\",\n            left: \"0\",\n            top: \"-100px\"\n          });\n\n          if ($.blockUI) {\n            $.unblockUI();\n            $(\"body\").append(this.dpDiv);\n          }\n        }\n\n        this._inDialog = false;\n      }\n    },\n\n    /* Tidy up after a dialog display. */\n    _tidyDialog: function _tidyDialog(inst) {\n      inst.dpDiv.removeClass(this._dialogClass).off(\".ui-datepicker-calendar\");\n    },\n\n    /* Close date picker if clicked elsewhere. */\n    _checkExternalClick: function _checkExternalClick(event) {\n      if (!$.datepicker._curInst) {\n        return;\n      }\n\n      var $target = $(event.target),\n          inst = $.datepicker._getInst($target[0]);\n\n      if ($target[0].id !== $.datepicker._mainDivId && $target.parents(\"#\" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest(\".\" + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {\n        $.datepicker._hideDatepicker();\n      }\n    },\n\n    /* Adjust one of the date sub-fields. */\n    _adjustDate: function _adjustDate(id, offset, period) {\n      var target = $(id),\n          inst = this._getInst(target[0]);\n\n      if (this._isDisabledDatepicker(target[0])) {\n        return;\n      }\n\n      this._adjustInstDate(inst, offset + (period === \"M\" ? this._get(inst, \"showCurrentAtPos\") : 0), // undo positioning\n      period);\n\n      this._updateDatepicker(inst);\n    },\n\n    /* Action for current link. */\n    _gotoToday: function _gotoToday(id) {\n      var date,\n          target = $(id),\n          inst = this._getInst(target[0]);\n\n      if (this._get(inst, \"gotoCurrent\") && inst.currentDay) {\n        inst.selectedDay = inst.currentDay;\n        inst.drawMonth = inst.selectedMonth = inst.currentMonth;\n        inst.drawYear = inst.selectedYear = inst.currentYear;\n      } else {\n        date = new Date();\n        inst.selectedDay = date.getDate();\n        inst.drawMonth = inst.selectedMonth = date.getMonth();\n        inst.drawYear = inst.selectedYear = date.getFullYear();\n      }\n\n      this._notifyChange(inst);\n\n      this._adjustDate(target);\n    },\n\n    /* Action for selecting a new month/year. */\n    _selectMonthYear: function _selectMonthYear(id, select, period) {\n      var target = $(id),\n          inst = this._getInst(target[0]);\n\n      inst[\"selected\" + (period === \"M\" ? \"Month\" : \"Year\")] = inst[\"draw\" + (period === \"M\" ? \"Month\" : \"Year\")] = parseInt(select.options[select.selectedIndex].value, 10);\n\n      this._notifyChange(inst);\n\n      this._adjustDate(target);\n    },\n\n    /* Action for selecting a day. */\n    _selectDay: function _selectDay(id, month, year, td) {\n      var inst,\n          target = $(id);\n\n      if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {\n        return;\n      }\n\n      inst = this._getInst(target[0]);\n      inst.selectedDay = inst.currentDay = $(\"a\", td).html();\n      inst.selectedMonth = inst.currentMonth = month;\n      inst.selectedYear = inst.currentYear = year;\n\n      this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));\n    },\n\n    /* Erase the input field and hide the date picker. */\n    _clearDate: function _clearDate(id) {\n      var target = $(id);\n\n      this._selectDate(target, \"\");\n    },\n\n    /* Update the input field with the selected date. */\n    _selectDate: function _selectDate(id, dateStr) {\n      var onSelect,\n          target = $(id),\n          inst = this._getInst(target[0]);\n\n      dateStr = dateStr != null ? dateStr : this._formatDate(inst);\n\n      if (inst.input) {\n        inst.input.val(dateStr);\n      }\n\n      this._updateAlternate(inst);\n\n      onSelect = this._get(inst, \"onSelect\");\n\n      if (onSelect) {\n        onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]); // trigger custom callback\n      } else if (inst.input) {\n        inst.input.trigger(\"change\"); // fire the change event\n      }\n\n      if (inst.inline) {\n        this._updateDatepicker(inst);\n      } else {\n        this._hideDatepicker();\n\n        this._lastInput = inst.input[0];\n\n        if (typeof inst.input[0] !== \"object\") {\n          inst.input.trigger(\"focus\"); // restore focus\n        }\n\n        this._lastInput = null;\n      }\n    },\n\n    /* Update any alternate field to synchronise with the main field. */\n    _updateAlternate: function _updateAlternate(inst) {\n      var altFormat,\n          date,\n          dateStr,\n          altField = this._get(inst, \"altField\");\n\n      if (altField) {\n        // update alternate field too\n        altFormat = this._get(inst, \"altFormat\") || this._get(inst, \"dateFormat\");\n        date = this._getDate(inst);\n        dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));\n        $(altField).val(dateStr);\n      }\n    },\n\n    /* Set as beforeShowDay function to prevent selection of weekends.\r\n     * @param  date  Date - the date to customise\r\n     * @return [boolean, string] - is this date selectable?, what is its CSS class?\r\n     */\n    noWeekends: function noWeekends(date) {\n      var day = date.getDay();\n      return [day > 0 && day < 6, \"\"];\n    },\n\n    /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\r\n     * @param  date  Date - the date to get the week for\r\n     * @return  number - the number of the week within the year that contains this date\r\n     */\n    iso8601Week: function iso8601Week(date) {\n      var time,\n          checkDate = new Date(date.getTime()); // Find Thursday of this week starting on Monday\n\n      checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n      time = checkDate.getTime();\n      checkDate.setMonth(0); // Compare with Jan 1\n\n      checkDate.setDate(1);\n      return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;\n    },\n\n    /* Parse a string value into a date object.\r\n     * See formatDate below for the possible formats.\r\n     *\r\n     * @param  format string - the expected format of the date\r\n     * @param  value string - the date in the above format\r\n     * @param  settings Object - attributes include:\r\n     *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\r\n     *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\r\n     *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\r\n     *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\r\n     *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\r\n     * @return  Date - the extracted date value or null if value is blank\r\n     */\n    parseDate: function parseDate(format, value, settings) {\n      if (format == null || value == null) {\n        throw \"Invalid arguments\";\n      }\n\n      value = typeof value === \"object\" ? value.toString() : value + \"\";\n\n      if (value === \"\") {\n        return null;\n      }\n\n      var iFormat,\n          dim,\n          extra,\n          iValue = 0,\n          shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,\n          shortYearCutoff = typeof shortYearCutoffTemp !== \"string\" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10),\n          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n          year = -1,\n          month = -1,\n          day = -1,\n          doy = -1,\n          literal = false,\n          date,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      },\n          // Extract a number from the string value\n      getNumber = function getNumber(match) {\n        var isDoubled = lookAhead(match),\n            size = match === \"@\" ? 14 : match === \"!\" ? 20 : match === \"y\" && isDoubled ? 4 : match === \"o\" ? 3 : 2,\n            minSize = match === \"y\" ? size : 1,\n            digits = new RegExp(\"^\\\\d{\" + minSize + \",\" + size + \"}\"),\n            num = value.substring(iValue).match(digits);\n\n        if (!num) {\n          throw \"Missing number at position \" + iValue;\n        }\n\n        iValue += num[0].length;\n        return parseInt(num[0], 10);\n      },\n          // Extract a name from the string value and convert to an index\n      getName = function getName(match, shortNames, longNames) {\n        var index = -1,\n            names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {\n          return [[k, v]];\n        }).sort(function (a, b) {\n          return -(a[1].length - b[1].length);\n        });\n        $.each(names, function (i, pair) {\n          var name = pair[1];\n\n          if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {\n            index = pair[0];\n            iValue += name.length;\n            return false;\n          }\n        });\n\n        if (index !== -1) {\n          return index + 1;\n        } else {\n          throw \"Unknown name at position \" + iValue;\n        }\n      },\n          // Confirm that a literal character matches the string value\n      checkLiteral = function checkLiteral() {\n        if (value.charAt(iValue) !== format.charAt(iFormat)) {\n          throw \"Unexpected literal at position \" + iValue;\n        }\n\n        iValue++;\n      };\n\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n            literal = false;\n          } else {\n            checkLiteral();\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case \"d\":\n              day = getNumber(\"d\");\n              break;\n\n            case \"D\":\n              getName(\"D\", dayNamesShort, dayNames);\n              break;\n\n            case \"o\":\n              doy = getNumber(\"o\");\n              break;\n\n            case \"m\":\n              month = getNumber(\"m\");\n              break;\n\n            case \"M\":\n              month = getName(\"M\", monthNamesShort, monthNames);\n              break;\n\n            case \"y\":\n              year = getNumber(\"y\");\n              break;\n\n            case \"@\":\n              date = new Date(getNumber(\"@\"));\n              year = date.getFullYear();\n              month = date.getMonth() + 1;\n              day = date.getDate();\n              break;\n\n            case \"!\":\n              date = new Date((getNumber(\"!\") - this._ticksTo1970) / 10000);\n              year = date.getFullYear();\n              month = date.getMonth() + 1;\n              day = date.getDate();\n              break;\n\n            case \"'\":\n              if (lookAhead(\"'\")) {\n                checkLiteral();\n              } else {\n                literal = true;\n              }\n\n              break;\n\n            default:\n              checkLiteral();\n          }\n        }\n      }\n\n      if (iValue < value.length) {\n        extra = value.substr(iValue);\n\n        if (!/^\\s+/.test(extra)) {\n          throw \"Extra/unparsed characters found in date: \" + extra;\n        }\n      }\n\n      if (year === -1) {\n        year = new Date().getFullYear();\n      } else if (year < 100) {\n        year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);\n      }\n\n      if (doy > -1) {\n        month = 1;\n        day = doy;\n\n        do {\n          dim = this._getDaysInMonth(year, month - 1);\n\n          if (day <= dim) {\n            break;\n          }\n\n          month++;\n          day -= dim;\n        } while (true);\n      }\n\n      date = this._daylightSavingAdjust(new Date(year, month - 1, day));\n\n      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n        throw \"Invalid date\"; // E.g. 31/02/00\n      }\n\n      return date;\n    },\n\n    /* Standard date formats. */\n    ATOM: \"yy-mm-dd\",\n    // RFC 3339 (ISO 8601)\n    COOKIE: \"D, dd M yy\",\n    ISO_8601: \"yy-mm-dd\",\n    RFC_822: \"D, d M y\",\n    RFC_850: \"DD, dd-M-y\",\n    RFC_1036: \"D, d M y\",\n    RFC_1123: \"D, d M yy\",\n    RFC_2822: \"D, d M yy\",\n    RSS: \"D, d M y\",\n    // RFC 822\n    TICKS: \"!\",\n    TIMESTAMP: \"@\",\n    W3C: \"yy-mm-dd\",\n    // ISO 8601\n    _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000,\n\n    /* Format a date object into a string value.\r\n     * The format can be combinations of the following:\r\n     * d  - day of month (no leading zero)\r\n     * dd - day of month (two digit)\r\n     * o  - day of year (no leading zeros)\r\n     * oo - day of year (three digit)\r\n     * D  - day name short\r\n     * DD - day name long\r\n     * m  - month of year (no leading zero)\r\n     * mm - month of year (two digit)\r\n     * M  - month name short\r\n     * MM - month name long\r\n     * y  - year (two digit)\r\n     * yy - year (four digit)\r\n     * @ - Unix timestamp (ms since 01/01/1970)\r\n     * ! - Windows ticks (100ns since 01/01/0001)\r\n     * \"...\" - literal text\r\n     * '' - single quote\r\n     *\r\n     * @param  format string - the desired format of the date\r\n     * @param  date Date - the date value to format\r\n     * @param  settings Object - attributes include:\r\n     *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\r\n     *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\r\n     *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\r\n     *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\r\n     * @return  string - the date in the above format\r\n     */\n    formatDate: function formatDate(format, date, settings) {\n      if (!date) {\n        return \"\";\n      }\n\n      var iFormat,\n          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      },\n          // Format a number, with leading zero if necessary\n      formatNumber = function formatNumber(match, value, len) {\n        var num = \"\" + value;\n\n        if (lookAhead(match)) {\n          while (num.length < len) {\n            num = \"0\" + num;\n          }\n        }\n\n        return num;\n      },\n          // Format a name, short or long as requested\n      formatName = function formatName(match, value, shortNames, longNames) {\n        return lookAhead(match) ? longNames[value] : shortNames[value];\n      },\n          output = \"\",\n          literal = false;\n\n      if (date) {\n        for (iFormat = 0; iFormat < format.length; iFormat++) {\n          if (literal) {\n            if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n              literal = false;\n            } else {\n              output += format.charAt(iFormat);\n            }\n          } else {\n            switch (format.charAt(iFormat)) {\n              case \"d\":\n                output += formatNumber(\"d\", date.getDate(), 2);\n                break;\n\n              case \"D\":\n                output += formatName(\"D\", date.getDay(), dayNamesShort, dayNames);\n                break;\n\n              case \"o\":\n                output += formatNumber(\"o\", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n                break;\n\n              case \"m\":\n                output += formatNumber(\"m\", date.getMonth() + 1, 2);\n                break;\n\n              case \"M\":\n                output += formatName(\"M\", date.getMonth(), monthNamesShort, monthNames);\n                break;\n\n              case \"y\":\n                output += lookAhead(\"y\") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? \"0\" : \"\") + date.getFullYear() % 100;\n                break;\n\n              case \"@\":\n                output += date.getTime();\n                break;\n\n              case \"!\":\n                output += date.getTime() * 10000 + this._ticksTo1970;\n                break;\n\n              case \"'\":\n                if (lookAhead(\"'\")) {\n                  output += \"'\";\n                } else {\n                  literal = true;\n                }\n\n                break;\n\n              default:\n                output += format.charAt(iFormat);\n            }\n          }\n        }\n      }\n\n      return output;\n    },\n\n    /* Extract all possible characters from the date format. */\n    _possibleChars: function _possibleChars(format) {\n      var iFormat,\n          chars = \"\",\n          literal = false,\n          // Check whether a format character is doubled\n      lookAhead = function lookAhead(match) {\n        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n        if (matches) {\n          iFormat++;\n        }\n\n        return matches;\n      };\n\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n            literal = false;\n          } else {\n            chars += format.charAt(iFormat);\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case \"d\":\n            case \"m\":\n            case \"y\":\n            case \"@\":\n              chars += \"0123456789\";\n              break;\n\n            case \"D\":\n            case \"M\":\n              return null;\n            // Accept anything\n\n            case \"'\":\n              if (lookAhead(\"'\")) {\n                chars += \"'\";\n              } else {\n                literal = true;\n              }\n\n              break;\n\n            default:\n              chars += format.charAt(iFormat);\n          }\n        }\n      }\n\n      return chars;\n    },\n\n    /* Get a setting value, defaulting if necessary. */\n    _get: function _get(inst, name) {\n      return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];\n    },\n\n    /* Parse existing date and initialise date picker. */\n    _setDateFromField: function _setDateFromField(inst, noDefault) {\n      if (inst.input.val() === inst.lastVal) {\n        return;\n      }\n\n      var dateFormat = this._get(inst, \"dateFormat\"),\n          dates = inst.lastVal = inst.input ? inst.input.val() : null,\n          defaultDate = this._getDefaultDate(inst),\n          date = defaultDate,\n          settings = this._getFormatConfig(inst);\n\n      try {\n        date = this.parseDate(dateFormat, dates, settings) || defaultDate;\n      } catch (event) {\n        dates = noDefault ? \"\" : dates;\n      }\n\n      inst.selectedDay = date.getDate();\n      inst.drawMonth = inst.selectedMonth = date.getMonth();\n      inst.drawYear = inst.selectedYear = date.getFullYear();\n      inst.currentDay = dates ? date.getDate() : 0;\n      inst.currentMonth = dates ? date.getMonth() : 0;\n      inst.currentYear = dates ? date.getFullYear() : 0;\n\n      this._adjustInstDate(inst);\n    },\n\n    /* Retrieve the default date shown on opening. */\n    _getDefaultDate: function _getDefaultDate(inst) {\n      return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, \"defaultDate\"), new Date()));\n    },\n\n    /* A date may be specified as an exact value or a relative one. */\n    _determineDate: function _determineDate(inst, date, defaultDate) {\n      var offsetNumeric = function offsetNumeric(offset) {\n        var date = new Date();\n        date.setDate(date.getDate() + offset);\n        return date;\n      },\n          offsetString = function offsetString(offset) {\n        try {\n          return $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"), offset, $.datepicker._getFormatConfig(inst));\n        } catch (e) {// Ignore\n        }\n\n        var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(),\n            year = date.getFullYear(),\n            month = date.getMonth(),\n            day = date.getDate(),\n            pattern = /([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,\n            matches = pattern.exec(offset);\n\n        while (matches) {\n          switch (matches[2] || \"d\") {\n            case \"d\":\n            case \"D\":\n              day += parseInt(matches[1], 10);\n              break;\n\n            case \"w\":\n            case \"W\":\n              day += parseInt(matches[1], 10) * 7;\n              break;\n\n            case \"m\":\n            case \"M\":\n              month += parseInt(matches[1], 10);\n              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n              break;\n\n            case \"y\":\n            case \"Y\":\n              year += parseInt(matches[1], 10);\n              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n              break;\n          }\n\n          matches = pattern.exec(offset);\n        }\n\n        return new Date(year, month, day);\n      },\n          newDate = date == null || date === \"\" ? defaultDate : typeof date === \"string\" ? offsetString(date) : typeof date === \"number\" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());\n\n      newDate = newDate && newDate.toString() === \"Invalid Date\" ? defaultDate : newDate;\n\n      if (newDate) {\n        newDate.setHours(0);\n        newDate.setMinutes(0);\n        newDate.setSeconds(0);\n        newDate.setMilliseconds(0);\n      }\n\n      return this._daylightSavingAdjust(newDate);\n    },\n\n    /* Handle switch to/from daylight saving.\r\n     * Hours may be non-zero on daylight saving cut-over:\r\n     * > 12 when midnight changeover, but then cannot generate\r\n     * midnight datetime, so jump to 1AM, otherwise reset.\r\n     * @param  date  (Date) the date to check\r\n     * @return  (Date) the corrected date\r\n     */\n    _daylightSavingAdjust: function _daylightSavingAdjust(date) {\n      if (!date) {\n        return null;\n      }\n\n      date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n      return date;\n    },\n\n    /* Set the date(s) directly. */\n    _setDate: function _setDate(inst, date, noChange) {\n      var clear = !date,\n          origMonth = inst.selectedMonth,\n          origYear = inst.selectedYear,\n          newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));\n\n      inst.selectedDay = inst.currentDay = newDate.getDate();\n      inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\n      inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\n\n      if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {\n        this._notifyChange(inst);\n      }\n\n      this._adjustInstDate(inst);\n\n      if (inst.input) {\n        inst.input.val(clear ? \"\" : this._formatDate(inst));\n      }\n    },\n\n    /* Retrieve the date(s) directly. */\n    _getDate: function _getDate(inst) {\n      var startDate = !inst.currentYear || inst.input && inst.input.val() === \"\" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n      return startDate;\n    },\n\n    /* Attach the onxxx handlers.  These are declared statically so\r\n     * they work with static code transformers like Caja.\r\n     */\n    _attachHandlers: function _attachHandlers(inst) {\n      var stepMonths = this._get(inst, \"stepMonths\"),\n          id = \"#\" + inst.id.replace(/\\\\\\\\/g, \"\\\\\");\n\n      inst.dpDiv.find(\"[data-handler]\").map(function () {\n        var handler = {\n          prev: function prev() {\n            $.datepicker._adjustDate(id, -stepMonths, \"M\");\n          },\n          next: function next() {\n            $.datepicker._adjustDate(id, +stepMonths, \"M\");\n          },\n          hide: function hide() {\n            $.datepicker._hideDatepicker();\n          },\n          today: function today() {\n            $.datepicker._gotoToday(id);\n          },\n          selectDay: function selectDay() {\n            $.datepicker._selectDay(id, +this.getAttribute(\"data-month\"), +this.getAttribute(\"data-year\"), this);\n\n            return false;\n          },\n          selectMonth: function selectMonth() {\n            $.datepicker._selectMonthYear(id, this, \"M\");\n\n            return false;\n          },\n          selectYear: function selectYear() {\n            $.datepicker._selectMonthYear(id, this, \"Y\");\n\n            return false;\n          }\n        };\n        $(this).on(this.getAttribute(\"data-event\"), handler[this.getAttribute(\"data-handler\")]);\n      });\n    },\n\n    /* Generate the HTML for the current state of the date picker. */\n    _generateHTML: function _generateHTML(inst) {\n      var maxDraw,\n          prevText,\n          prev,\n          nextText,\n          next,\n          currentText,\n          gotoDate,\n          controls,\n          buttonPanel,\n          firstDay,\n          showWeek,\n          dayNames,\n          dayNamesMin,\n          monthNames,\n          monthNamesShort,\n          beforeShowDay,\n          showOtherMonths,\n          selectOtherMonths,\n          defaultDate,\n          html,\n          dow,\n          row,\n          group,\n          col,\n          selectedDate,\n          cornerClass,\n          calender,\n          thead,\n          day,\n          daysInMonth,\n          leadDays,\n          curRows,\n          numRows,\n          printDate,\n          dRow,\n          tbody,\n          daySettings,\n          otherMonth,\n          unselectable,\n          tempDate = new Date(),\n          today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())),\n          // clear time\n      isRTL = this._get(inst, \"isRTL\"),\n          showButtonPanel = this._get(inst, \"showButtonPanel\"),\n          hideIfNoPrevNext = this._get(inst, \"hideIfNoPrevNext\"),\n          navigationAsDateFormat = this._get(inst, \"navigationAsDateFormat\"),\n          numMonths = this._getNumberOfMonths(inst),\n          showCurrentAtPos = this._get(inst, \"showCurrentAtPos\"),\n          stepMonths = this._get(inst, \"stepMonths\"),\n          isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1,\n          currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\n          minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          drawMonth = inst.drawMonth - showCurrentAtPos,\n          drawYear = inst.drawYear;\n\n      if (drawMonth < 0) {\n        drawMonth += 12;\n        drawYear--;\n      }\n\n      if (maxDate) {\n        maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\n        maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\n\n        while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\n          drawMonth--;\n\n          if (drawMonth < 0) {\n            drawMonth = 11;\n            drawYear--;\n          }\n        }\n      }\n\n      inst.drawMonth = drawMonth;\n      inst.drawYear = drawYear;\n      prevText = this._get(inst, \"prevText\");\n      prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));\n      prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? \"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'\" + \" title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\";\n      nextText = this._get(inst, \"nextText\");\n      nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));\n      next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? \"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'\" + \" title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\" : hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\";\n      currentText = this._get(inst, \"currentText\");\n      gotoDate = this._get(inst, \"gotoCurrent\") && inst.currentDay ? currentDate : today;\n      currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\n      controls = !inst.inline ? \"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>\" + this._get(inst, \"closeText\") + \"</button>\" : \"\";\n      buttonPanel = showButtonPanel ? \"<div class='ui-datepicker-buttonpane ui-widget-content'>\" + (isRTL ? controls : \"\") + (this._isInRange(inst, gotoDate) ? \"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'\" + \">\" + currentText + \"</button>\" : \"\") + (isRTL ? \"\" : controls) + \"</div>\" : \"\";\n      firstDay = parseInt(this._get(inst, \"firstDay\"), 10);\n      firstDay = isNaN(firstDay) ? 0 : firstDay;\n      showWeek = this._get(inst, \"showWeek\");\n      dayNames = this._get(inst, \"dayNames\");\n      dayNamesMin = this._get(inst, \"dayNamesMin\");\n      monthNames = this._get(inst, \"monthNames\");\n      monthNamesShort = this._get(inst, \"monthNamesShort\");\n      beforeShowDay = this._get(inst, \"beforeShowDay\");\n      showOtherMonths = this._get(inst, \"showOtherMonths\");\n      selectOtherMonths = this._get(inst, \"selectOtherMonths\");\n      defaultDate = this._getDefaultDate(inst);\n      html = \"\";\n\n      for (row = 0; row < numMonths[0]; row++) {\n        group = \"\";\n        this.maxRows = 4;\n\n        for (col = 0; col < numMonths[1]; col++) {\n          selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\n          cornerClass = \" ui-corner-all\";\n          calender = \"\";\n\n          if (isMultiMonth) {\n            calender += \"<div class='ui-datepicker-group\";\n\n            if (numMonths[1] > 1) {\n              switch (col) {\n                case 0:\n                  calender += \" ui-datepicker-group-first\";\n                  cornerClass = \" ui-corner-\" + (isRTL ? \"right\" : \"left\");\n                  break;\n\n                case numMonths[1] - 1:\n                  calender += \" ui-datepicker-group-last\";\n                  cornerClass = \" ui-corner-\" + (isRTL ? \"left\" : \"right\");\n                  break;\n\n                default:\n                  calender += \" ui-datepicker-group-middle\";\n                  cornerClass = \"\";\n                  break;\n              }\n            }\n\n            calender += \"'>\";\n          }\n\n          calender += \"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\" + cornerClass + \"'>\" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : \"\") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : \"\") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\n          \"</div><table class='ui-datepicker-calendar'><thead>\" + \"<tr>\";\n          thead = showWeek ? \"<th class='ui-datepicker-week-col'>\" + this._get(inst, \"weekHeader\") + \"</th>\" : \"\";\n\n          for (dow = 0; dow < 7; dow++) {\n            // days of the week\n            day = (dow + firstDay) % 7;\n            thead += \"<th scope='col'\" + ((dow + firstDay + 6) % 7 >= 5 ? \" class='ui-datepicker-week-end'\" : \"\") + \">\" + \"<span title='\" + dayNames[day] + \"'>\" + dayNamesMin[day] + \"</span></th>\";\n          }\n\n          calender += thead + \"</tr></thead><tbody>\";\n          daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\n\n          if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\n            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\n          }\n\n          leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\n          curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\n\n          numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows; //If multiple months, use the higher number of rows (see #7043)\n\n          this.maxRows = numRows;\n          printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\n\n          for (dRow = 0; dRow < numRows; dRow++) {\n            // create date picker rows\n            calender += \"<tr>\";\n            tbody = !showWeek ? \"\" : \"<td class='ui-datepicker-week-col'>\" + this._get(inst, \"calculateWeek\")(printDate) + \"</td>\";\n\n            for (dow = 0; dow < 7; dow++) {\n              // create date picker days\n              daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, \"\"];\n              otherMonth = printDate.getMonth() !== drawMonth;\n              unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;\n              tbody += \"<td class='\" + ((dow + firstDay + 6) % 7 >= 5 ? \" ui-datepicker-week-end\" : \"\") + ( // highlight weekends\n              otherMonth ? \" ui-datepicker-other-month\" : \"\") + ( // highlight days from other months\n              printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\n              defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? // or defaultDate is current printedDate and defaultDate is selectedDate\n              \" \" + this._dayOverClass : \"\") + ( // highlight selected day\n              unselectable ? \" \" + this._unselectableClass + \" ui-state-disabled\" : \"\") + ( // highlight unselectable days\n              otherMonth && !showOtherMonths ? \"\" : \" \" + daySettings[1] + ( // highlight custom dates\n              printDate.getTime() === currentDate.getTime() ? \" \" + this._currentClass : \"\") + ( // highlight selected day\n              printDate.getTime() === today.getTime() ? \" ui-datepicker-today\" : \"\")) + \"'\" + ( // highlight today (if different)\n              (!otherMonth || showOtherMonths) && daySettings[2] ? \" title='\" + daySettings[2].replace(/'/g, \"&#39;\") + \"'\" : \"\") + ( // cell title\n              unselectable ? \"\" : \" data-handler='selectDay' data-event='click' data-month='\" + printDate.getMonth() + \"' data-year='\" + printDate.getFullYear() + \"'\") + \">\" + ( // actions\n              otherMonth && !showOtherMonths ? \"&#xa0;\" : // display for other months\n              unselectable ? \"<span class='ui-state-default'>\" + printDate.getDate() + \"</span>\" : \"<a class='ui-state-default\" + (printDate.getTime() === today.getTime() ? \" ui-state-highlight\" : \"\") + (printDate.getTime() === currentDate.getTime() ? \" ui-state-active\" : \"\") + ( // highlight selected day\n              otherMonth ? \" ui-priority-secondary\" : \"\") + // distinguish dates from other months\n              \"' href='#'>\" + printDate.getDate() + \"</a>\") + \"</td>\"; // display selectable date\n\n              printDate.setDate(printDate.getDate() + 1);\n              printDate = this._daylightSavingAdjust(printDate);\n            }\n\n            calender += tbody + \"</tr>\";\n          }\n\n          drawMonth++;\n\n          if (drawMonth > 11) {\n            drawMonth = 0;\n            drawYear++;\n          }\n\n          calender += \"</tbody></table>\" + (isMultiMonth ? \"</div>\" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? \"<div class='ui-datepicker-row-break'></div>\" : \"\") : \"\");\n          group += calender;\n        }\n\n        html += group;\n      }\n\n      html += buttonPanel;\n      inst._keyEvent = false;\n      return html;\n    },\n\n    /* Generate the month and year header. */\n    _generateMonthYearHeader: function _generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {\n      var inMinYear,\n          inMaxYear,\n          month,\n          years,\n          thisYear,\n          determineYear,\n          year,\n          endYear,\n          changeMonth = this._get(inst, \"changeMonth\"),\n          changeYear = this._get(inst, \"changeYear\"),\n          showMonthAfterYear = this._get(inst, \"showMonthAfterYear\"),\n          html = \"<div class='ui-datepicker-title'>\",\n          monthHtml = \"\"; // Month selection\n\n\n      if (secondary || !changeMonth) {\n        monthHtml += \"<span class='ui-datepicker-month'>\" + monthNames[drawMonth] + \"</span>\";\n      } else {\n        inMinYear = minDate && minDate.getFullYear() === drawYear;\n        inMaxYear = maxDate && maxDate.getFullYear() === drawYear;\n        monthHtml += \"<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>\";\n\n        for (month = 0; month < 12; month++) {\n          if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {\n            monthHtml += \"<option value='\" + month + \"'\" + (month === drawMonth ? \" selected='selected'\" : \"\") + \">\" + monthNamesShort[month] + \"</option>\";\n          }\n        }\n\n        monthHtml += \"</select>\";\n      }\n\n      if (!showMonthAfterYear) {\n        html += monthHtml + (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\");\n      } // Year selection\n\n\n      if (!inst.yearshtml) {\n        inst.yearshtml = \"\";\n\n        if (secondary || !changeYear) {\n          html += \"<span class='ui-datepicker-year'>\" + drawYear + \"</span>\";\n        } else {\n          // determine range of years to display\n          years = this._get(inst, \"yearRange\").split(\":\");\n          thisYear = new Date().getFullYear();\n\n          determineYear = function determineYear(value) {\n            var year = value.match(/c[+\\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);\n            return isNaN(year) ? thisYear : year;\n          };\n\n          year = determineYear(years[0]);\n          endYear = Math.max(year, determineYear(years[1] || \"\"));\n          year = minDate ? Math.max(year, minDate.getFullYear()) : year;\n          endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;\n          inst.yearshtml += \"<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>\";\n\n          for (; year <= endYear; year++) {\n            inst.yearshtml += \"<option value='\" + year + \"'\" + (year === drawYear ? \" selected='selected'\" : \"\") + \">\" + year + \"</option>\";\n          }\n\n          inst.yearshtml += \"</select>\";\n          html += inst.yearshtml;\n          inst.yearshtml = null;\n        }\n      }\n\n      html += this._get(inst, \"yearSuffix\");\n\n      if (showMonthAfterYear) {\n        html += (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\") + monthHtml;\n      }\n\n      html += \"</div>\"; // Close datepicker_header\n\n      return html;\n    },\n\n    /* Adjust one of the date sub-fields. */\n    _adjustInstDate: function _adjustInstDate(inst, offset, period) {\n      var year = inst.selectedYear + (period === \"Y\" ? offset : 0),\n          month = inst.selectedMonth + (period === \"M\" ? offset : 0),\n          day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === \"D\" ? offset : 0),\n          date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));\n\n      inst.selectedDay = date.getDate();\n      inst.drawMonth = inst.selectedMonth = date.getMonth();\n      inst.drawYear = inst.selectedYear = date.getFullYear();\n\n      if (period === \"M\" || period === \"Y\") {\n        this._notifyChange(inst);\n      }\n    },\n\n    /* Ensure a date is within any min/max bounds. */\n    _restrictMinMax: function _restrictMinMax(inst, date) {\n      var minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          newDate = minDate && date < minDate ? minDate : date;\n\n      return maxDate && newDate > maxDate ? maxDate : newDate;\n    },\n\n    /* Notify change of month/year. */\n    _notifyChange: function _notifyChange(inst) {\n      var onChange = this._get(inst, \"onChangeMonthYear\");\n\n      if (onChange) {\n        onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);\n      }\n    },\n\n    /* Determine the number of months to show. */\n    _getNumberOfMonths: function _getNumberOfMonths(inst) {\n      var numMonths = this._get(inst, \"numberOfMonths\");\n\n      return numMonths == null ? [1, 1] : typeof numMonths === \"number\" ? [1, numMonths] : numMonths;\n    },\n\n    /* Determine the current maximum date - ensure no time components are set. */\n    _getMinMaxDate: function _getMinMaxDate(inst, minMax) {\n      return this._determineDate(inst, this._get(inst, minMax + \"Date\"), null);\n    },\n\n    /* Find the number of days in a given month. */\n    _getDaysInMonth: function _getDaysInMonth(year, month) {\n      return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();\n    },\n\n    /* Find the day of the week of the first of a month. */\n    _getFirstDayOfMonth: function _getFirstDayOfMonth(year, month) {\n      return new Date(year, month, 1).getDay();\n    },\n\n    /* Determines if we should allow a \"next/prev\" month display change. */\n    _canAdjustMonth: function _canAdjustMonth(inst, offset, curYear, curMonth) {\n      var numMonths = this._getNumberOfMonths(inst),\n          date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));\n\n      if (offset < 0) {\n        date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));\n      }\n\n      return this._isInRange(inst, date);\n    },\n\n    /* Is the given date in the accepted range? */\n    _isInRange: function _isInRange(inst, date) {\n      var yearSplit,\n          currentYear,\n          minDate = this._getMinMaxDate(inst, \"min\"),\n          maxDate = this._getMinMaxDate(inst, \"max\"),\n          minYear = null,\n          maxYear = null,\n          years = this._get(inst, \"yearRange\");\n\n      if (years) {\n        yearSplit = years.split(\":\");\n        currentYear = new Date().getFullYear();\n        minYear = parseInt(yearSplit[0], 10);\n        maxYear = parseInt(yearSplit[1], 10);\n\n        if (yearSplit[0].match(/[+\\-].*/)) {\n          minYear += currentYear;\n        }\n\n        if (yearSplit[1].match(/[+\\-].*/)) {\n          maxYear += currentYear;\n        }\n      }\n\n      return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);\n    },\n\n    /* Provide the configuration settings for formatting/parsing. */\n    _getFormatConfig: function _getFormatConfig(inst) {\n      var shortYearCutoff = this._get(inst, \"shortYearCutoff\");\n\n      shortYearCutoff = typeof shortYearCutoff !== \"string\" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);\n      return {\n        shortYearCutoff: shortYearCutoff,\n        dayNamesShort: this._get(inst, \"dayNamesShort\"),\n        dayNames: this._get(inst, \"dayNames\"),\n        monthNamesShort: this._get(inst, \"monthNamesShort\"),\n        monthNames: this._get(inst, \"monthNames\")\n      };\n    },\n\n    /* Format the given date for display. */\n    _formatDate: function _formatDate(inst, day, month, year) {\n      if (!day) {\n        inst.currentDay = inst.selectedDay;\n        inst.currentMonth = inst.selectedMonth;\n        inst.currentYear = inst.selectedYear;\n      }\n\n      var date = day ? typeof day === \"object\" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));\n      return this.formatDate(this._get(inst, \"dateFormat\"), date, this._getFormatConfig(inst));\n    }\n  });\n  /*\r\n   * Bind hover events for datepicker elements.\r\n   * Done via delegate so the binding only occurs once in the lifetime of the parent div.\r\n   * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\r\n   */\n\n  function datepicker_bindHover(dpDiv) {\n    var selector = \"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";\n    return dpDiv.on(\"mouseout\", selector, function () {\n      $(this).removeClass(\"ui-state-hover\");\n\n      if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n        $(this).removeClass(\"ui-datepicker-prev-hover\");\n      }\n\n      if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n        $(this).removeClass(\"ui-datepicker-next-hover\");\n      }\n    }).on(\"mouseover\", selector, datepicker_handleMouseover);\n  }\n\n  function datepicker_handleMouseover() {\n    if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {\n      $(this).parents(\".ui-datepicker-calendar\").find(\"a\").removeClass(\"ui-state-hover\");\n      $(this).addClass(\"ui-state-hover\");\n\n      if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n        $(this).addClass(\"ui-datepicker-prev-hover\");\n      }\n\n      if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n        $(this).addClass(\"ui-datepicker-next-hover\");\n      }\n    }\n  }\n  /* jQuery extend now ignores nulls! */\n\n\n  function datepicker_extendRemove(target, props) {\n    $.extend(target, props);\n\n    for (var name in props) {\n      if (props[name] == null) {\n        target[name] = props[name];\n      }\n    }\n\n    return target;\n  }\n  /* Invoke the datepicker functionality.\r\n     @param  options  string - a command, optionally followed by additional parameters or\r\n  \t\t\t\t\tObject - settings for attaching new datepicker functionality\r\n     @return  jQuery object */\n\n\n  $.fn.datepicker = function (options) {\n    /* Verify an empty collection wasn't passed - Fixes #6976 */\n    if (!this.length) {\n      return this;\n    }\n    /* Initialise the date picker. */\n\n\n    if (!$.datepicker.initialized) {\n      $(document).on(\"mousedown\", $.datepicker._checkExternalClick);\n      $.datepicker.initialized = true;\n    }\n    /* Append datepicker main container to body if not exist. */\n\n\n    if ($(\"#\" + $.datepicker._mainDivId).length === 0) {\n      $(\"body\").append($.datepicker.dpDiv);\n    }\n\n    var otherArgs = Array.prototype.slice.call(arguments, 1);\n\n    if (typeof options === \"string\" && (options === \"isDisabled\" || options === \"getDate\" || options === \"widget\")) {\n      return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n    }\n\n    if (options === \"option\" && arguments.length === 2 && typeof arguments[1] === \"string\") {\n      return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n    }\n\n    return this.each(function () {\n      typeof options === \"string\" ? $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);\n    });\n  };\n\n  $.datepicker = new Datepicker(); // singleton instance\n\n  $.datepicker.initialized = false;\n  $.datepicker.uuid = new Date().getTime();\n  $.datepicker.version = \"1.12.1\";\n  var widgetsDatepicker = $.datepicker;\n  /*!\r\n   * jQuery UI Dialog 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Dialog\n  //>>group: Widgets\n  //>>description: Displays customizable dialog windows.\n  //>>docs: http://api.jqueryui.com/dialog/\n  //>>demos: http://jqueryui.com/dialog/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/dialog.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.widget(\"ui.dialog\", {\n    version: \"1.12.1\",\n    options: {\n      appendTo: \"body\",\n      autoOpen: true,\n      buttons: [],\n      classes: {\n        \"ui-dialog\": \"ui-corner-all\",\n        \"ui-dialog-titlebar\": \"ui-corner-all\"\n      },\n      closeOnEscape: true,\n      closeText: \"Close\",\n      draggable: true,\n      hide: null,\n      height: \"auto\",\n      maxHeight: null,\n      maxWidth: null,\n      minHeight: 150,\n      minWidth: 150,\n      modal: false,\n      position: {\n        my: \"center\",\n        at: \"center\",\n        of: window,\n        collision: \"fit\",\n        // Ensure the titlebar is always visible\n        using: function using(pos) {\n          var topOffset = $(this).css(pos).offset().top;\n\n          if (topOffset < 0) {\n            $(this).css(\"top\", pos.top - topOffset);\n          }\n        }\n      },\n      resizable: true,\n      show: null,\n      title: null,\n      width: 300,\n      // Callbacks\n      beforeClose: null,\n      close: null,\n      drag: null,\n      dragStart: null,\n      dragStop: null,\n      focus: null,\n      open: null,\n      resize: null,\n      resizeStart: null,\n      resizeStop: null\n    },\n    sizeRelatedOptions: {\n      buttons: true,\n      height: true,\n      maxHeight: true,\n      maxWidth: true,\n      minHeight: true,\n      minWidth: true,\n      width: true\n    },\n    resizableRelatedOptions: {\n      maxHeight: true,\n      maxWidth: true,\n      minHeight: true,\n      minWidth: true\n    },\n    _create: function _create() {\n      this.originalCss = {\n        display: this.element[0].style.display,\n        width: this.element[0].style.width,\n        minHeight: this.element[0].style.minHeight,\n        maxHeight: this.element[0].style.maxHeight,\n        height: this.element[0].style.height\n      };\n      this.originalPosition = {\n        parent: this.element.parent(),\n        index: this.element.parent().children().index(this.element)\n      };\n      this.originalTitle = this.element.attr(\"title\");\n\n      if (this.options.title == null && this.originalTitle != null) {\n        this.options.title = this.originalTitle;\n      } // Dialogs can't be disabled\n\n\n      if (this.options.disabled) {\n        this.options.disabled = false;\n      }\n\n      this._createWrapper();\n\n      this.element.show().removeAttr(\"title\").appendTo(this.uiDialog);\n\n      this._addClass(\"ui-dialog-content\", \"ui-widget-content\");\n\n      this._createTitlebar();\n\n      this._createButtonPane();\n\n      if (this.options.draggable && $.fn.draggable) {\n        this._makeDraggable();\n      }\n\n      if (this.options.resizable && $.fn.resizable) {\n        this._makeResizable();\n      }\n\n      this._isOpen = false;\n\n      this._trackFocus();\n    },\n    _init: function _init() {\n      if (this.options.autoOpen) {\n        this.open();\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element && (element.jquery || element.nodeType)) {\n        return $(element);\n      }\n\n      return this.document.find(element || \"body\").eq(0);\n    },\n    _destroy: function _destroy() {\n      var next,\n          originalPosition = this.originalPosition;\n\n      this._untrackInstance();\n\n      this._destroyOverlay();\n\n      this.element.removeUniqueId().css(this.originalCss) // Without detaching first, the following becomes really slow\n      .detach();\n      this.uiDialog.remove();\n\n      if (this.originalTitle) {\n        this.element.attr(\"title\", this.originalTitle);\n      }\n\n      next = originalPosition.parent.children().eq(originalPosition.index); // Don't try to place the dialog next to itself (#8613)\n\n      if (next.length && next[0] !== this.element[0]) {\n        next.before(this.element);\n      } else {\n        originalPosition.parent.append(this.element);\n      }\n    },\n    widget: function widget() {\n      return this.uiDialog;\n    },\n    disable: $.noop,\n    enable: $.noop,\n    close: function close(event) {\n      var that = this;\n\n      if (!this._isOpen || this._trigger(\"beforeClose\", event) === false) {\n        return;\n      }\n\n      this._isOpen = false;\n      this._focusedElement = null;\n\n      this._destroyOverlay();\n\n      this._untrackInstance();\n\n      if (!this.opener.filter(\":focusable\").trigger(\"focus\").length) {\n        // Hiding a focused element doesn't trigger blur in WebKit\n        // so in case we have nothing to focus on, explicitly blur the active element\n        // https://bugs.webkit.org/show_bug.cgi?id=47182\n        $.ui.safeBlur($.ui.safeActiveElement(this.document[0]));\n      }\n\n      this._hide(this.uiDialog, this.options.hide, function () {\n        that._trigger(\"close\", event);\n      });\n    },\n    isOpen: function isOpen() {\n      return this._isOpen;\n    },\n    moveToTop: function moveToTop() {\n      this._moveToTop();\n    },\n    _moveToTop: function _moveToTop(event, silent) {\n      var moved = false,\n          zIndices = this.uiDialog.siblings(\".ui-front:visible\").map(function () {\n        return +$(this).css(\"z-index\");\n      }).get(),\n          zIndexMax = Math.max.apply(null, zIndices);\n\n      if (zIndexMax >= +this.uiDialog.css(\"z-index\")) {\n        this.uiDialog.css(\"z-index\", zIndexMax + 1);\n        moved = true;\n      }\n\n      if (moved && !silent) {\n        this._trigger(\"focus\", event);\n      }\n\n      return moved;\n    },\n    open: function open() {\n      var that = this;\n\n      if (this._isOpen) {\n        if (this._moveToTop()) {\n          this._focusTabbable();\n        }\n\n        return;\n      }\n\n      this._isOpen = true;\n      this.opener = $($.ui.safeActiveElement(this.document[0]));\n\n      this._size();\n\n      this._position();\n\n      this._createOverlay();\n\n      this._moveToTop(null, true); // Ensure the overlay is moved to the top with the dialog, but only when\n      // opening. The overlay shouldn't move after the dialog is open so that\n      // modeless dialogs opened after the modal dialog stack properly.\n\n\n      if (this.overlay) {\n        this.overlay.css(\"z-index\", this.uiDialog.css(\"z-index\") - 1);\n      }\n\n      this._show(this.uiDialog, this.options.show, function () {\n        that._focusTabbable();\n\n        that._trigger(\"focus\");\n      }); // Track the dialog immediately upon openening in case a focus event\n      // somehow occurs outside of the dialog before an element inside the\n      // dialog is focused (#10152)\n\n\n      this._makeFocusTarget();\n\n      this._trigger(\"open\");\n    },\n    _focusTabbable: function _focusTabbable() {\n      // Set focus to the first match:\n      // 1. An element that was focused previously\n      // 2. First element inside the dialog matching [autofocus]\n      // 3. Tabbable element inside the content element\n      // 4. Tabbable element inside the buttonpane\n      // 5. The close button\n      // 6. The dialog itself\n      var hasFocus = this._focusedElement;\n\n      if (!hasFocus) {\n        hasFocus = this.element.find(\"[autofocus]\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.element.find(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogButtonPane.find(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialogTitlebarClose.filter(\":tabbable\");\n      }\n\n      if (!hasFocus.length) {\n        hasFocus = this.uiDialog;\n      }\n\n      hasFocus.eq(0).trigger(\"focus\");\n    },\n    _keepFocus: function _keepFocus(event) {\n      function checkFocus() {\n        var activeElement = $.ui.safeActiveElement(this.document[0]),\n            isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);\n\n        if (!isActive) {\n          this._focusTabbable();\n        }\n      }\n\n      event.preventDefault();\n      checkFocus.call(this); // support: IE\n      // IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n      // so we check again later\n\n      this._delay(checkFocus);\n    },\n    _createWrapper: function _createWrapper() {\n      this.uiDialog = $(\"<div>\").hide().attr({\n        // Setting tabIndex makes the div focusable\n        tabIndex: -1,\n        role: \"dialog\"\n      }).appendTo(this._appendTo());\n\n      this._addClass(this.uiDialog, \"ui-dialog\", \"ui-widget ui-widget-content ui-front\");\n\n      this._on(this.uiDialog, {\n        keydown: function keydown(event) {\n          if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {\n            event.preventDefault();\n            this.close(event);\n            return;\n          } // Prevent tabbing out of dialogs\n\n\n          if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {\n            return;\n          }\n\n          var tabbables = this.uiDialog.find(\":tabbable\"),\n              first = tabbables.filter(\":first\"),\n              last = tabbables.filter(\":last\");\n\n          if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {\n            this._delay(function () {\n              first.trigger(\"focus\");\n            });\n\n            event.preventDefault();\n          } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {\n            this._delay(function () {\n              last.trigger(\"focus\");\n            });\n\n            event.preventDefault();\n          }\n        },\n        mousedown: function mousedown(event) {\n          if (this._moveToTop(event)) {\n            this._focusTabbable();\n          }\n        }\n      }); // We assume that any existing aria-describedby attribute means\n      // that the dialog content is marked up properly\n      // otherwise we brute force the content as the description\n\n\n      if (!this.element.find(\"[aria-describedby]\").length) {\n        this.uiDialog.attr({\n          \"aria-describedby\": this.element.uniqueId().attr(\"id\")\n        });\n      }\n    },\n    _createTitlebar: function _createTitlebar() {\n      var uiDialogTitle;\n      this.uiDialogTitlebar = $(\"<div>\");\n\n      this._addClass(this.uiDialogTitlebar, \"ui-dialog-titlebar\", \"ui-widget-header ui-helper-clearfix\");\n\n      this._on(this.uiDialogTitlebar, {\n        mousedown: function mousedown(event) {\n          // Don't prevent click on close button (#8838)\n          // Focusing a dialog that is partially scrolled out of view\n          // causes the browser to scroll it into view, preventing the click event\n          if (!$(event.target).closest(\".ui-dialog-titlebar-close\")) {\n            // Dialog isn't getting focus when dragging (#8063)\n            this.uiDialog.trigger(\"focus\");\n          }\n        }\n      }); // Support: IE\n      // Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n      // dialog in IE (#9312)\n\n\n      this.uiDialogTitlebarClose = $(\"<button type='button'></button>\").button({\n        label: $(\"<a>\").text(this.options.closeText).html(),\n        icon: \"ui-icon-closethick\",\n        showLabel: false\n      }).appendTo(this.uiDialogTitlebar);\n\n      this._addClass(this.uiDialogTitlebarClose, \"ui-dialog-titlebar-close\");\n\n      this._on(this.uiDialogTitlebarClose, {\n        click: function click(event) {\n          event.preventDefault();\n          this.close(event);\n        }\n      });\n\n      uiDialogTitle = $(\"<span>\").uniqueId().prependTo(this.uiDialogTitlebar);\n\n      this._addClass(uiDialogTitle, \"ui-dialog-title\");\n\n      this._title(uiDialogTitle);\n\n      this.uiDialogTitlebar.prependTo(this.uiDialog);\n      this.uiDialog.attr({\n        \"aria-labelledby\": uiDialogTitle.attr(\"id\")\n      });\n    },\n    _title: function _title(title) {\n      if (this.options.title) {\n        title.text(this.options.title);\n      } else {\n        title.html(\"&#160;\");\n      }\n    },\n    _createButtonPane: function _createButtonPane() {\n      this.uiDialogButtonPane = $(\"<div>\");\n\n      this._addClass(this.uiDialogButtonPane, \"ui-dialog-buttonpane\", \"ui-widget-content ui-helper-clearfix\");\n\n      this.uiButtonSet = $(\"<div>\").appendTo(this.uiDialogButtonPane);\n\n      this._addClass(this.uiButtonSet, \"ui-dialog-buttonset\");\n\n      this._createButtons();\n    },\n    _createButtons: function _createButtons() {\n      var that = this,\n          buttons = this.options.buttons; // If we already have a button pane, remove it\n\n      this.uiDialogButtonPane.remove();\n      this.uiButtonSet.empty();\n\n      if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {\n        this._removeClass(this.uiDialog, \"ui-dialog-buttons\");\n\n        return;\n      }\n\n      $.each(buttons, function (name, props) {\n        var click, buttonOptions;\n        props = $.isFunction(props) ? {\n          click: props,\n          text: name\n        } : props; // Default to a non-submitting button\n\n        props = $.extend({\n          type: \"button\"\n        }, props); // Change the context for the click callback to be the main element\n\n        click = props.click;\n        buttonOptions = {\n          icon: props.icon,\n          iconPosition: props.iconPosition,\n          showLabel: props.showLabel,\n          // Deprecated options\n          icons: props.icons,\n          text: props.text\n        };\n        delete props.click;\n        delete props.icon;\n        delete props.iconPosition;\n        delete props.showLabel; // Deprecated options\n\n        delete props.icons;\n\n        if (typeof props.text === \"boolean\") {\n          delete props.text;\n        }\n\n        $(\"<button></button>\", props).button(buttonOptions).appendTo(that.uiButtonSet).on(\"click\", function () {\n          click.apply(that.element[0], arguments);\n        });\n      });\n\n      this._addClass(this.uiDialog, \"ui-dialog-buttons\");\n\n      this.uiDialogButtonPane.appendTo(this.uiDialog);\n    },\n    _makeDraggable: function _makeDraggable() {\n      var that = this,\n          options = this.options;\n\n      function filteredUi(ui) {\n        return {\n          position: ui.position,\n          offset: ui.offset\n        };\n      }\n\n      this.uiDialog.draggable({\n        cancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n        handle: \".ui-dialog-titlebar\",\n        containment: \"document\",\n        start: function start(event, ui) {\n          that._addClass($(this), \"ui-dialog-dragging\");\n\n          that._blockFrames();\n\n          that._trigger(\"dragStart\", event, filteredUi(ui));\n        },\n        drag: function drag(event, ui) {\n          that._trigger(\"drag\", event, filteredUi(ui));\n        },\n        stop: function stop(event, ui) {\n          var left = ui.offset.left - that.document.scrollLeft(),\n              top = ui.offset.top - that.document.scrollTop();\n          options.position = {\n            my: \"left top\",\n            at: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n            of: that.window\n          };\n\n          that._removeClass($(this), \"ui-dialog-dragging\");\n\n          that._unblockFrames();\n\n          that._trigger(\"dragStop\", event, filteredUi(ui));\n        }\n      });\n    },\n    _makeResizable: function _makeResizable() {\n      var that = this,\n          options = this.options,\n          handles = options.resizable,\n          // .ui-resizable has position: relative defined in the stylesheet\n      // but dialogs have to use absolute or fixed positioning\n      position = this.uiDialog.css(\"position\"),\n          resizeHandles = typeof handles === \"string\" ? handles : \"n,e,s,w,se,sw,ne,nw\";\n\n      function filteredUi(ui) {\n        return {\n          originalPosition: ui.originalPosition,\n          originalSize: ui.originalSize,\n          position: ui.position,\n          size: ui.size\n        };\n      }\n\n      this.uiDialog.resizable({\n        cancel: \".ui-dialog-content\",\n        containment: \"document\",\n        alsoResize: this.element,\n        maxWidth: options.maxWidth,\n        maxHeight: options.maxHeight,\n        minWidth: options.minWidth,\n        minHeight: this._minHeight(),\n        handles: resizeHandles,\n        start: function start(event, ui) {\n          that._addClass($(this), \"ui-dialog-resizing\");\n\n          that._blockFrames();\n\n          that._trigger(\"resizeStart\", event, filteredUi(ui));\n        },\n        resize: function resize(event, ui) {\n          that._trigger(\"resize\", event, filteredUi(ui));\n        },\n        stop: function stop(event, ui) {\n          var offset = that.uiDialog.offset(),\n              left = offset.left - that.document.scrollLeft(),\n              top = offset.top - that.document.scrollTop();\n          options.height = that.uiDialog.height();\n          options.width = that.uiDialog.width();\n          options.position = {\n            my: \"left top\",\n            at: \"left\" + (left >= 0 ? \"+\" : \"\") + left + \" \" + \"top\" + (top >= 0 ? \"+\" : \"\") + top,\n            of: that.window\n          };\n\n          that._removeClass($(this), \"ui-dialog-resizing\");\n\n          that._unblockFrames();\n\n          that._trigger(\"resizeStop\", event, filteredUi(ui));\n        }\n      }).css(\"position\", position);\n    },\n    _trackFocus: function _trackFocus() {\n      this._on(this.widget(), {\n        focusin: function focusin(event) {\n          this._makeFocusTarget();\n\n          this._focusedElement = $(event.target);\n        }\n      });\n    },\n    _makeFocusTarget: function _makeFocusTarget() {\n      this._untrackInstance();\n\n      this._trackingInstances().unshift(this);\n    },\n    _untrackInstance: function _untrackInstance() {\n      var instances = this._trackingInstances(),\n          exists = $.inArray(this, instances);\n\n      if (exists !== -1) {\n        instances.splice(exists, 1);\n      }\n    },\n    _trackingInstances: function _trackingInstances() {\n      var instances = this.document.data(\"ui-dialog-instances\");\n\n      if (!instances) {\n        instances = [];\n        this.document.data(\"ui-dialog-instances\", instances);\n      }\n\n      return instances;\n    },\n    _minHeight: function _minHeight() {\n      var options = this.options;\n      return options.height === \"auto\" ? options.minHeight : Math.min(options.minHeight, options.height);\n    },\n    _position: function _position() {\n      // Need to show the dialog to get the actual offset in the position plugin\n      var isVisible = this.uiDialog.is(\":visible\");\n\n      if (!isVisible) {\n        this.uiDialog.show();\n      }\n\n      this.uiDialog.position(this.options.position);\n\n      if (!isVisible) {\n        this.uiDialog.hide();\n      }\n    },\n    _setOptions: function _setOptions(options) {\n      var that = this,\n          resize = false,\n          resizableOptions = {};\n      $.each(options, function (key, value) {\n        that._setOption(key, value);\n\n        if (key in that.sizeRelatedOptions) {\n          resize = true;\n        }\n\n        if (key in that.resizableRelatedOptions) {\n          resizableOptions[key] = value;\n        }\n      });\n\n      if (resize) {\n        this._size();\n\n        this._position();\n      }\n\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", resizableOptions);\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      var isDraggable,\n          isResizable,\n          uiDialog = this.uiDialog;\n\n      if (key === \"disabled\") {\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"appendTo\") {\n        this.uiDialog.appendTo(this._appendTo());\n      }\n\n      if (key === \"buttons\") {\n        this._createButtons();\n      }\n\n      if (key === \"closeText\") {\n        this.uiDialogTitlebarClose.button({\n          // Ensure that we always pass a string\n          label: $(\"<a>\").text(\"\" + this.options.closeText).html()\n        });\n      }\n\n      if (key === \"draggable\") {\n        isDraggable = uiDialog.is(\":data(ui-draggable)\");\n\n        if (isDraggable && !value) {\n          uiDialog.draggable(\"destroy\");\n        }\n\n        if (!isDraggable && value) {\n          this._makeDraggable();\n        }\n      }\n\n      if (key === \"position\") {\n        this._position();\n      }\n\n      if (key === \"resizable\") {\n        // currently resizable, becoming non-resizable\n        isResizable = uiDialog.is(\":data(ui-resizable)\");\n\n        if (isResizable && !value) {\n          uiDialog.resizable(\"destroy\");\n        } // Currently resizable, changing handles\n\n\n        if (isResizable && typeof value === \"string\") {\n          uiDialog.resizable(\"option\", \"handles\", value);\n        } // Currently non-resizable, becoming resizable\n\n\n        if (!isResizable && value !== false) {\n          this._makeResizable();\n        }\n      }\n\n      if (key === \"title\") {\n        this._title(this.uiDialogTitlebar.find(\".ui-dialog-title\"));\n      }\n    },\n    _size: function _size() {\n      // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n      // divs will both have width and height set, so we need to reset them\n      var nonContentHeight,\n          minContentHeight,\n          maxContentHeight,\n          options = this.options; // Reset content sizing\n\n      this.element.show().css({\n        width: \"auto\",\n        minHeight: 0,\n        maxHeight: \"none\",\n        height: 0\n      });\n\n      if (options.minWidth > options.width) {\n        options.width = options.minWidth;\n      } // Reset wrapper sizing\n      // determine the height of all the non-content elements\n\n\n      nonContentHeight = this.uiDialog.css({\n        height: \"auto\",\n        width: options.width\n      }).outerHeight();\n      minContentHeight = Math.max(0, options.minHeight - nonContentHeight);\n      maxContentHeight = typeof options.maxHeight === \"number\" ? Math.max(0, options.maxHeight - nonContentHeight) : \"none\";\n\n      if (options.height === \"auto\") {\n        this.element.css({\n          minHeight: minContentHeight,\n          maxHeight: maxContentHeight,\n          height: \"auto\"\n        });\n      } else {\n        this.element.height(Math.max(0, options.height - nonContentHeight));\n      }\n\n      if (this.uiDialog.is(\":data(ui-resizable)\")) {\n        this.uiDialog.resizable(\"option\", \"minHeight\", this._minHeight());\n      }\n    },\n    _blockFrames: function _blockFrames() {\n      this.iframeBlocks = this.document.find(\"iframe\").map(function () {\n        var iframe = $(this);\n        return $(\"<div>\").css({\n          position: \"absolute\",\n          width: iframe.outerWidth(),\n          height: iframe.outerHeight()\n        }).appendTo(iframe.parent()).offset(iframe.offset())[0];\n      });\n    },\n    _unblockFrames: function _unblockFrames() {\n      if (this.iframeBlocks) {\n        this.iframeBlocks.remove();\n        delete this.iframeBlocks;\n      }\n    },\n    _allowInteraction: function _allowInteraction(event) {\n      if ($(event.target).closest(\".ui-dialog\").length) {\n        return true;\n      } // TODO: Remove hack when datepicker implements\n      // the .ui-front logic (#8989)\n\n\n      return !!$(event.target).closest(\".ui-datepicker\").length;\n    },\n    _createOverlay: function _createOverlay() {\n      if (!this.options.modal) {\n        return;\n      } // We use a delay in case the overlay is created from an\n      // event that we're going to be cancelling (#2804)\n\n\n      var isOpening = true;\n\n      this._delay(function () {\n        isOpening = false;\n      });\n\n      if (!this.document.data(\"ui-dialog-overlays\")) {\n        // Prevent use of anchors and inputs\n        // Using _on() for an event handler shared across many instances is\n        // safe because the dialogs stack and must be closed in reverse order\n        this._on(this.document, {\n          focusin: function focusin(event) {\n            if (isOpening) {\n              return;\n            }\n\n            if (!this._allowInteraction(event)) {\n              event.preventDefault();\n\n              this._trackingInstances()[0]._focusTabbable();\n            }\n          }\n        });\n      }\n\n      this.overlay = $(\"<div>\").appendTo(this._appendTo());\n\n      this._addClass(this.overlay, null, \"ui-widget-overlay ui-front\");\n\n      this._on(this.overlay, {\n        mousedown: \"_keepFocus\"\n      });\n\n      this.document.data(\"ui-dialog-overlays\", (this.document.data(\"ui-dialog-overlays\") || 0) + 1);\n    },\n    _destroyOverlay: function _destroyOverlay() {\n      if (!this.options.modal) {\n        return;\n      }\n\n      if (this.overlay) {\n        var overlays = this.document.data(\"ui-dialog-overlays\") - 1;\n\n        if (!overlays) {\n          this._off(this.document, \"focusin\");\n\n          this.document.removeData(\"ui-dialog-overlays\");\n        } else {\n          this.document.data(\"ui-dialog-overlays\", overlays);\n        }\n\n        this.overlay.remove();\n        this.overlay = null;\n      }\n    }\n  }); // DEPRECATED\n  // TODO: switch return back to widget declaration at top of file when this is removed\n\n  if ($.uiBackCompat !== false) {\n    // Backcompat for dialogClass option\n    $.widget(\"ui.dialog\", $.ui.dialog, {\n      options: {\n        dialogClass: \"\"\n      },\n      _createWrapper: function _createWrapper() {\n        this._super();\n\n        this.uiDialog.addClass(this.options.dialogClass);\n      },\n      _setOption: function _setOption(key, value) {\n        if (key === \"dialogClass\") {\n          this.uiDialog.removeClass(this.options.dialogClass).addClass(value);\n        }\n\n        this._superApply(arguments);\n      }\n    });\n  }\n\n  var widgetsDialog = $.ui.dialog;\n  /*!\r\n   * jQuery UI Progressbar 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Progressbar\n  //>>group: Widgets\n  // jscs:disable maximumLineLength\n  //>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.\n  // jscs:enable maximumLineLength\n  //>>docs: http://api.jqueryui.com/progressbar/\n  //>>demos: http://jqueryui.com/progressbar/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/progressbar.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  var widgetsProgressbar = $.widget(\"ui.progressbar\", {\n    version: \"1.12.1\",\n    options: {\n      classes: {\n        \"ui-progressbar\": \"ui-corner-all\",\n        \"ui-progressbar-value\": \"ui-corner-left\",\n        \"ui-progressbar-complete\": \"ui-corner-right\"\n      },\n      max: 100,\n      value: 0,\n      change: null,\n      complete: null\n    },\n    min: 0,\n    _create: function _create() {\n      // Constrain initial value\n      this.oldValue = this.options.value = this._constrainedValue();\n      this.element.attr({\n        // Only set static values; aria-valuenow and aria-valuemax are\n        // set inside _refreshValue()\n        role: \"progressbar\",\n        \"aria-valuemin\": this.min\n      });\n\n      this._addClass(\"ui-progressbar\", \"ui-widget ui-widget-content\");\n\n      this.valueDiv = $(\"<div>\").appendTo(this.element);\n\n      this._addClass(this.valueDiv, \"ui-progressbar-value\", \"ui-widget-header\");\n\n      this._refreshValue();\n    },\n    _destroy: function _destroy() {\n      this.element.removeAttr(\"role aria-valuemin aria-valuemax aria-valuenow\");\n      this.valueDiv.remove();\n    },\n    value: function value(newValue) {\n      if (newValue === undefined) {\n        return this.options.value;\n      }\n\n      this.options.value = this._constrainedValue(newValue);\n\n      this._refreshValue();\n    },\n    _constrainedValue: function _constrainedValue(newValue) {\n      if (newValue === undefined) {\n        newValue = this.options.value;\n      }\n\n      this.indeterminate = newValue === false; // Sanitize value\n\n      if (typeof newValue !== \"number\") {\n        newValue = 0;\n      }\n\n      return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));\n    },\n    _setOptions: function _setOptions(options) {\n      // Ensure \"value\" option is set after other values (like max)\n      var value = options.value;\n      delete options.value;\n\n      this._super(options);\n\n      this.options.value = this._constrainedValue(value);\n\n      this._refreshValue();\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"max\") {\n        // Don't allow a max less than min\n        value = Math.max(this.min, value);\n      }\n\n      this._super(key, value);\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this.element.attr(\"aria-disabled\", value);\n\n      this._toggleClass(null, \"ui-state-disabled\", !!value);\n    },\n    _percentage: function _percentage() {\n      return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);\n    },\n    _refreshValue: function _refreshValue() {\n      var value = this.options.value,\n          percentage = this._percentage();\n\n      this.valueDiv.toggle(this.indeterminate || value > this.min).width(percentage.toFixed(0) + \"%\");\n\n      this._toggleClass(this.valueDiv, \"ui-progressbar-complete\", null, value === this.options.max)._toggleClass(\"ui-progressbar-indeterminate\", null, this.indeterminate);\n\n      if (this.indeterminate) {\n        this.element.removeAttr(\"aria-valuenow\");\n\n        if (!this.overlayDiv) {\n          this.overlayDiv = $(\"<div>\").appendTo(this.valueDiv);\n\n          this._addClass(this.overlayDiv, \"ui-progressbar-overlay\");\n        }\n      } else {\n        this.element.attr({\n          \"aria-valuemax\": this.options.max,\n          \"aria-valuenow\": value\n        });\n\n        if (this.overlayDiv) {\n          this.overlayDiv.remove();\n          this.overlayDiv = null;\n        }\n      }\n\n      if (this.oldValue !== value) {\n        this.oldValue = value;\n\n        this._trigger(\"change\");\n      }\n\n      if (value === this.options.max) {\n        this._trigger(\"complete\");\n      }\n    }\n  });\n  /*!\r\n   * jQuery UI Selectmenu 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Selectmenu\n  //>>group: Widgets\n  // jscs:disable maximumLineLength\n  //>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.\n  // jscs:enable maximumLineLength\n  //>>docs: http://api.jqueryui.com/selectmenu/\n  //>>demos: http://jqueryui.com/selectmenu/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  var widgetsSelectmenu = $.widget(\"ui.selectmenu\", [$.ui.formResetMixin, {\n    version: \"1.12.1\",\n    defaultElement: \"<select>\",\n    options: {\n      appendTo: null,\n      classes: {\n        \"ui-selectmenu-button-open\": \"ui-corner-top\",\n        \"ui-selectmenu-button-closed\": \"ui-corner-all\"\n      },\n      disabled: null,\n      icons: {\n        button: \"ui-icon-triangle-1-s\"\n      },\n      position: {\n        my: \"left top\",\n        at: \"left bottom\",\n        collision: \"none\"\n      },\n      width: false,\n      // Callbacks\n      change: null,\n      close: null,\n      focus: null,\n      open: null,\n      select: null\n    },\n    _create: function _create() {\n      var selectmenuId = this.element.uniqueId().attr(\"id\");\n      this.ids = {\n        element: selectmenuId,\n        button: selectmenuId + \"-button\",\n        menu: selectmenuId + \"-menu\"\n      };\n\n      this._drawButton();\n\n      this._drawMenu();\n\n      this._bindFormResetHandler();\n\n      this._rendered = false;\n      this.menuItems = $();\n    },\n    _drawButton: function _drawButton() {\n      var icon,\n          that = this,\n          item = this._parseOption(this.element.find(\"option:selected\"), this.element[0].selectedIndex); // Associate existing label with the new button\n\n\n      this.labels = this.element.labels().attr(\"for\", this.ids.button);\n\n      this._on(this.labels, {\n        click: function click(event) {\n          this.button.focus();\n          event.preventDefault();\n        }\n      }); // Hide original select element\n\n\n      this.element.hide(); // Create button\n\n      this.button = $(\"<span>\", {\n        tabindex: this.options.disabled ? -1 : 0,\n        id: this.ids.button,\n        role: \"combobox\",\n        \"aria-expanded\": \"false\",\n        \"aria-autocomplete\": \"list\",\n        \"aria-owns\": this.ids.menu,\n        \"aria-haspopup\": \"true\",\n        title: this.element.attr(\"title\")\n      }).insertAfter(this.element);\n\n      this._addClass(this.button, \"ui-selectmenu-button ui-selectmenu-button-closed\", \"ui-button ui-widget\");\n\n      icon = $(\"<span>\").appendTo(this.button);\n\n      this._addClass(icon, \"ui-selectmenu-icon\", \"ui-icon \" + this.options.icons.button);\n\n      this.buttonItem = this._renderButtonItem(item).appendTo(this.button);\n\n      if (this.options.width !== false) {\n        this._resizeButton();\n      }\n\n      this._on(this.button, this._buttonEvents);\n\n      this.button.one(\"focusin\", function () {\n        // Delay rendering the menu items until the button receives focus.\n        // The menu may have already been rendered via a programmatic open.\n        if (!that._rendered) {\n          that._refreshMenu();\n        }\n      });\n    },\n    _drawMenu: function _drawMenu() {\n      var that = this; // Create menu\n\n      this.menu = $(\"<ul>\", {\n        \"aria-hidden\": \"true\",\n        \"aria-labelledby\": this.ids.button,\n        id: this.ids.menu\n      }); // Wrap menu\n\n      this.menuWrap = $(\"<div>\").append(this.menu);\n\n      this._addClass(this.menuWrap, \"ui-selectmenu-menu\", \"ui-front\");\n\n      this.menuWrap.appendTo(this._appendTo()); // Initialize menu widget\n\n      this.menuInstance = this.menu.menu({\n        classes: {\n          \"ui-menu\": \"ui-corner-bottom\"\n        },\n        role: \"listbox\",\n        select: function select(event, ui) {\n          event.preventDefault(); // Support: IE8\n          // If the item was selected via a click, the text selection\n          // will be destroyed in IE\n\n          that._setSelection();\n\n          that._select(ui.item.data(\"ui-selectmenu-item\"), event);\n        },\n        focus: function focus(event, ui) {\n          var item = ui.item.data(\"ui-selectmenu-item\"); // Prevent inital focus from firing and check if its a newly focused item\n\n          if (that.focusIndex != null && item.index !== that.focusIndex) {\n            that._trigger(\"focus\", event, {\n              item: item\n            });\n\n            if (!that.isOpen) {\n              that._select(item, event);\n            }\n          }\n\n          that.focusIndex = item.index;\n          that.button.attr(\"aria-activedescendant\", that.menuItems.eq(item.index).attr(\"id\"));\n        }\n      }).menu(\"instance\"); // Don't close the menu on mouseleave\n\n      this.menuInstance._off(this.menu, \"mouseleave\"); // Cancel the menu's collapseAll on document click\n\n\n      this.menuInstance._closeOnDocumentClick = function () {\n        return false;\n      }; // Selects often contain empty items, but never contain dividers\n\n\n      this.menuInstance._isDivider = function () {\n        return false;\n      };\n    },\n    refresh: function refresh() {\n      this._refreshMenu();\n\n      this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem( // Fall back to an empty object in case there are no options\n      this._getSelectedItem().data(\"ui-selectmenu-item\") || {}));\n\n      if (this.options.width === null) {\n        this._resizeButton();\n      }\n    },\n    _refreshMenu: function _refreshMenu() {\n      var item,\n          options = this.element.find(\"option\");\n      this.menu.empty();\n\n      this._parseOptions(options);\n\n      this._renderMenu(this.menu, this.items);\n\n      this.menuInstance.refresh();\n      this.menuItems = this.menu.find(\"li\").not(\".ui-selectmenu-optgroup\").find(\".ui-menu-item-wrapper\");\n      this._rendered = true;\n\n      if (!options.length) {\n        return;\n      }\n\n      item = this._getSelectedItem(); // Update the menu to have the correct item focused\n\n      this.menuInstance.focus(null, item);\n\n      this._setAria(item.data(\"ui-selectmenu-item\")); // Set disabled state\n\n\n      this._setOption(\"disabled\", this.element.prop(\"disabled\"));\n    },\n    open: function open(event) {\n      if (this.options.disabled) {\n        return;\n      } // If this is the first time the menu is being opened, render the items\n\n\n      if (!this._rendered) {\n        this._refreshMenu();\n      } else {\n        // Menu clears focus on close, reset focus to selected item\n        this._removeClass(this.menu.find(\".ui-state-active\"), null, \"ui-state-active\");\n\n        this.menuInstance.focus(null, this._getSelectedItem());\n      } // If there are no options, don't open the menu\n\n\n      if (!this.menuItems.length) {\n        return;\n      }\n\n      this.isOpen = true;\n\n      this._toggleAttr();\n\n      this._resizeMenu();\n\n      this._position();\n\n      this._on(this.document, this._documentClick);\n\n      this._trigger(\"open\", event);\n    },\n    _position: function _position() {\n      this.menuWrap.position($.extend({\n        of: this.button\n      }, this.options.position));\n    },\n    close: function close(event) {\n      if (!this.isOpen) {\n        return;\n      }\n\n      this.isOpen = false;\n\n      this._toggleAttr();\n\n      this.range = null;\n\n      this._off(this.document);\n\n      this._trigger(\"close\", event);\n    },\n    widget: function widget() {\n      return this.button;\n    },\n    menuWidget: function menuWidget() {\n      return this.menu;\n    },\n    _renderButtonItem: function _renderButtonItem(item) {\n      var buttonItem = $(\"<span>\");\n\n      this._setText(buttonItem, item.label);\n\n      this._addClass(buttonItem, \"ui-selectmenu-text\");\n\n      return buttonItem;\n    },\n    _renderMenu: function _renderMenu(ul, items) {\n      var that = this,\n          currentOptgroup = \"\";\n      $.each(items, function (index, item) {\n        var li;\n\n        if (item.optgroup !== currentOptgroup) {\n          li = $(\"<li>\", {\n            text: item.optgroup\n          });\n\n          that._addClass(li, \"ui-selectmenu-optgroup\", \"ui-menu-divider\" + (item.element.parent(\"optgroup\").prop(\"disabled\") ? \" ui-state-disabled\" : \"\"));\n\n          li.appendTo(ul);\n          currentOptgroup = item.optgroup;\n        }\n\n        that._renderItemData(ul, item);\n      });\n    },\n    _renderItemData: function _renderItemData(ul, item) {\n      return this._renderItem(ul, item).data(\"ui-selectmenu-item\", item);\n    },\n    _renderItem: function _renderItem(ul, item) {\n      var li = $(\"<li>\"),\n          wrapper = $(\"<div>\", {\n        title: item.element.attr(\"title\")\n      });\n\n      if (item.disabled) {\n        this._addClass(li, null, \"ui-state-disabled\");\n      }\n\n      this._setText(wrapper, item.label);\n\n      return li.append(wrapper).appendTo(ul);\n    },\n    _setText: function _setText(element, value) {\n      if (value) {\n        element.text(value);\n      } else {\n        element.html(\"&#160;\");\n      }\n    },\n    _move: function _move(direction, event) {\n      var item,\n          next,\n          filter = \".ui-menu-item\";\n\n      if (this.isOpen) {\n        item = this.menuItems.eq(this.focusIndex).parent(\"li\");\n      } else {\n        item = this.menuItems.eq(this.element[0].selectedIndex).parent(\"li\");\n        filter += \":not(.ui-state-disabled)\";\n      }\n\n      if (direction === \"first\" || direction === \"last\") {\n        next = item[direction === \"first\" ? \"prevAll\" : \"nextAll\"](filter).eq(-1);\n      } else {\n        next = item[direction + \"All\"](filter).eq(0);\n      }\n\n      if (next.length) {\n        this.menuInstance.focus(event, next);\n      }\n    },\n    _getSelectedItem: function _getSelectedItem() {\n      return this.menuItems.eq(this.element[0].selectedIndex).parent(\"li\");\n    },\n    _toggle: function _toggle(event) {\n      this[this.isOpen ? \"close\" : \"open\"](event);\n    },\n    _setSelection: function _setSelection() {\n      var selection;\n\n      if (!this.range) {\n        return;\n      }\n\n      if (window.getSelection) {\n        selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this.range); // Support: IE8\n      } else {\n        this.range.select();\n      } // Support: IE\n      // Setting the text selection kills the button focus in IE, but\n      // restoring the focus doesn't kill the selection.\n\n\n      this.button.focus();\n    },\n    _documentClick: {\n      mousedown: function mousedown(event) {\n        if (!this.isOpen) {\n          return;\n        }\n\n        if (!$(event.target).closest(\".ui-selectmenu-menu, #\" + $.ui.escapeSelector(this.ids.button)).length) {\n          this.close(event);\n        }\n      }\n    },\n    _buttonEvents: {\n      // Prevent text selection from being reset when interacting with the selectmenu (#10144)\n      mousedown: function mousedown() {\n        var selection;\n\n        if (window.getSelection) {\n          selection = window.getSelection();\n\n          if (selection.rangeCount) {\n            this.range = selection.getRangeAt(0);\n          } // Support: IE8\n\n        } else {\n          this.range = document.selection.createRange();\n        }\n      },\n      click: function click(event) {\n        this._setSelection();\n\n        this._toggle(event);\n      },\n      keydown: function keydown(event) {\n        var preventDefault = true;\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.TAB:\n          case $.ui.keyCode.ESCAPE:\n            this.close(event);\n            preventDefault = false;\n            break;\n\n          case $.ui.keyCode.ENTER:\n            if (this.isOpen) {\n              this._selectFocusedItem(event);\n            }\n\n            break;\n\n          case $.ui.keyCode.UP:\n            if (event.altKey) {\n              this._toggle(event);\n            } else {\n              this._move(\"prev\", event);\n            }\n\n            break;\n\n          case $.ui.keyCode.DOWN:\n            if (event.altKey) {\n              this._toggle(event);\n            } else {\n              this._move(\"next\", event);\n            }\n\n            break;\n\n          case $.ui.keyCode.SPACE:\n            if (this.isOpen) {\n              this._selectFocusedItem(event);\n            } else {\n              this._toggle(event);\n            }\n\n            break;\n\n          case $.ui.keyCode.LEFT:\n            this._move(\"prev\", event);\n\n            break;\n\n          case $.ui.keyCode.RIGHT:\n            this._move(\"next\", event);\n\n            break;\n\n          case $.ui.keyCode.HOME:\n          case $.ui.keyCode.PAGE_UP:\n            this._move(\"first\", event);\n\n            break;\n\n          case $.ui.keyCode.END:\n          case $.ui.keyCode.PAGE_DOWN:\n            this._move(\"last\", event);\n\n            break;\n\n          default:\n            this.menu.trigger(event);\n            preventDefault = false;\n        }\n\n        if (preventDefault) {\n          event.preventDefault();\n        }\n      }\n    },\n    _selectFocusedItem: function _selectFocusedItem(event) {\n      var item = this.menuItems.eq(this.focusIndex).parent(\"li\");\n\n      if (!item.hasClass(\"ui-state-disabled\")) {\n        this._select(item.data(\"ui-selectmenu-item\"), event);\n      }\n    },\n    _select: function _select(item, event) {\n      var oldIndex = this.element[0].selectedIndex; // Change native select element\n\n      this.element[0].selectedIndex = item.index;\n      this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(item));\n\n      this._setAria(item);\n\n      this._trigger(\"select\", event, {\n        item: item\n      });\n\n      if (item.index !== oldIndex) {\n        this._trigger(\"change\", event, {\n          item: item\n        });\n      }\n\n      this.close(event);\n    },\n    _setAria: function _setAria(item) {\n      var id = this.menuItems.eq(item.index).attr(\"id\");\n      this.button.attr({\n        \"aria-labelledby\": id,\n        \"aria-activedescendant\": id\n      });\n      this.menu.attr(\"aria-activedescendant\", id);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icons\") {\n        var icon = this.button.find(\"span.ui-icon\");\n\n        this._removeClass(icon, null, this.options.icons.button)._addClass(icon, null, value.button);\n      }\n\n      this._super(key, value);\n\n      if (key === \"appendTo\") {\n        this.menuWrap.appendTo(this._appendTo());\n      }\n\n      if (key === \"width\") {\n        this._resizeButton();\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this.menuInstance.option(\"disabled\", value);\n      this.button.attr(\"aria-disabled\", value);\n\n      this._toggleClass(this.button, null, \"ui-state-disabled\", value);\n\n      this.element.prop(\"disabled\", value);\n\n      if (value) {\n        this.button.attr(\"tabindex\", -1);\n        this.close();\n      } else {\n        this.button.attr(\"tabindex\", 0);\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element) {\n        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n      }\n\n      if (!element || !element[0]) {\n        element = this.element.closest(\".ui-front, dialog\");\n      }\n\n      if (!element.length) {\n        element = this.document[0].body;\n      }\n\n      return element;\n    },\n    _toggleAttr: function _toggleAttr() {\n      this.button.attr(\"aria-expanded\", this.isOpen); // We can't use two _toggleClass() calls here, because we need to make sure\n      // we always remove classes first and add them second, otherwise if both classes have the\n      // same theme class, it will be removed after we add it.\n\n      this._removeClass(this.button, \"ui-selectmenu-button-\" + (this.isOpen ? \"closed\" : \"open\"))._addClass(this.button, \"ui-selectmenu-button-\" + (this.isOpen ? \"open\" : \"closed\"))._toggleClass(this.menuWrap, \"ui-selectmenu-open\", null, this.isOpen);\n\n      this.menu.attr(\"aria-hidden\", !this.isOpen);\n    },\n    _resizeButton: function _resizeButton() {\n      var width = this.options.width; // For `width: false`, just remove inline style and stop\n\n      if (width === false) {\n        this.button.css(\"width\", \"\");\n        return;\n      } // For `width: null`, match the width of the original element\n\n\n      if (width === null) {\n        width = this.element.show().outerWidth();\n        this.element.hide();\n      }\n\n      this.button.outerWidth(width);\n    },\n    _resizeMenu: function _resizeMenu() {\n      this.menu.outerWidth(Math.max(this.button.outerWidth(), // Support: IE10\n      // IE10 wraps long text (possibly a rounding bug)\n      // so we add 1px to avoid the wrapping\n      this.menu.width(\"\").outerWidth() + 1));\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var options = this._super();\n\n      options.disabled = this.element.prop(\"disabled\");\n      return options;\n    },\n    _parseOptions: function _parseOptions(options) {\n      var that = this,\n          data = [];\n      options.each(function (index, item) {\n        data.push(that._parseOption($(item), index));\n      });\n      this.items = data;\n    },\n    _parseOption: function _parseOption(option, index) {\n      var optgroup = option.parent(\"optgroup\");\n      return {\n        element: option,\n        index: index,\n        value: option.val(),\n        label: option.text(),\n        optgroup: optgroup.attr(\"label\") || \"\",\n        disabled: optgroup.prop(\"disabled\") || option.prop(\"disabled\")\n      };\n    },\n    _destroy: function _destroy() {\n      this._unbindFormResetHandler();\n\n      this.menuWrap.remove();\n      this.button.remove();\n      this.element.show();\n      this.element.removeUniqueId();\n      this.labels.attr(\"for\", this.ids.element);\n    }\n  }]);\n  /*!\r\n   * jQuery UI Slider 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Slider\n  //>>group: Widgets\n  //>>description: Displays a flexible slider with ranges and accessibility via keyboard.\n  //>>docs: http://api.jqueryui.com/slider/\n  //>>demos: http://jqueryui.com/slider/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/slider.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  var widgetsSlider = $.widget(\"ui.slider\", $.ui.mouse, {\n    version: \"1.12.1\",\n    widgetEventPrefix: \"slide\",\n    options: {\n      animate: false,\n      classes: {\n        \"ui-slider\": \"ui-corner-all\",\n        \"ui-slider-handle\": \"ui-corner-all\",\n        // Note: ui-widget-header isn't the most fittingly semantic framework class for this\n        // element, but worked best visually with a variety of themes\n        \"ui-slider-range\": \"ui-corner-all ui-widget-header\"\n      },\n      distance: 0,\n      max: 100,\n      min: 0,\n      orientation: \"horizontal\",\n      range: false,\n      step: 1,\n      value: 0,\n      values: null,\n      // Callbacks\n      change: null,\n      slide: null,\n      start: null,\n      stop: null\n    },\n    // Number of pages in a slider\n    // (how many times can you page up/down to go through the whole range)\n    numPages: 5,\n    _create: function _create() {\n      this._keySliding = false;\n      this._mouseSliding = false;\n      this._animateOff = true;\n      this._handleIndex = null;\n\n      this._detectOrientation();\n\n      this._mouseInit();\n\n      this._calculateNewMax();\n\n      this._addClass(\"ui-slider ui-slider-\" + this.orientation, \"ui-widget ui-widget-content\");\n\n      this._refresh();\n\n      this._animateOff = false;\n    },\n    _refresh: function _refresh() {\n      this._createRange();\n\n      this._createHandles();\n\n      this._setupEvents();\n\n      this._refreshValue();\n    },\n    _createHandles: function _createHandles() {\n      var i,\n          handleCount,\n          options = this.options,\n          existingHandles = this.element.find(\".ui-slider-handle\"),\n          handle = \"<span tabindex='0'></span>\",\n          handles = [];\n      handleCount = options.values && options.values.length || 1;\n\n      if (existingHandles.length > handleCount) {\n        existingHandles.slice(handleCount).remove();\n        existingHandles = existingHandles.slice(0, handleCount);\n      }\n\n      for (i = existingHandles.length; i < handleCount; i++) {\n        handles.push(handle);\n      }\n\n      this.handles = existingHandles.add($(handles.join(\"\")).appendTo(this.element));\n\n      this._addClass(this.handles, \"ui-slider-handle\", \"ui-state-default\");\n\n      this.handle = this.handles.eq(0);\n      this.handles.each(function (i) {\n        $(this).data(\"ui-slider-handle-index\", i).attr(\"tabIndex\", 0);\n      });\n    },\n    _createRange: function _createRange() {\n      var options = this.options;\n\n      if (options.range) {\n        if (options.range === true) {\n          if (!options.values) {\n            options.values = [this._valueMin(), this._valueMin()];\n          } else if (options.values.length && options.values.length !== 2) {\n            options.values = [options.values[0], options.values[0]];\n          } else if ($.isArray(options.values)) {\n            options.values = options.values.slice(0);\n          }\n        }\n\n        if (!this.range || !this.range.length) {\n          this.range = $(\"<div>\").appendTo(this.element);\n\n          this._addClass(this.range, \"ui-slider-range\");\n        } else {\n          this._removeClass(this.range, \"ui-slider-range-min ui-slider-range-max\"); // Handle range switching from true to min/max\n\n\n          this.range.css({\n            \"left\": \"\",\n            \"bottom\": \"\"\n          });\n        }\n\n        if (options.range === \"min\" || options.range === \"max\") {\n          this._addClass(this.range, \"ui-slider-range-\" + options.range);\n        }\n      } else {\n        if (this.range) {\n          this.range.remove();\n        }\n\n        this.range = null;\n      }\n    },\n    _setupEvents: function _setupEvents() {\n      this._off(this.handles);\n\n      this._on(this.handles, this._handleEvents);\n\n      this._hoverable(this.handles);\n\n      this._focusable(this.handles);\n    },\n    _destroy: function _destroy() {\n      this.handles.remove();\n\n      if (this.range) {\n        this.range.remove();\n      }\n\n      this._mouseDestroy();\n    },\n    _mouseCapture: function _mouseCapture(event) {\n      var position,\n          normValue,\n          distance,\n          closestHandle,\n          index,\n          allowed,\n          offset,\n          mouseOverHandle,\n          that = this,\n          o = this.options;\n\n      if (o.disabled) {\n        return false;\n      }\n\n      this.elementSize = {\n        width: this.element.outerWidth(),\n        height: this.element.outerHeight()\n      };\n      this.elementOffset = this.element.offset();\n      position = {\n        x: event.pageX,\n        y: event.pageY\n      };\n      normValue = this._normValueFromMouse(position);\n      distance = this._valueMax() - this._valueMin() + 1;\n      this.handles.each(function (i) {\n        var thisDistance = Math.abs(normValue - that.values(i));\n\n        if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {\n          distance = thisDistance;\n          closestHandle = $(this);\n          index = i;\n        }\n      });\n      allowed = this._start(event, index);\n\n      if (allowed === false) {\n        return false;\n      }\n\n      this._mouseSliding = true;\n      this._handleIndex = index;\n\n      this._addClass(closestHandle, null, \"ui-state-active\");\n\n      closestHandle.trigger(\"focus\");\n      offset = closestHandle.offset();\n      mouseOverHandle = !$(event.target).parents().addBack().is(\".ui-slider-handle\");\n      this._clickOffset = mouseOverHandle ? {\n        left: 0,\n        top: 0\n      } : {\n        left: event.pageX - offset.left - closestHandle.width() / 2,\n        top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css(\"borderTopWidth\"), 10) || 0) - (parseInt(closestHandle.css(\"borderBottomWidth\"), 10) || 0) + (parseInt(closestHandle.css(\"marginTop\"), 10) || 0)\n      };\n\n      if (!this.handles.hasClass(\"ui-state-hover\")) {\n        this._slide(event, index, normValue);\n      }\n\n      this._animateOff = true;\n      return true;\n    },\n    _mouseStart: function _mouseStart() {\n      return true;\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      var position = {\n        x: event.pageX,\n        y: event.pageY\n      },\n          normValue = this._normValueFromMouse(position);\n\n      this._slide(event, this._handleIndex, normValue);\n\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      this._removeClass(this.handles, null, \"ui-state-active\");\n\n      this._mouseSliding = false;\n\n      this._stop(event, this._handleIndex);\n\n      this._change(event, this._handleIndex);\n\n      this._handleIndex = null;\n      this._clickOffset = null;\n      this._animateOff = false;\n      return false;\n    },\n    _detectOrientation: function _detectOrientation() {\n      this.orientation = this.options.orientation === \"vertical\" ? \"vertical\" : \"horizontal\";\n    },\n    _normValueFromMouse: function _normValueFromMouse(position) {\n      var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;\n\n      if (this.orientation === \"horizontal\") {\n        pixelTotal = this.elementSize.width;\n        pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\n      } else {\n        pixelTotal = this.elementSize.height;\n        pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\n      }\n\n      percentMouse = pixelMouse / pixelTotal;\n\n      if (percentMouse > 1) {\n        percentMouse = 1;\n      }\n\n      if (percentMouse < 0) {\n        percentMouse = 0;\n      }\n\n      if (this.orientation === \"vertical\") {\n        percentMouse = 1 - percentMouse;\n      }\n\n      valueTotal = this._valueMax() - this._valueMin();\n      valueMouse = this._valueMin() + percentMouse * valueTotal;\n      return this._trimAlignValue(valueMouse);\n    },\n    _uiHash: function _uiHash(index, value, values) {\n      var uiHash = {\n        handle: this.handles[index],\n        handleIndex: index,\n        value: value !== undefined ? value : this.value()\n      };\n\n      if (this._hasMultipleValues()) {\n        uiHash.value = value !== undefined ? value : this.values(index);\n        uiHash.values = values || this.values();\n      }\n\n      return uiHash;\n    },\n    _hasMultipleValues: function _hasMultipleValues() {\n      return this.options.values && this.options.values.length;\n    },\n    _start: function _start(event, index) {\n      return this._trigger(\"start\", event, this._uiHash(index));\n    },\n    _slide: function _slide(event, index, newVal) {\n      var allowed,\n          otherVal,\n          currentValue = this.value(),\n          newValues = this.values();\n\n      if (this._hasMultipleValues()) {\n        otherVal = this.values(index ? 0 : 1);\n        currentValue = this.values(index);\n\n        if (this.options.values.length === 2 && this.options.range === true) {\n          newVal = index === 0 ? Math.min(otherVal, newVal) : Math.max(otherVal, newVal);\n        }\n\n        newValues[index] = newVal;\n      }\n\n      if (newVal === currentValue) {\n        return;\n      }\n\n      allowed = this._trigger(\"slide\", event, this._uiHash(index, newVal, newValues)); // A slide can be canceled by returning false from the slide callback\n\n      if (allowed === false) {\n        return;\n      }\n\n      if (this._hasMultipleValues()) {\n        this.values(index, newVal);\n      } else {\n        this.value(newVal);\n      }\n    },\n    _stop: function _stop(event, index) {\n      this._trigger(\"stop\", event, this._uiHash(index));\n    },\n    _change: function _change(event, index) {\n      if (!this._keySliding && !this._mouseSliding) {\n        //store the last changed value index for reference when handles overlap\n        this._lastChangedValue = index;\n\n        this._trigger(\"change\", event, this._uiHash(index));\n      }\n    },\n    value: function value(newValue) {\n      if (arguments.length) {\n        this.options.value = this._trimAlignValue(newValue);\n\n        this._refreshValue();\n\n        this._change(null, 0);\n\n        return;\n      }\n\n      return this._value();\n    },\n    values: function values(index, newValue) {\n      var vals, newValues, i;\n\n      if (arguments.length > 1) {\n        this.options.values[index] = this._trimAlignValue(newValue);\n\n        this._refreshValue();\n\n        this._change(null, index);\n\n        return;\n      }\n\n      if (arguments.length) {\n        if ($.isArray(arguments[0])) {\n          vals = this.options.values;\n          newValues = arguments[0];\n\n          for (i = 0; i < vals.length; i += 1) {\n            vals[i] = this._trimAlignValue(newValues[i]);\n\n            this._change(null, i);\n          }\n\n          this._refreshValue();\n        } else {\n          if (this._hasMultipleValues()) {\n            return this._values(index);\n          } else {\n            return this.value();\n          }\n        }\n      } else {\n        return this._values();\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      var i,\n          valsLength = 0;\n\n      if (key === \"range\" && this.options.range === true) {\n        if (value === \"min\") {\n          this.options.value = this._values(0);\n          this.options.values = null;\n        } else if (value === \"max\") {\n          this.options.value = this._values(this.options.values.length - 1);\n          this.options.values = null;\n        }\n      }\n\n      if ($.isArray(this.options.values)) {\n        valsLength = this.options.values.length;\n      }\n\n      this._super(key, value);\n\n      switch (key) {\n        case \"orientation\":\n          this._detectOrientation();\n\n          this._removeClass(\"ui-slider-horizontal ui-slider-vertical\")._addClass(\"ui-slider-\" + this.orientation);\n\n          this._refreshValue();\n\n          if (this.options.range) {\n            this._refreshRange(value);\n          } // Reset positioning from previous orientation\n\n\n          this.handles.css(value === \"horizontal\" ? \"bottom\" : \"left\", \"\");\n          break;\n\n        case \"value\":\n          this._animateOff = true;\n\n          this._refreshValue();\n\n          this._change(null, 0);\n\n          this._animateOff = false;\n          break;\n\n        case \"values\":\n          this._animateOff = true;\n\n          this._refreshValue(); // Start from the last handle to prevent unreachable handles (#9046)\n\n\n          for (i = valsLength - 1; i >= 0; i--) {\n            this._change(null, i);\n          }\n\n          this._animateOff = false;\n          break;\n\n        case \"step\":\n        case \"min\":\n        case \"max\":\n          this._animateOff = true;\n\n          this._calculateNewMax();\n\n          this._refreshValue();\n\n          this._animateOff = false;\n          break;\n\n        case \"range\":\n          this._animateOff = true;\n\n          this._refresh();\n\n          this._animateOff = false;\n          break;\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this._toggleClass(null, \"ui-state-disabled\", !!value);\n    },\n    //internal value getter\n    // _value() returns value trimmed by min and max, aligned by step\n    _value: function _value() {\n      var val = this.options.value;\n      val = this._trimAlignValue(val);\n      return val;\n    },\n    //internal values getter\n    // _values() returns array of values trimmed by min and max, aligned by step\n    // _values( index ) returns single value trimmed by min and max, aligned by step\n    _values: function _values(index) {\n      var val, vals, i;\n\n      if (arguments.length) {\n        val = this.options.values[index];\n        val = this._trimAlignValue(val);\n        return val;\n      } else if (this._hasMultipleValues()) {\n        // .slice() creates a copy of the array\n        // this copy gets trimmed by min and max and then returned\n        vals = this.options.values.slice();\n\n        for (i = 0; i < vals.length; i += 1) {\n          vals[i] = this._trimAlignValue(vals[i]);\n        }\n\n        return vals;\n      } else {\n        return [];\n      }\n    },\n    // Returns the step-aligned value that val is closest to, between (inclusive) min and max\n    _trimAlignValue: function _trimAlignValue(val) {\n      if (val <= this._valueMin()) {\n        return this._valueMin();\n      }\n\n      if (val >= this._valueMax()) {\n        return this._valueMax();\n      }\n\n      var step = this.options.step > 0 ? this.options.step : 1,\n          valModStep = (val - this._valueMin()) % step,\n          alignValue = val - valModStep;\n\n      if (Math.abs(valModStep) * 2 >= step) {\n        alignValue += valModStep > 0 ? step : -step;\n      } // Since JavaScript has problems with large floats, round\n      // the final value to 5 digits after the decimal point (see #4124)\n\n\n      return parseFloat(alignValue.toFixed(5));\n    },\n    _calculateNewMax: function _calculateNewMax() {\n      var max = this.options.max,\n          min = this._valueMin(),\n          step = this.options.step,\n          aboveMin = Math.round((max - min) / step) * step;\n\n      max = aboveMin + min;\n\n      if (max > this.options.max) {\n        //If max is not divisible by step, rounding off may increase its value\n        max -= step;\n      }\n\n      this.max = parseFloat(max.toFixed(this._precision()));\n    },\n    _precision: function _precision() {\n      var precision = this._precisionOf(this.options.step);\n\n      if (this.options.min !== null) {\n        precision = Math.max(precision, this._precisionOf(this.options.min));\n      }\n\n      return precision;\n    },\n    _precisionOf: function _precisionOf(num) {\n      var str = num.toString(),\n          decimal = str.indexOf(\".\");\n      return decimal === -1 ? 0 : str.length - decimal - 1;\n    },\n    _valueMin: function _valueMin() {\n      return this.options.min;\n    },\n    _valueMax: function _valueMax() {\n      return this.max;\n    },\n    _refreshRange: function _refreshRange(orientation) {\n      if (orientation === \"vertical\") {\n        this.range.css({\n          \"width\": \"\",\n          \"left\": \"\"\n        });\n      }\n\n      if (orientation === \"horizontal\") {\n        this.range.css({\n          \"height\": \"\",\n          \"bottom\": \"\"\n        });\n      }\n    },\n    _refreshValue: function _refreshValue() {\n      var lastValPercent,\n          valPercent,\n          value,\n          valueMin,\n          valueMax,\n          oRange = this.options.range,\n          o = this.options,\n          that = this,\n          animate = !this._animateOff ? o.animate : false,\n          _set = {};\n\n      if (this._hasMultipleValues()) {\n        this.handles.each(function (i) {\n          valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;\n          _set[that.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n          $(this).stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n          if (that.options.range === true) {\n            if (that.orientation === \"horizontal\") {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  left: valPercent + \"%\"\n                }, o.animate);\n              }\n\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  width: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            } else {\n              if (i === 0) {\n                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n                  bottom: valPercent + \"%\"\n                }, o.animate);\n              }\n\n              if (i === 1) {\n                that.range[animate ? \"animate\" : \"css\"]({\n                  height: valPercent - lastValPercent + \"%\"\n                }, {\n                  queue: false,\n                  duration: o.animate\n                });\n              }\n            }\n          }\n\n          lastValPercent = valPercent;\n        });\n      } else {\n        value = this.value();\n        valueMin = this._valueMin();\n        valueMax = this._valueMax();\n        valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;\n        _set[this.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n        this.handle.stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n        if (oRange === \"min\" && this.orientation === \"horizontal\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            width: valPercent + \"%\"\n          }, o.animate);\n        }\n\n        if (oRange === \"max\" && this.orientation === \"horizontal\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            width: 100 - valPercent + \"%\"\n          }, o.animate);\n        }\n\n        if (oRange === \"min\" && this.orientation === \"vertical\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            height: valPercent + \"%\"\n          }, o.animate);\n        }\n\n        if (oRange === \"max\" && this.orientation === \"vertical\") {\n          this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({\n            height: 100 - valPercent + \"%\"\n          }, o.animate);\n        }\n      }\n    },\n    _handleEvents: {\n      keydown: function keydown(event) {\n        var allowed,\n            curVal,\n            newVal,\n            step,\n            index = $(event.target).data(\"ui-slider-handle-index\");\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n          case $.ui.keyCode.END:\n          case $.ui.keyCode.PAGE_UP:\n          case $.ui.keyCode.PAGE_DOWN:\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            event.preventDefault();\n\n            if (!this._keySliding) {\n              this._keySliding = true;\n\n              this._addClass($(event.target), null, \"ui-state-active\");\n\n              allowed = this._start(event, index);\n\n              if (allowed === false) {\n                return;\n              }\n            }\n\n            break;\n        }\n\n        step = this.options.step;\n\n        if (this._hasMultipleValues()) {\n          curVal = newVal = this.values(index);\n        } else {\n          curVal = newVal = this.value();\n        }\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.HOME:\n            newVal = this._valueMin();\n            break;\n\n          case $.ui.keyCode.END:\n            newVal = this._valueMax();\n            break;\n\n          case $.ui.keyCode.PAGE_UP:\n            newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);\n            break;\n\n          case $.ui.keyCode.PAGE_DOWN:\n            newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);\n            break;\n\n          case $.ui.keyCode.UP:\n          case $.ui.keyCode.RIGHT:\n            if (curVal === this._valueMax()) {\n              return;\n            }\n\n            newVal = this._trimAlignValue(curVal + step);\n            break;\n\n          case $.ui.keyCode.DOWN:\n          case $.ui.keyCode.LEFT:\n            if (curVal === this._valueMin()) {\n              return;\n            }\n\n            newVal = this._trimAlignValue(curVal - step);\n            break;\n        }\n\n        this._slide(event, index, newVal);\n      },\n      keyup: function keyup(event) {\n        var index = $(event.target).data(\"ui-slider-handle-index\");\n\n        if (this._keySliding) {\n          this._keySliding = false;\n\n          this._stop(event, index);\n\n          this._change(event, index);\n\n          this._removeClass($(event.target), null, \"ui-state-active\");\n        }\n      }\n    }\n  });\n  /*!\r\n   * jQuery UI Spinner 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Spinner\n  //>>group: Widgets\n  //>>description: Displays buttons to easily input numbers via the keyboard or mouse.\n  //>>docs: http://api.jqueryui.com/spinner/\n  //>>demos: http://jqueryui.com/spinner/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/spinner.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  function spinnerModifer(fn) {\n    return function () {\n      var previous = this.element.val();\n      fn.apply(this, arguments);\n\n      this._refresh();\n\n      if (previous !== this.element.val()) {\n        this._trigger(\"change\");\n      }\n    };\n  }\n\n  $.widget(\"ui.spinner\", {\n    version: \"1.12.1\",\n    defaultElement: \"<input>\",\n    widgetEventPrefix: \"spin\",\n    options: {\n      classes: {\n        \"ui-spinner\": \"ui-corner-all\",\n        \"ui-spinner-down\": \"ui-corner-br\",\n        \"ui-spinner-up\": \"ui-corner-tr\"\n      },\n      culture: null,\n      icons: {\n        down: \"ui-icon-triangle-1-s\",\n        up: \"ui-icon-triangle-1-n\"\n      },\n      incremental: true,\n      max: null,\n      min: null,\n      numberFormat: null,\n      page: 10,\n      step: 1,\n      change: null,\n      spin: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      // handle string values that need to be parsed\n      this._setOption(\"max\", this.options.max);\n\n      this._setOption(\"min\", this.options.min);\n\n      this._setOption(\"step\", this.options.step); // Only format if there is a value, prevents the field from being marked\n      // as invalid in Firefox, see #9573.\n\n\n      if (this.value() !== \"\") {\n        // Format the value, but don't constrain.\n        this._value(this.element.val(), true);\n      }\n\n      this._draw();\n\n      this._on(this._events);\n\n      this._refresh(); // Turning off autocomplete prevents the browser from remembering the\n      // value when navigating through history, so we re-enable autocomplete\n      // if the page is unloaded before the widget is destroyed. #7790\n\n\n      this._on(this.window, {\n        beforeunload: function beforeunload() {\n          this.element.removeAttr(\"autocomplete\");\n        }\n      });\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var options = this._super();\n\n      var element = this.element;\n      $.each([\"min\", \"max\", \"step\"], function (i, option) {\n        var value = element.attr(option);\n\n        if (value != null && value.length) {\n          options[option] = value;\n        }\n      });\n      return options;\n    },\n    _events: {\n      keydown: function keydown(event) {\n        if (this._start(event) && this._keydown(event)) {\n          event.preventDefault();\n        }\n      },\n      keyup: \"_stop\",\n      focus: function focus() {\n        this.previous = this.element.val();\n      },\n      blur: function blur(event) {\n        if (this.cancelBlur) {\n          delete this.cancelBlur;\n          return;\n        }\n\n        this._stop();\n\n        this._refresh();\n\n        if (this.previous !== this.element.val()) {\n          this._trigger(\"change\", event);\n        }\n      },\n      mousewheel: function mousewheel(event, delta) {\n        if (!delta) {\n          return;\n        }\n\n        if (!this.spinning && !this._start(event)) {\n          return false;\n        }\n\n        this._spin((delta > 0 ? 1 : -1) * this.options.step, event);\n\n        clearTimeout(this.mousewheelTimer);\n        this.mousewheelTimer = this._delay(function () {\n          if (this.spinning) {\n            this._stop(event);\n          }\n        }, 100);\n        event.preventDefault();\n      },\n      \"mousedown .ui-spinner-button\": function mousedownUiSpinnerButton(event) {\n        var previous; // We never want the buttons to have focus; whenever the user is\n        // interacting with the spinner, the focus should be on the input.\n        // If the input is focused then this.previous is properly set from\n        // when the input first received focus. If the input is not focused\n        // then we need to set this.previous based on the value before spinning.\n\n        previous = this.element[0] === $.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val();\n\n        function checkFocus() {\n          var isActive = this.element[0] === $.ui.safeActiveElement(this.document[0]);\n\n          if (!isActive) {\n            this.element.trigger(\"focus\");\n            this.previous = previous; // support: IE\n            // IE sets focus asynchronously, so we need to check if focus\n            // moved off of the input because the user clicked on the button.\n\n            this._delay(function () {\n              this.previous = previous;\n            });\n          }\n        } // Ensure focus is on (or stays on) the text field\n\n\n        event.preventDefault();\n        checkFocus.call(this); // Support: IE\n        // IE doesn't prevent moving focus even with event.preventDefault()\n        // so we set a flag to know when we should ignore the blur event\n        // and check (again) if focus moved off of the input.\n\n        this.cancelBlur = true;\n\n        this._delay(function () {\n          delete this.cancelBlur;\n          checkFocus.call(this);\n        });\n\n        if (this._start(event) === false) {\n          return;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      \"mouseup .ui-spinner-button\": \"_stop\",\n      \"mouseenter .ui-spinner-button\": function mouseenterUiSpinnerButton(event) {\n        // button will add ui-state-active if mouse was down while mouseleave and kept down\n        if (!$(event.currentTarget).hasClass(\"ui-state-active\")) {\n          return;\n        }\n\n        if (this._start(event) === false) {\n          return false;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      // TODO: do we really want to consider this a stop?\n      // shouldn't we just stop the repeater and wait until mouseup before\n      // we trigger the stop event?\n      \"mouseleave .ui-spinner-button\": \"_stop\"\n    },\n    // Support mobile enhanced option and make backcompat more sane\n    _enhance: function _enhance() {\n      this.uiSpinner = this.element.attr(\"autocomplete\", \"off\").wrap(\"<span>\").parent() // Add buttons\n      .append(\"<a></a><a></a>\");\n    },\n    _draw: function _draw() {\n      this._enhance();\n\n      this._addClass(this.uiSpinner, \"ui-spinner\", \"ui-widget ui-widget-content\");\n\n      this._addClass(\"ui-spinner-input\");\n\n      this.element.attr(\"role\", \"spinbutton\"); // Button bindings\n\n      this.buttons = this.uiSpinner.children(\"a\").attr(\"tabIndex\", -1).attr(\"aria-hidden\", true).button({\n        classes: {\n          \"ui-button\": \"\"\n        }\n      }); // TODO: Right now button does not support classes this is already updated in button PR\n\n      this._removeClass(this.buttons, \"ui-corner-all\");\n\n      this._addClass(this.buttons.first(), \"ui-spinner-button ui-spinner-up\");\n\n      this._addClass(this.buttons.last(), \"ui-spinner-button ui-spinner-down\");\n\n      this.buttons.first().button({\n        \"icon\": this.options.icons.up,\n        \"showLabel\": false\n      });\n      this.buttons.last().button({\n        \"icon\": this.options.icons.down,\n        \"showLabel\": false\n      }); // IE 6 doesn't understand height: 50% for the buttons\n      // unless the wrapper has an explicit height\n\n      if (this.buttons.height() > Math.ceil(this.uiSpinner.height() * 0.5) && this.uiSpinner.height() > 0) {\n        this.uiSpinner.height(this.uiSpinner.height());\n      }\n    },\n    _keydown: function _keydown(event) {\n      var options = this.options,\n          keyCode = $.ui.keyCode;\n\n      switch (event.keyCode) {\n        case keyCode.UP:\n          this._repeat(null, 1, event);\n\n          return true;\n\n        case keyCode.DOWN:\n          this._repeat(null, -1, event);\n\n          return true;\n\n        case keyCode.PAGE_UP:\n          this._repeat(null, options.page, event);\n\n          return true;\n\n        case keyCode.PAGE_DOWN:\n          this._repeat(null, -options.page, event);\n\n          return true;\n      }\n\n      return false;\n    },\n    _start: function _start(event) {\n      if (!this.spinning && this._trigger(\"start\", event) === false) {\n        return false;\n      }\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      this.spinning = true;\n      return true;\n    },\n    _repeat: function _repeat(i, steps, event) {\n      i = i || 500;\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        this._repeat(40, steps, event);\n      }, i);\n\n      this._spin(steps * this.options.step, event);\n    },\n    _spin: function _spin(step, event) {\n      var value = this.value() || 0;\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      value = this._adjustValue(value + step * this._increment(this.counter));\n\n      if (!this.spinning || this._trigger(\"spin\", event, {\n        value: value\n      }) !== false) {\n        this._value(value);\n\n        this.counter++;\n      }\n    },\n    _increment: function _increment(i) {\n      var incremental = this.options.incremental;\n\n      if (incremental) {\n        return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);\n      }\n\n      return 1;\n    },\n    _precision: function _precision() {\n      var precision = this._precisionOf(this.options.step);\n\n      if (this.options.min !== null) {\n        precision = Math.max(precision, this._precisionOf(this.options.min));\n      }\n\n      return precision;\n    },\n    _precisionOf: function _precisionOf(num) {\n      var str = num.toString(),\n          decimal = str.indexOf(\".\");\n      return decimal === -1 ? 0 : str.length - decimal - 1;\n    },\n    _adjustValue: function _adjustValue(value) {\n      var base,\n          aboveMin,\n          options = this.options; // Make sure we're at a valid step\n      // - find out where we are relative to the base (min or 0)\n\n      base = options.min !== null ? options.min : 0;\n      aboveMin = value - base; // - round to the nearest step\n\n      aboveMin = Math.round(aboveMin / options.step) * options.step; // - rounding is based on 0, so adjust back to our base\n\n      value = base + aboveMin; // Fix precision from bad JS floating point math\n\n      value = parseFloat(value.toFixed(this._precision())); // Clamp the value\n\n      if (options.max !== null && value > options.max) {\n        return options.max;\n      }\n\n      if (options.min !== null && value < options.min) {\n        return options.min;\n      }\n\n      return value;\n    },\n    _stop: function _stop(event) {\n      if (!this.spinning) {\n        return;\n      }\n\n      clearTimeout(this.timer);\n      clearTimeout(this.mousewheelTimer);\n      this.counter = 0;\n      this.spinning = false;\n\n      this._trigger(\"stop\", event);\n    },\n    _setOption: function _setOption(key, value) {\n      var prevValue, first, last;\n\n      if (key === \"culture\" || key === \"numberFormat\") {\n        prevValue = this._parse(this.element.val());\n        this.options[key] = value;\n        this.element.val(this._format(prevValue));\n        return;\n      }\n\n      if (key === \"max\" || key === \"min\" || key === \"step\") {\n        if (typeof value === \"string\") {\n          value = this._parse(value);\n        }\n      }\n\n      if (key === \"icons\") {\n        first = this.buttons.first().find(\".ui-icon\");\n\n        this._removeClass(first, null, this.options.icons.up);\n\n        this._addClass(first, null, value.up);\n\n        last = this.buttons.last().find(\".ui-icon\");\n\n        this._removeClass(last, null, this.options.icons.down);\n\n        this._addClass(last, null, value.down);\n      }\n\n      this._super(key, value);\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this._toggleClass(this.uiSpinner, null, \"ui-state-disabled\", !!value);\n\n      this.element.prop(\"disabled\", !!value);\n      this.buttons.button(value ? \"disable\" : \"enable\");\n    },\n    _setOptions: spinnerModifer(function (options) {\n      this._super(options);\n    }),\n    _parse: function _parse(val) {\n      if (typeof val === \"string\" && val !== \"\") {\n        val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;\n      }\n\n      return val === \"\" || isNaN(val) ? null : val;\n    },\n    _format: function _format(value) {\n      if (value === \"\") {\n        return \"\";\n      }\n\n      return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;\n    },\n    _refresh: function _refresh() {\n      this.element.attr({\n        \"aria-valuemin\": this.options.min,\n        \"aria-valuemax\": this.options.max,\n        // TODO: what should we do with values that can't be parsed?\n        \"aria-valuenow\": this._parse(this.element.val())\n      });\n    },\n    isValid: function isValid() {\n      var value = this.value(); // Null is invalid\n\n      if (value === null) {\n        return false;\n      } // If value gets adjusted, it's invalid\n\n\n      return value === this._adjustValue(value);\n    },\n    // Update the value without triggering change\n    _value: function _value(value, allowAny) {\n      var parsed;\n\n      if (value !== \"\") {\n        parsed = this._parse(value);\n\n        if (parsed !== null) {\n          if (!allowAny) {\n            parsed = this._adjustValue(parsed);\n          }\n\n          value = this._format(parsed);\n        }\n      }\n\n      this.element.val(value);\n\n      this._refresh();\n    },\n    _destroy: function _destroy() {\n      this.element.prop(\"disabled\", false).removeAttr(\"autocomplete role aria-valuemin aria-valuemax aria-valuenow\");\n      this.uiSpinner.replaceWith(this.element);\n    },\n    stepUp: spinnerModifer(function (steps) {\n      this._stepUp(steps);\n    }),\n    _stepUp: function _stepUp(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * this.options.step);\n\n        this._stop();\n      }\n    },\n    stepDown: spinnerModifer(function (steps) {\n      this._stepDown(steps);\n    }),\n    _stepDown: function _stepDown(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * -this.options.step);\n\n        this._stop();\n      }\n    },\n    pageUp: spinnerModifer(function (pages) {\n      this._stepUp((pages || 1) * this.options.page);\n    }),\n    pageDown: spinnerModifer(function (pages) {\n      this._stepDown((pages || 1) * this.options.page);\n    }),\n    value: function value(newVal) {\n      if (!arguments.length) {\n        return this._parse(this.element.val());\n      }\n\n      spinnerModifer(this._value).call(this, newVal);\n    },\n    widget: function widget() {\n      return this.uiSpinner;\n    }\n  }); // DEPRECATED\n  // TODO: switch return back to widget declaration at top of file when this is removed\n\n  if ($.uiBackCompat !== false) {\n    // Backcompat for spinner html extension points\n    $.widget(\"ui.spinner\", $.ui.spinner, {\n      _enhance: function _enhance() {\n        this.uiSpinner = this.element.attr(\"autocomplete\", \"off\").wrap(this._uiSpinnerHtml()).parent() // Add buttons\n        .append(this._buttonHtml());\n      },\n      _uiSpinnerHtml: function _uiSpinnerHtml() {\n        return \"<span>\";\n      },\n      _buttonHtml: function _buttonHtml() {\n        return \"<a></a><a></a>\";\n      }\n    });\n  }\n\n  var widgetsSpinner = $.ui.spinner;\n  /*!\r\n   * jQuery UI Tabs 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Tabs\n  //>>group: Widgets\n  //>>description: Transforms a set of container elements into a tab structure.\n  //>>docs: http://api.jqueryui.com/tabs/\n  //>>demos: http://jqueryui.com/tabs/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/tabs.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.widget(\"ui.tabs\", {\n    version: \"1.12.1\",\n    delay: 300,\n    options: {\n      active: null,\n      classes: {\n        \"ui-tabs\": \"ui-corner-all\",\n        \"ui-tabs-nav\": \"ui-corner-all\",\n        \"ui-tabs-panel\": \"ui-corner-bottom\",\n        \"ui-tabs-tab\": \"ui-corner-top\"\n      },\n      collapsible: false,\n      event: \"click\",\n      heightStyle: \"content\",\n      hide: null,\n      show: null,\n      // Callbacks\n      activate: null,\n      beforeActivate: null,\n      beforeLoad: null,\n      load: null\n    },\n    _isLocal: function () {\n      var rhash = /#.*$/;\n      return function (anchor) {\n        var anchorUrl, locationUrl;\n        anchorUrl = anchor.href.replace(rhash, \"\");\n        locationUrl = location.href.replace(rhash, \"\"); // Decoding may throw an error if the URL isn't UTF-8 (#9518)\n\n        try {\n          anchorUrl = decodeURIComponent(anchorUrl);\n        } catch (error) {}\n\n        try {\n          locationUrl = decodeURIComponent(locationUrl);\n        } catch (error) {}\n\n        return anchor.hash.length > 1 && anchorUrl === locationUrl;\n      };\n    }(),\n    _create: function _create() {\n      var that = this,\n          options = this.options;\n      this.running = false;\n\n      this._addClass(\"ui-tabs\", \"ui-widget ui-widget-content\");\n\n      this._toggleClass(\"ui-tabs-collapsible\", null, options.collapsible);\n\n      this._processTabs();\n\n      options.active = this._initialActive(); // Take disabling tabs via class attribute from HTML\n      // into account and update option properly.\n\n      if ($.isArray(options.disabled)) {\n        options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(\".ui-state-disabled\"), function (li) {\n          return that.tabs.index(li);\n        }))).sort();\n      } // Check for length avoids error when initializing empty list\n\n\n      if (this.options.active !== false && this.anchors.length) {\n        this.active = this._findActive(options.active);\n      } else {\n        this.active = $();\n      }\n\n      this._refresh();\n\n      if (this.active.length) {\n        this.load(options.active);\n      }\n    },\n    _initialActive: function _initialActive() {\n      var active = this.options.active,\n          collapsible = this.options.collapsible,\n          locationHash = location.hash.substring(1);\n\n      if (active === null) {\n        // check the fragment identifier in the URL\n        if (locationHash) {\n          this.tabs.each(function (i, tab) {\n            if ($(tab).attr(\"aria-controls\") === locationHash) {\n              active = i;\n              return false;\n            }\n          });\n        } // Check for a tab marked active via a class\n\n\n        if (active === null) {\n          active = this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));\n        } // No active tab, set to false\n\n\n        if (active === null || active === -1) {\n          active = this.tabs.length ? 0 : false;\n        }\n      } // Handle numbers: negative, out of range\n\n\n      if (active !== false) {\n        active = this.tabs.index(this.tabs.eq(active));\n\n        if (active === -1) {\n          active = collapsible ? false : 0;\n        }\n      } // Don't allow collapsible: false and active: false\n\n\n      if (!collapsible && active === false && this.anchors.length) {\n        active = 0;\n      }\n\n      return active;\n    },\n    _getCreateEventData: function _getCreateEventData() {\n      return {\n        tab: this.active,\n        panel: !this.active.length ? $() : this._getPanelForTab(this.active)\n      };\n    },\n    _tabKeydown: function _tabKeydown(event) {\n      var focusedTab = $($.ui.safeActiveElement(this.document[0])).closest(\"li\"),\n          selectedIndex = this.tabs.index(focusedTab),\n          goingForward = true;\n\n      if (this._handlePageNav(event)) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case $.ui.keyCode.RIGHT:\n        case $.ui.keyCode.DOWN:\n          selectedIndex++;\n          break;\n\n        case $.ui.keyCode.UP:\n        case $.ui.keyCode.LEFT:\n          goingForward = false;\n          selectedIndex--;\n          break;\n\n        case $.ui.keyCode.END:\n          selectedIndex = this.anchors.length - 1;\n          break;\n\n        case $.ui.keyCode.HOME:\n          selectedIndex = 0;\n          break;\n\n        case $.ui.keyCode.SPACE:\n          // Activate only, no collapsing\n          event.preventDefault();\n          clearTimeout(this.activating);\n\n          this._activate(selectedIndex);\n\n          return;\n\n        case $.ui.keyCode.ENTER:\n          // Toggle (cancel delayed activation, allow collapsing)\n          event.preventDefault();\n          clearTimeout(this.activating); // Determine if we should collapse or activate\n\n          this._activate(selectedIndex === this.options.active ? false : selectedIndex);\n\n          return;\n\n        default:\n          return;\n      } // Focus the appropriate tab, based on which key was pressed\n\n\n      event.preventDefault();\n      clearTimeout(this.activating);\n      selectedIndex = this._focusNextTab(selectedIndex, goingForward); // Navigating with control/command key will prevent automatic activation\n\n      if (!event.ctrlKey && !event.metaKey) {\n        // Update aria-selected immediately so that AT think the tab is already selected.\n        // Otherwise AT may confuse the user by stating that they need to activate the tab,\n        // but the tab will already be activated by the time the announcement finishes.\n        focusedTab.attr(\"aria-selected\", \"false\");\n        this.tabs.eq(selectedIndex).attr(\"aria-selected\", \"true\");\n        this.activating = this._delay(function () {\n          this.option(\"active\", selectedIndex);\n        }, this.delay);\n      }\n    },\n    _panelKeydown: function _panelKeydown(event) {\n      if (this._handlePageNav(event)) {\n        return;\n      } // Ctrl+up moves focus to the current tab\n\n\n      if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {\n        event.preventDefault();\n        this.active.trigger(\"focus\");\n      }\n    },\n    // Alt+page up/down moves focus to the previous/next tab (and activates)\n    _handlePageNav: function _handlePageNav(event) {\n      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {\n        this._activate(this._focusNextTab(this.options.active - 1, false));\n\n        return true;\n      }\n\n      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {\n        this._activate(this._focusNextTab(this.options.active + 1, true));\n\n        return true;\n      }\n    },\n    _findNextTab: function _findNextTab(index, goingForward) {\n      var lastTabIndex = this.tabs.length - 1;\n\n      function constrain() {\n        if (index > lastTabIndex) {\n          index = 0;\n        }\n\n        if (index < 0) {\n          index = lastTabIndex;\n        }\n\n        return index;\n      }\n\n      while ($.inArray(constrain(), this.options.disabled) !== -1) {\n        index = goingForward ? index + 1 : index - 1;\n      }\n\n      return index;\n    },\n    _focusNextTab: function _focusNextTab(index, goingForward) {\n      index = this._findNextTab(index, goingForward);\n      this.tabs.eq(index).trigger(\"focus\");\n      return index;\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"active\") {\n        // _activate() will handle invalid values and update this.options\n        this._activate(value);\n\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"collapsible\") {\n        this._toggleClass(\"ui-tabs-collapsible\", null, value); // Setting collapsible: false while collapsed; open first panel\n\n\n        if (!value && this.options.active === false) {\n          this._activate(0);\n        }\n      }\n\n      if (key === \"event\") {\n        this._setupEvents(value);\n      }\n\n      if (key === \"heightStyle\") {\n        this._setupHeightStyle(value);\n      }\n    },\n    _sanitizeSelector: function _sanitizeSelector(hash) {\n      return hash ? hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\") : \"\";\n    },\n    refresh: function refresh() {\n      var options = this.options,\n          lis = this.tablist.children(\":has(a[href])\"); // Get disabled tabs from class attribute from HTML\n      // this will get converted to a boolean if needed in _refresh()\n\n      options.disabled = $.map(lis.filter(\".ui-state-disabled\"), function (tab) {\n        return lis.index(tab);\n      });\n\n      this._processTabs(); // Was collapsed or no tabs\n\n\n      if (options.active === false || !this.anchors.length) {\n        options.active = false;\n        this.active = $(); // was active, but active tab is gone\n      } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {\n        // all remaining tabs are disabled\n        if (this.tabs.length === options.disabled.length) {\n          options.active = false;\n          this.active = $(); // activate previous tab\n        } else {\n          this._activate(this._findNextTab(Math.max(0, options.active - 1), false));\n        } // was active, active tab still exists\n\n      } else {\n        // make sure active index is correct\n        options.active = this.tabs.index(this.active);\n      }\n\n      this._refresh();\n    },\n    _refresh: function _refresh() {\n      this._setOptionDisabled(this.options.disabled);\n\n      this._setupEvents(this.options.event);\n\n      this._setupHeightStyle(this.options.heightStyle);\n\n      this.tabs.not(this.active).attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\",\n        tabIndex: -1\n      });\n      this.panels.not(this._getPanelForTab(this.active)).hide().attr({\n        \"aria-hidden\": \"true\"\n      }); // Make sure one tab is in the tab order\n\n      if (!this.active.length) {\n        this.tabs.eq(0).attr(\"tabIndex\", 0);\n      } else {\n        this.active.attr({\n          \"aria-selected\": \"true\",\n          \"aria-expanded\": \"true\",\n          tabIndex: 0\n        });\n\n        this._addClass(this.active, \"ui-tabs-active\", \"ui-state-active\");\n\n        this._getPanelForTab(this.active).show().attr({\n          \"aria-hidden\": \"false\"\n        });\n      }\n    },\n    _processTabs: function _processTabs() {\n      var that = this,\n          prevTabs = this.tabs,\n          prevAnchors = this.anchors,\n          prevPanels = this.panels;\n      this.tablist = this._getList().attr(\"role\", \"tablist\");\n\n      this._addClass(this.tablist, \"ui-tabs-nav\", \"ui-helper-reset ui-helper-clearfix ui-widget-header\"); // Prevent users from focusing disabled tabs via click\n\n\n      this.tablist.on(\"mousedown\" + this.eventNamespace, \"> li\", function (event) {\n        if ($(this).is(\".ui-state-disabled\")) {\n          event.preventDefault();\n        }\n      }) // Support: IE <9\n      // Preventing the default action in mousedown doesn't prevent IE\n      // from focusing the element, so if the anchor gets focused, blur.\n      // We don't have to worry about focusing the previously focused\n      // element since clicking on a non-focusable element should focus\n      // the body anyway.\n      .on(\"focus\" + this.eventNamespace, \".ui-tabs-anchor\", function () {\n        if ($(this).closest(\"li\").is(\".ui-state-disabled\")) {\n          this.blur();\n        }\n      });\n      this.tabs = this.tablist.find(\"> li:has(a[href])\").attr({\n        role: \"tab\",\n        tabIndex: -1\n      });\n\n      this._addClass(this.tabs, \"ui-tabs-tab\", \"ui-state-default\");\n\n      this.anchors = this.tabs.map(function () {\n        return $(\"a\", this)[0];\n      }).attr({\n        role: \"presentation\",\n        tabIndex: -1\n      });\n\n      this._addClass(this.anchors, \"ui-tabs-anchor\");\n\n      this.panels = $();\n      this.anchors.each(function (i, anchor) {\n        var selector,\n            panel,\n            panelId,\n            anchorId = $(anchor).uniqueId().attr(\"id\"),\n            tab = $(anchor).closest(\"li\"),\n            originalAriaControls = tab.attr(\"aria-controls\"); // Inline tab\n\n        if (that._isLocal(anchor)) {\n          selector = anchor.hash;\n          panelId = selector.substring(1);\n          panel = that.element.find(that._sanitizeSelector(selector)); // remote tab\n        } else {\n          // If the tab doesn't already have aria-controls,\n          // generate an id by using a throw-away element\n          panelId = tab.attr(\"aria-controls\") || $({}).uniqueId()[0].id;\n          selector = \"#\" + panelId;\n          panel = that.element.find(selector);\n\n          if (!panel.length) {\n            panel = that._createPanel(panelId);\n            panel.insertAfter(that.panels[i - 1] || that.tablist);\n          }\n\n          panel.attr(\"aria-live\", \"polite\");\n        }\n\n        if (panel.length) {\n          that.panels = that.panels.add(panel);\n        }\n\n        if (originalAriaControls) {\n          tab.data(\"ui-tabs-aria-controls\", originalAriaControls);\n        }\n\n        tab.attr({\n          \"aria-controls\": panelId,\n          \"aria-labelledby\": anchorId\n        });\n        panel.attr(\"aria-labelledby\", anchorId);\n      });\n      this.panels.attr(\"role\", \"tabpanel\");\n\n      this._addClass(this.panels, \"ui-tabs-panel\", \"ui-widget-content\"); // Avoid memory leaks (#10056)\n\n\n      if (prevTabs) {\n        this._off(prevTabs.not(this.tabs));\n\n        this._off(prevAnchors.not(this.anchors));\n\n        this._off(prevPanels.not(this.panels));\n      }\n    },\n    // Allow overriding how to find the list for rare usage scenarios (#7715)\n    _getList: function _getList() {\n      return this.tablist || this.element.find(\"ol, ul\").eq(0);\n    },\n    _createPanel: function _createPanel(id) {\n      return $(\"<div>\").attr(\"id\", id).data(\"ui-tabs-destroy\", true);\n    },\n    _setOptionDisabled: function _setOptionDisabled(disabled) {\n      var currentItem, li, i;\n\n      if ($.isArray(disabled)) {\n        if (!disabled.length) {\n          disabled = false;\n        } else if (disabled.length === this.anchors.length) {\n          disabled = true;\n        }\n      } // Disable tabs\n\n\n      for (i = 0; li = this.tabs[i]; i++) {\n        currentItem = $(li);\n\n        if (disabled === true || $.inArray(i, disabled) !== -1) {\n          currentItem.attr(\"aria-disabled\", \"true\");\n\n          this._addClass(currentItem, null, \"ui-state-disabled\");\n        } else {\n          currentItem.removeAttr(\"aria-disabled\");\n\n          this._removeClass(currentItem, null, \"ui-state-disabled\");\n        }\n      }\n\n      this.options.disabled = disabled;\n\n      this._toggleClass(this.widget(), this.widgetFullName + \"-disabled\", null, disabled === true);\n    },\n    _setupEvents: function _setupEvents(event) {\n      var events = {};\n\n      if (event) {\n        $.each(event.split(\" \"), function (index, eventName) {\n          events[eventName] = \"_eventHandler\";\n        });\n      }\n\n      this._off(this.anchors.add(this.tabs).add(this.panels)); // Always prevent the default action, even when disabled\n\n\n      this._on(true, this.anchors, {\n        click: function click(event) {\n          event.preventDefault();\n        }\n      });\n\n      this._on(this.anchors, events);\n\n      this._on(this.tabs, {\n        keydown: \"_tabKeydown\"\n      });\n\n      this._on(this.panels, {\n        keydown: \"_panelKeydown\"\n      });\n\n      this._focusable(this.tabs);\n\n      this._hoverable(this.tabs);\n    },\n    _setupHeightStyle: function _setupHeightStyle(heightStyle) {\n      var maxHeight,\n          parent = this.element.parent();\n\n      if (heightStyle === \"fill\") {\n        maxHeight = parent.height();\n        maxHeight -= this.element.outerHeight() - this.element.height();\n        this.element.siblings(\":visible\").each(function () {\n          var elem = $(this),\n              position = elem.css(\"position\");\n\n          if (position === \"absolute\" || position === \"fixed\") {\n            return;\n          }\n\n          maxHeight -= elem.outerHeight(true);\n        });\n        this.element.children().not(this.panels).each(function () {\n          maxHeight -= $(this).outerHeight(true);\n        });\n        this.panels.each(function () {\n          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));\n        }).css(\"overflow\", \"auto\");\n      } else if (heightStyle === \"auto\") {\n        maxHeight = 0;\n        this.panels.each(function () {\n          maxHeight = Math.max(maxHeight, $(this).height(\"\").height());\n        }).height(maxHeight);\n      }\n    },\n    _eventHandler: function _eventHandler(event) {\n      var options = this.options,\n          active = this.active,\n          anchor = $(event.currentTarget),\n          tab = anchor.closest(\"li\"),\n          clickedIsActive = tab[0] === active[0],\n          collapsing = clickedIsActive && options.collapsible,\n          toShow = collapsing ? $() : this._getPanelForTab(tab),\n          toHide = !active.length ? $() : this._getPanelForTab(active),\n          eventData = {\n        oldTab: active,\n        oldPanel: toHide,\n        newTab: collapsing ? $() : tab,\n        newPanel: toShow\n      };\n      event.preventDefault();\n\n      if (tab.hasClass(\"ui-state-disabled\") || // tab is already loading\n      tab.hasClass(\"ui-tabs-loading\") || // can't switch durning an animation\n      this.running || // click on active header, but not collapsible\n      clickedIsActive && !options.collapsible || // allow canceling activation\n      this._trigger(\"beforeActivate\", event, eventData) === false) {\n        return;\n      }\n\n      options.active = collapsing ? false : this.tabs.index(tab);\n      this.active = clickedIsActive ? $() : tab;\n\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n\n      if (!toHide.length && !toShow.length) {\n        $.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");\n      }\n\n      if (toShow.length) {\n        this.load(this.tabs.index(tab), event);\n      }\n\n      this._toggle(event, eventData);\n    },\n    // Handles show/hide for selecting tabs\n    _toggle: function _toggle(event, eventData) {\n      var that = this,\n          toShow = eventData.newPanel,\n          toHide = eventData.oldPanel;\n      this.running = true;\n\n      function complete() {\n        that.running = false;\n\n        that._trigger(\"activate\", event, eventData);\n      }\n\n      function show() {\n        that._addClass(eventData.newTab.closest(\"li\"), \"ui-tabs-active\", \"ui-state-active\");\n\n        if (toShow.length && that.options.show) {\n          that._show(toShow, that.options.show, complete);\n        } else {\n          toShow.show();\n          complete();\n        }\n      } // Start out by hiding, then showing, then completing\n\n\n      if (toHide.length && this.options.hide) {\n        this._hide(toHide, this.options.hide, function () {\n          that._removeClass(eventData.oldTab.closest(\"li\"), \"ui-tabs-active\", \"ui-state-active\");\n\n          show();\n        });\n      } else {\n        this._removeClass(eventData.oldTab.closest(\"li\"), \"ui-tabs-active\", \"ui-state-active\");\n\n        toHide.hide();\n        show();\n      }\n\n      toHide.attr(\"aria-hidden\", \"true\");\n      eventData.oldTab.attr({\n        \"aria-selected\": \"false\",\n        \"aria-expanded\": \"false\"\n      }); // If we're switching tabs, remove the old tab from the tab order.\n      // If we're opening from collapsed state, remove the previous tab from the tab order.\n      // If we're collapsing, then keep the collapsing tab in the tab order.\n\n      if (toShow.length && toHide.length) {\n        eventData.oldTab.attr(\"tabIndex\", -1);\n      } else if (toShow.length) {\n        this.tabs.filter(function () {\n          return $(this).attr(\"tabIndex\") === 0;\n        }).attr(\"tabIndex\", -1);\n      }\n\n      toShow.attr(\"aria-hidden\", \"false\");\n      eventData.newTab.attr({\n        \"aria-selected\": \"true\",\n        \"aria-expanded\": \"true\",\n        tabIndex: 0\n      });\n    },\n    _activate: function _activate(index) {\n      var anchor,\n          active = this._findActive(index); // Trying to activate the already active panel\n\n\n      if (active[0] === this.active[0]) {\n        return;\n      } // Trying to collapse, simulate a click on the current active header\n\n\n      if (!active.length) {\n        active = this.active;\n      }\n\n      anchor = active.find(\".ui-tabs-anchor\")[0];\n\n      this._eventHandler({\n        target: anchor,\n        currentTarget: anchor,\n        preventDefault: $.noop\n      });\n    },\n    _findActive: function _findActive(index) {\n      return index === false ? $() : this.tabs.eq(index);\n    },\n    _getIndex: function _getIndex(index) {\n      // meta-function to give users option to provide a href string instead of a numerical index.\n      if (typeof index === \"string\") {\n        index = this.anchors.index(this.anchors.filter(\"[href$='\" + $.ui.escapeSelector(index) + \"']\"));\n      }\n\n      return index;\n    },\n    _destroy: function _destroy() {\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n\n      this.tablist.removeAttr(\"role\").off(this.eventNamespace);\n      this.anchors.removeAttr(\"role tabIndex\").removeUniqueId();\n      this.tabs.add(this.panels).each(function () {\n        if ($.data(this, \"ui-tabs-destroy\")) {\n          $(this).remove();\n        } else {\n          $(this).removeAttr(\"role tabIndex \" + \"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded\");\n        }\n      });\n      this.tabs.each(function () {\n        var li = $(this),\n            prev = li.data(\"ui-tabs-aria-controls\");\n\n        if (prev) {\n          li.attr(\"aria-controls\", prev).removeData(\"ui-tabs-aria-controls\");\n        } else {\n          li.removeAttr(\"aria-controls\");\n        }\n      });\n      this.panels.show();\n\n      if (this.options.heightStyle !== \"content\") {\n        this.panels.css(\"height\", \"\");\n      }\n    },\n    enable: function enable(index) {\n      var disabled = this.options.disabled;\n\n      if (disabled === false) {\n        return;\n      }\n\n      if (index === undefined) {\n        disabled = false;\n      } else {\n        index = this._getIndex(index);\n\n        if ($.isArray(disabled)) {\n          disabled = $.map(disabled, function (num) {\n            return num !== index ? num : null;\n          });\n        } else {\n          disabled = $.map(this.tabs, function (li, num) {\n            return num !== index ? num : null;\n          });\n        }\n      }\n\n      this._setOptionDisabled(disabled);\n    },\n    disable: function disable(index) {\n      var disabled = this.options.disabled;\n\n      if (disabled === true) {\n        return;\n      }\n\n      if (index === undefined) {\n        disabled = true;\n      } else {\n        index = this._getIndex(index);\n\n        if ($.inArray(index, disabled) !== -1) {\n          return;\n        }\n\n        if ($.isArray(disabled)) {\n          disabled = $.merge([index], disabled).sort();\n        } else {\n          disabled = [index];\n        }\n      }\n\n      this._setOptionDisabled(disabled);\n    },\n    load: function load(index, event) {\n      index = this._getIndex(index);\n\n      var that = this,\n          tab = this.tabs.eq(index),\n          anchor = tab.find(\".ui-tabs-anchor\"),\n          panel = this._getPanelForTab(tab),\n          eventData = {\n        tab: tab,\n        panel: panel\n      },\n          complete = function complete(jqXHR, status) {\n        if (status === \"abort\") {\n          that.panels.stop(false, true);\n        }\n\n        that._removeClass(tab, \"ui-tabs-loading\");\n\n        panel.removeAttr(\"aria-busy\");\n\n        if (jqXHR === that.xhr) {\n          delete that.xhr;\n        }\n      }; // Not remote\n\n\n      if (this._isLocal(anchor[0])) {\n        return;\n      }\n\n      this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData)); // Support: jQuery <1.8\n      // jQuery <1.8 returns false if the request is canceled in beforeSend,\n      // but as of 1.8, $.ajax() always returns a jqXHR object.\n\n      if (this.xhr && this.xhr.statusText !== \"canceled\") {\n        this._addClass(tab, \"ui-tabs-loading\");\n\n        panel.attr(\"aria-busy\", \"true\");\n        this.xhr.done(function (response, status, jqXHR) {\n          // support: jQuery <1.8\n          // http://bugs.jquery.com/ticket/11778\n          setTimeout(function () {\n            panel.html(response);\n\n            that._trigger(\"load\", event, eventData);\n\n            complete(jqXHR, status);\n          }, 1);\n        }).fail(function (jqXHR, status) {\n          // support: jQuery <1.8\n          // http://bugs.jquery.com/ticket/11778\n          setTimeout(function () {\n            complete(jqXHR, status);\n          }, 1);\n        });\n      }\n    },\n    _ajaxSettings: function _ajaxSettings(anchor, event, eventData) {\n      var that = this;\n      return {\n        // Support: IE <11 only\n        // Strip any hash that exists to prevent errors with the Ajax request\n        url: anchor.attr(\"href\").replace(/#.*$/, \"\"),\n        beforeSend: function beforeSend(jqXHR, settings) {\n          return that._trigger(\"beforeLoad\", event, $.extend({\n            jqXHR: jqXHR,\n            ajaxSettings: settings\n          }, eventData));\n        }\n      };\n    },\n    _getPanelForTab: function _getPanelForTab(tab) {\n      var id = $(tab).attr(\"aria-controls\");\n      return this.element.find(this._sanitizeSelector(\"#\" + id));\n    }\n  }); // DEPRECATED\n  // TODO: Switch return back to widget declaration at top of file when this is removed\n\n  if ($.uiBackCompat !== false) {\n    // Backcompat for ui-tab class (now ui-tabs-tab)\n    $.widget(\"ui.tabs\", $.ui.tabs, {\n      _processTabs: function _processTabs() {\n        this._superApply(arguments);\n\n        this._addClass(this.tabs, \"ui-tab\");\n      }\n    });\n  }\n\n  var widgetsTabs = $.ui.tabs;\n  /*!\r\n   * jQuery UI Tooltip 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Tooltip\n  //>>group: Widgets\n  //>>description: Shows additional information for any element on hover or focus.\n  //>>docs: http://api.jqueryui.com/tooltip/\n  //>>demos: http://jqueryui.com/tooltip/\n  //>>css.structure: ../../themes/base/core.css\n  //>>css.structure: ../../themes/base/tooltip.css\n  //>>css.theme: ../../themes/base/theme.css\n\n  $.widget(\"ui.tooltip\", {\n    version: \"1.12.1\",\n    options: {\n      classes: {\n        \"ui-tooltip\": \"ui-corner-all ui-widget-shadow\"\n      },\n      content: function content() {\n        // support: IE<9, Opera in jQuery <1.7\n        // .text() can't accept undefined, so coerce to a string\n        var title = $(this).attr(\"title\") || \"\"; // Escape title, since we're going from an attribute to raw HTML\n\n        return $(\"<a>\").text(title).html();\n      },\n      hide: true,\n      // Disabled elements have inconsistent behavior across browsers (#8661)\n      items: \"[title]:not([disabled])\",\n      position: {\n        my: \"left top+15\",\n        at: \"left bottom\",\n        collision: \"flipfit flip\"\n      },\n      show: true,\n      track: false,\n      // Callbacks\n      close: null,\n      open: null\n    },\n    _addDescribedBy: function _addDescribedBy(elem, id) {\n      var describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/);\n      describedby.push(id);\n      elem.data(\"ui-tooltip-id\", id).attr(\"aria-describedby\", $.trim(describedby.join(\" \")));\n    },\n    _removeDescribedBy: function _removeDescribedBy(elem) {\n      var id = elem.data(\"ui-tooltip-id\"),\n          describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/),\n          index = $.inArray(id, describedby);\n\n      if (index !== -1) {\n        describedby.splice(index, 1);\n      }\n\n      elem.removeData(\"ui-tooltip-id\");\n      describedby = $.trim(describedby.join(\" \"));\n\n      if (describedby) {\n        elem.attr(\"aria-describedby\", describedby);\n      } else {\n        elem.removeAttr(\"aria-describedby\");\n      }\n    },\n    _create: function _create() {\n      this._on({\n        mouseover: \"open\",\n        focusin: \"open\"\n      }); // IDs of generated tooltips, needed for destroy\n\n\n      this.tooltips = {}; // IDs of parent tooltips where we removed the title attribute\n\n      this.parents = {}; // Append the aria-live region so tooltips announce correctly\n\n      this.liveRegion = $(\"<div>\").attr({\n        role: \"log\",\n        \"aria-live\": \"assertive\",\n        \"aria-relevant\": \"additions\"\n      }).appendTo(this.document[0].body);\n\n      this._addClass(this.liveRegion, null, \"ui-helper-hidden-accessible\");\n\n      this.disabledTitles = $([]);\n    },\n    _setOption: function _setOption(key, value) {\n      var that = this;\n\n      this._super(key, value);\n\n      if (key === \"content\") {\n        $.each(this.tooltips, function (id, tooltipData) {\n          that._updateContent(tooltipData.element);\n        });\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this[value ? \"_disable\" : \"_enable\"]();\n    },\n    _disable: function _disable() {\n      var that = this; // Close open tooltips\n\n      $.each(this.tooltips, function (id, tooltipData) {\n        var event = $.Event(\"blur\");\n        event.target = event.currentTarget = tooltipData.element[0];\n        that.close(event, true);\n      }); // Remove title attributes to prevent native tooltips\n\n      this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function () {\n        var element = $(this);\n\n        if (element.is(\"[title]\")) {\n          return element.data(\"ui-tooltip-title\", element.attr(\"title\")).removeAttr(\"title\");\n        }\n      }));\n    },\n    _enable: function _enable() {\n      // restore title attributes\n      this.disabledTitles.each(function () {\n        var element = $(this);\n\n        if (element.data(\"ui-tooltip-title\")) {\n          element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n        }\n      });\n      this.disabledTitles = $([]);\n    },\n    open: function open(event) {\n      var that = this,\n          target = $(event ? event.target : this.element) // we need closest here due to mouseover bubbling,\n      // but always pointing at the same event target\n      .closest(this.options.items); // No element to show a tooltip for or the tooltip is already open\n\n      if (!target.length || target.data(\"ui-tooltip-id\")) {\n        return;\n      }\n\n      if (target.attr(\"title\")) {\n        target.data(\"ui-tooltip-title\", target.attr(\"title\"));\n      }\n\n      target.data(\"ui-tooltip-open\", true); // Kill parent tooltips, custom or native, for hover\n\n      if (event && event.type === \"mouseover\") {\n        target.parents().each(function () {\n          var parent = $(this),\n              blurEvent;\n\n          if (parent.data(\"ui-tooltip-open\")) {\n            blurEvent = $.Event(\"blur\");\n            blurEvent.target = blurEvent.currentTarget = this;\n            that.close(blurEvent, true);\n          }\n\n          if (parent.attr(\"title\")) {\n            parent.uniqueId();\n            that.parents[this.id] = {\n              element: this,\n              title: parent.attr(\"title\")\n            };\n            parent.attr(\"title\", \"\");\n          }\n        });\n      }\n\n      this._registerCloseHandlers(event, target);\n\n      this._updateContent(target, event);\n    },\n    _updateContent: function _updateContent(target, event) {\n      var content,\n          contentOption = this.options.content,\n          that = this,\n          eventType = event ? event.type : null;\n\n      if (typeof contentOption === \"string\" || contentOption.nodeType || contentOption.jquery) {\n        return this._open(event, target, contentOption);\n      }\n\n      content = contentOption.call(target[0], function (response) {\n        // IE may instantly serve a cached response for ajax requests\n        // delay this call to _open so the other call to _open runs first\n        that._delay(function () {\n          // Ignore async response if tooltip was closed already\n          if (!target.data(\"ui-tooltip-open\")) {\n            return;\n          } // JQuery creates a special event for focusin when it doesn't\n          // exist natively. To improve performance, the native event\n          // object is reused and the type is changed. Therefore, we can't\n          // rely on the type being correct after the event finished\n          // bubbling, so we set it back to the previous value. (#8740)\n\n\n          if (event) {\n            event.type = eventType;\n          }\n\n          this._open(event, target, response);\n        });\n      });\n\n      if (content) {\n        this._open(event, target, content);\n      }\n    },\n    _open: function _open(event, target, content) {\n      var tooltipData,\n          tooltip,\n          delayedShow,\n          a11yContent,\n          positionOption = $.extend({}, this.options.position);\n\n      if (!content) {\n        return;\n      } // Content can be updated multiple times. If the tooltip already\n      // exists, then just update the content and bail.\n\n\n      tooltipData = this._find(target);\n\n      if (tooltipData) {\n        tooltipData.tooltip.find(\".ui-tooltip-content\").html(content);\n        return;\n      } // If we have a title, clear it to prevent the native tooltip\n      // we have to check first to avoid defining a title if none exists\n      // (we don't want to cause an element to start matching [title])\n      //\n      // We use removeAttr only for key events, to allow IE to export the correct\n      // accessible attributes. For mouse events, set to empty string to avoid\n      // native tooltip showing up (happens only when removing inside mouseover).\n\n\n      if (target.is(\"[title]\")) {\n        if (event && event.type === \"mouseover\") {\n          target.attr(\"title\", \"\");\n        } else {\n          target.removeAttr(\"title\");\n        }\n      }\n\n      tooltipData = this._tooltip(target);\n      tooltip = tooltipData.tooltip;\n\n      this._addDescribedBy(target, tooltip.attr(\"id\"));\n\n      tooltip.find(\".ui-tooltip-content\").html(content); // Support: Voiceover on OS X, JAWS on IE <= 9\n      // JAWS announces deletions even when aria-relevant=\"additions\"\n      // Voiceover will sometimes re-read the entire log region's contents from the beginning\n\n      this.liveRegion.children().hide();\n      a11yContent = $(\"<div>\").html(tooltip.find(\".ui-tooltip-content\").html());\n      a11yContent.removeAttr(\"name\").find(\"[name]\").removeAttr(\"name\");\n      a11yContent.removeAttr(\"id\").find(\"[id]\").removeAttr(\"id\");\n      a11yContent.appendTo(this.liveRegion);\n\n      function position(event) {\n        positionOption.of = event;\n\n        if (tooltip.is(\":hidden\")) {\n          return;\n        }\n\n        tooltip.position(positionOption);\n      }\n\n      if (this.options.track && event && /^mouse/.test(event.type)) {\n        this._on(this.document, {\n          mousemove: position\n        }); // trigger once to override element-relative positioning\n\n\n        position(event);\n      } else {\n        tooltip.position($.extend({\n          of: target\n        }, this.options.position));\n      }\n\n      tooltip.hide();\n\n      this._show(tooltip, this.options.show); // Handle tracking tooltips that are shown with a delay (#8644). As soon\n      // as the tooltip is visible, position the tooltip using the most recent\n      // event.\n      // Adds the check to add the timers only when both delay and track options are set (#14682)\n\n\n      if (this.options.track && this.options.show && this.options.show.delay) {\n        delayedShow = this.delayedShow = setInterval(function () {\n          if (tooltip.is(\":visible\")) {\n            position(positionOption.of);\n            clearInterval(delayedShow);\n          }\n        }, $.fx.interval);\n      }\n\n      this._trigger(\"open\", event, {\n        tooltip: tooltip\n      });\n    },\n    _registerCloseHandlers: function _registerCloseHandlers(event, target) {\n      var events = {\n        keyup: function keyup(event) {\n          if (event.keyCode === $.ui.keyCode.ESCAPE) {\n            var fakeEvent = $.Event(event);\n            fakeEvent.currentTarget = target[0];\n            this.close(fakeEvent, true);\n          }\n        }\n      }; // Only bind remove handler for delegated targets. Non-delegated\n      // tooltips will handle this in destroy.\n\n      if (target[0] !== this.element[0]) {\n        events.remove = function () {\n          this._removeTooltip(this._find(target).tooltip);\n        };\n      }\n\n      if (!event || event.type === \"mouseover\") {\n        events.mouseleave = \"close\";\n      }\n\n      if (!event || event.type === \"focusin\") {\n        events.focusout = \"close\";\n      }\n\n      this._on(true, target, events);\n    },\n    close: function close(event) {\n      var tooltip,\n          that = this,\n          target = $(event ? event.currentTarget : this.element),\n          tooltipData = this._find(target); // The tooltip may already be closed\n\n\n      if (!tooltipData) {\n        // We set ui-tooltip-open immediately upon open (in open()), but only set the\n        // additional data once there's actually content to show (in _open()). So even if the\n        // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in\n        // the period between open() and _open().\n        target.removeData(\"ui-tooltip-open\");\n        return;\n      }\n\n      tooltip = tooltipData.tooltip; // Disabling closes the tooltip, so we need to track when we're closing\n      // to avoid an infinite loop in case the tooltip becomes disabled on close\n\n      if (tooltipData.closing) {\n        return;\n      } // Clear the interval for delayed tracking tooltips\n\n\n      clearInterval(this.delayedShow); // Only set title if we had one before (see comment in _open())\n      // If the title attribute has changed since open(), don't restore\n\n      if (target.data(\"ui-tooltip-title\") && !target.attr(\"title\")) {\n        target.attr(\"title\", target.data(\"ui-tooltip-title\"));\n      }\n\n      this._removeDescribedBy(target);\n\n      tooltipData.hiding = true;\n      tooltip.stop(true);\n\n      this._hide(tooltip, this.options.hide, function () {\n        that._removeTooltip($(this));\n      });\n\n      target.removeData(\"ui-tooltip-open\");\n\n      this._off(target, \"mouseleave focusout keyup\"); // Remove 'remove' binding only on delegated targets\n\n\n      if (target[0] !== this.element[0]) {\n        this._off(target, \"remove\");\n      }\n\n      this._off(this.document, \"mousemove\");\n\n      if (event && event.type === \"mouseleave\") {\n        $.each(this.parents, function (id, parent) {\n          $(parent.element).attr(\"title\", parent.title);\n          delete that.parents[id];\n        });\n      }\n\n      tooltipData.closing = true;\n\n      this._trigger(\"close\", event, {\n        tooltip: tooltip\n      });\n\n      if (!tooltipData.hiding) {\n        tooltipData.closing = false;\n      }\n    },\n    _tooltip: function _tooltip(element) {\n      var tooltip = $(\"<div>\").attr(\"role\", \"tooltip\"),\n          content = $(\"<div>\").appendTo(tooltip),\n          id = tooltip.uniqueId().attr(\"id\");\n\n      this._addClass(content, \"ui-tooltip-content\");\n\n      this._addClass(tooltip, \"ui-tooltip\", \"ui-widget ui-widget-content\");\n\n      tooltip.appendTo(this._appendTo(element));\n      return this.tooltips[id] = {\n        element: element,\n        tooltip: tooltip\n      };\n    },\n    _find: function _find(target) {\n      var id = target.data(\"ui-tooltip-id\");\n      return id ? this.tooltips[id] : null;\n    },\n    _removeTooltip: function _removeTooltip(tooltip) {\n      tooltip.remove();\n      delete this.tooltips[tooltip.attr(\"id\")];\n    },\n    _appendTo: function _appendTo(target) {\n      var element = target.closest(\".ui-front, dialog\");\n\n      if (!element.length) {\n        element = this.document[0].body;\n      }\n\n      return element;\n    },\n    _destroy: function _destroy() {\n      var that = this; // Close open tooltips\n\n      $.each(this.tooltips, function (id, tooltipData) {\n        // Delegate to close method to handle common cleanup\n        var event = $.Event(\"blur\"),\n            element = tooltipData.element;\n        event.target = event.currentTarget = element[0];\n        that.close(event, true); // Remove immediately; destroying an open tooltip doesn't use the\n        // hide animation\n\n        $(\"#\" + id).remove(); // Restore the title\n\n        if (element.data(\"ui-tooltip-title\")) {\n          // If the title attribute has changed since open(), don't restore\n          if (!element.attr(\"title\")) {\n            element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n          }\n\n          element.removeData(\"ui-tooltip-title\");\n        }\n      });\n      this.liveRegion.remove();\n    }\n  }); // DEPRECATED\n  // TODO: Switch return back to widget declaration at top of file when this is removed\n\n  if ($.uiBackCompat !== false) {\n    // Backcompat for tooltipClass option\n    $.widget(\"ui.tooltip\", $.ui.tooltip, {\n      options: {\n        tooltipClass: null\n      },\n      _tooltip: function _tooltip() {\n        var tooltipData = this._superApply(arguments);\n\n        if (this.options.tooltipClass) {\n          tooltipData.tooltip.addClass(this.options.tooltipClass);\n        }\n\n        return tooltipData;\n      }\n    });\n  }\n\n  var widgetsTooltip = $.ui.tooltip;\n  /*!\r\n   * jQuery UI Effects 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Effects Core\n  //>>group: Effects\n  // jscs:disable maximumLineLength\n  //>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.\n  // jscs:enable maximumLineLength\n  //>>docs: http://api.jqueryui.com/category/effects-core/\n  //>>demos: http://jqueryui.com/effect/\n\n  var dataSpace = \"ui-effects-\",\n      dataSpaceStyle = \"ui-effects-style\",\n      dataSpaceAnimated = \"ui-effects-animated\",\n      // Create a local jQuery because jQuery Color relies on it and the\n  // global may not exist with AMD and a custom build (#10199)\n  jQuery = $;\n  $.effects = {\n    effect: {}\n  };\n  /*!\r\n   * jQuery Color Animations v2.1.2\r\n   * https://github.com/jquery/jquery-color\r\n   *\r\n   * Copyright 2014 jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   *\r\n   * Date: Wed Jan 16 08:47:09 2013 -0600\r\n   */\n\n  (function (jQuery, undefined) {\n    var stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor \" + \"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n        // Plusequals test for += 100 -= 100\n    rplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n        // A set of RE's that can match strings and generate color tuples.\n    stringParsers = [{\n      re: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2], execResult[3], execResult[4]];\n      }\n    }, {\n      re: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];\n      }\n    }, {\n      // This regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)];\n      }\n    }, {\n      // This regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)];\n      }\n    }, {\n      re: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      space: \"hsla\",\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];\n      }\n    }],\n        // JQuery.Color( )\n    color = jQuery.Color = function (color, green, blue, alpha) {\n      return new jQuery.Color.fn.parse(color, green, blue, alpha);\n    },\n        spaces = {\n      rgba: {\n        props: {\n          red: {\n            idx: 0,\n            type: \"byte\"\n          },\n          green: {\n            idx: 1,\n            type: \"byte\"\n          },\n          blue: {\n            idx: 2,\n            type: \"byte\"\n          }\n        }\n      },\n      hsla: {\n        props: {\n          hue: {\n            idx: 0,\n            type: \"degrees\"\n          },\n          saturation: {\n            idx: 1,\n            type: \"percent\"\n          },\n          lightness: {\n            idx: 2,\n            type: \"percent\"\n          }\n        }\n      }\n    },\n        propTypes = {\n      \"byte\": {\n        floor: true,\n        max: 255\n      },\n      \"percent\": {\n        max: 1\n      },\n      \"degrees\": {\n        mod: 360,\n        floor: true\n      }\n    },\n        support = color.support = {},\n        // Element for support tests\n    supportElem = jQuery(\"<p>\")[0],\n        // Colors = jQuery.Color.names\n    colors,\n        // Local aliases of functions called often\n    each = jQuery.each; // Determine rgba support immediately\n\n\n    supportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\n    support.rgba = supportElem.style.backgroundColor.indexOf(\"rgba\") > -1; // Define cache name and alpha properties\n    // for rgba and hsla spaces\n\n    each(spaces, function (spaceName, space) {\n      space.cache = \"_\" + spaceName;\n      space.props.alpha = {\n        idx: 3,\n        type: \"percent\",\n        def: 1\n      };\n    });\n\n    function clamp(value, prop, allowEmpty) {\n      var type = propTypes[prop.type] || {};\n\n      if (value == null) {\n        return allowEmpty || !prop.def ? null : prop.def;\n      } // ~~ is an short way of doing floor for positive numbers\n\n\n      value = type.floor ? ~~value : parseFloat(value); // IE will pass in empty strings as value for alpha,\n      // which will hit this case\n\n      if (isNaN(value)) {\n        return prop.def;\n      }\n\n      if (type.mod) {\n        // We add mod before modding to make sure that negatives values\n        // get converted properly: -10 -> 350\n        return (value + type.mod) % type.mod;\n      } // For now all property types without mod have min and max\n\n\n      return 0 > value ? 0 : type.max < value ? type.max : value;\n    }\n\n    function stringParse(string) {\n      var inst = color(),\n          rgba = inst._rgba = [];\n      string = string.toLowerCase();\n      each(stringParsers, function (i, parser) {\n        var parsed,\n            match = parser.re.exec(string),\n            values = match && parser.parse(match),\n            spaceName = parser.space || \"rgba\";\n\n        if (values) {\n          parsed = inst[spaceName](values); // If this was an rgba parse the assignment might happen twice\n          // oh well....\n\n          inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];\n          rgba = inst._rgba = parsed._rgba; // Exit each( stringParsers ) here because we matched\n\n          return false;\n        }\n      }); // Found a stringParser that handled it\n\n      if (rgba.length) {\n        // If this came from a parsed string, force \"transparent\" when alpha is 0\n        // chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n        if (rgba.join() === \"0,0,0,0\") {\n          jQuery.extend(rgba, colors.transparent);\n        }\n\n        return inst;\n      } // Named colors\n\n\n      return colors[string];\n    }\n\n    color.fn = jQuery.extend(color.prototype, {\n      parse: function parse(red, green, blue, alpha) {\n        if (red === undefined) {\n          this._rgba = [null, null, null, null];\n          return this;\n        }\n\n        if (red.jquery || red.nodeType) {\n          red = jQuery(red).css(green);\n          green = undefined;\n        }\n\n        var inst = this,\n            type = jQuery.type(red),\n            rgba = this._rgba = []; // More than 1 argument specified - assume ( red, green, blue, alpha )\n\n        if (green !== undefined) {\n          red = [red, green, blue, alpha];\n          type = \"array\";\n        }\n\n        if (type === \"string\") {\n          return this.parse(stringParse(red) || colors._default);\n        }\n\n        if (type === \"array\") {\n          each(spaces.rgba.props, function (key, prop) {\n            rgba[prop.idx] = clamp(red[prop.idx], prop);\n          });\n          return this;\n        }\n\n        if (type === \"object\") {\n          if (red instanceof color) {\n            each(spaces, function (spaceName, space) {\n              if (red[space.cache]) {\n                inst[space.cache] = red[space.cache].slice();\n              }\n            });\n          } else {\n            each(spaces, function (spaceName, space) {\n              var cache = space.cache;\n              each(space.props, function (key, prop) {\n                // If the cache doesn't exist, and we know how to convert\n                if (!inst[cache] && space.to) {\n                  // If the value was null, we don't need to copy it\n                  // if the key was alpha, we don't need to copy it either\n                  if (key === \"alpha\" || red[key] == null) {\n                    return;\n                  }\n\n                  inst[cache] = space.to(inst._rgba);\n                } // This is the only case where we allow nulls for ALL properties.\n                // call clamp with alwaysAllowEmpty\n\n\n                inst[cache][prop.idx] = clamp(red[key], prop, true);\n              }); // Everything defined but alpha?\n\n              if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {\n                // Use the default of 1\n                inst[cache][3] = 1;\n\n                if (space.from) {\n                  inst._rgba = space.from(inst[cache]);\n                }\n              }\n            });\n          }\n\n          return this;\n        }\n      },\n      is: function is(compare) {\n        var is = color(compare),\n            same = true,\n            inst = this;\n        each(spaces, function (_, space) {\n          var localCache,\n              isCache = is[space.cache];\n\n          if (isCache) {\n            localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];\n            each(space.props, function (_, prop) {\n              if (isCache[prop.idx] != null) {\n                same = isCache[prop.idx] === localCache[prop.idx];\n                return same;\n              }\n            });\n          }\n\n          return same;\n        });\n        return same;\n      },\n      _space: function _space() {\n        var used = [],\n            inst = this;\n        each(spaces, function (spaceName, space) {\n          if (inst[space.cache]) {\n            used.push(spaceName);\n          }\n        });\n        return used.pop();\n      },\n      transition: function transition(other, distance) {\n        var end = color(other),\n            spaceName = end._space(),\n            space = spaces[spaceName],\n            startColor = this.alpha() === 0 ? color(\"transparent\") : this,\n            start = startColor[space.cache] || space.to(startColor._rgba),\n            result = start.slice();\n\n        end = end[space.cache];\n        each(space.props, function (key, prop) {\n          var index = prop.idx,\n              startValue = start[index],\n              endValue = end[index],\n              type = propTypes[prop.type] || {}; // If null, don't override start value\n\n          if (endValue === null) {\n            return;\n          } // If null - use end\n\n\n          if (startValue === null) {\n            result[index] = endValue;\n          } else {\n            if (type.mod) {\n              if (endValue - startValue > type.mod / 2) {\n                startValue += type.mod;\n              } else if (startValue - endValue > type.mod / 2) {\n                startValue -= type.mod;\n              }\n            }\n\n            result[index] = clamp((endValue - startValue) * distance + startValue, prop);\n          }\n        });\n        return this[spaceName](result);\n      },\n      blend: function blend(opaque) {\n        // If we are already opaque - return ourself\n        if (this._rgba[3] === 1) {\n          return this;\n        }\n\n        var rgb = this._rgba.slice(),\n            a = rgb.pop(),\n            blend = color(opaque)._rgba;\n\n        return color(jQuery.map(rgb, function (v, i) {\n          return (1 - a) * blend[i] + a * v;\n        }));\n      },\n      toRgbaString: function toRgbaString() {\n        var prefix = \"rgba(\",\n            rgba = jQuery.map(this._rgba, function (v, i) {\n          return v == null ? i > 2 ? 1 : 0 : v;\n        });\n\n        if (rgba[3] === 1) {\n          rgba.pop();\n          prefix = \"rgb(\";\n        }\n\n        return prefix + rgba.join() + \")\";\n      },\n      toHslaString: function toHslaString() {\n        var prefix = \"hsla(\",\n            hsla = jQuery.map(this.hsla(), function (v, i) {\n          if (v == null) {\n            v = i > 2 ? 1 : 0;\n          } // Catch 1 and 2\n\n\n          if (i && i < 3) {\n            v = Math.round(v * 100) + \"%\";\n          }\n\n          return v;\n        });\n\n        if (hsla[3] === 1) {\n          hsla.pop();\n          prefix = \"hsl(\";\n        }\n\n        return prefix + hsla.join() + \")\";\n      },\n      toHexString: function toHexString(includeAlpha) {\n        var rgba = this._rgba.slice(),\n            alpha = rgba.pop();\n\n        if (includeAlpha) {\n          rgba.push(~~(alpha * 255));\n        }\n\n        return \"#\" + jQuery.map(rgba, function (v) {\n          // Default to 0 when nulls exist\n          v = (v || 0).toString(16);\n          return v.length === 1 ? \"0\" + v : v;\n        }).join(\"\");\n      },\n      toString: function toString() {\n        return this._rgba[3] === 0 ? \"transparent\" : this.toRgbaString();\n      }\n    });\n    color.fn.parse.prototype = color.fn; // Hsla conversions adapted from:\n    // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\n    function hue2rgb(p, q, h) {\n      h = (h + 1) % 1;\n\n      if (h * 6 < 1) {\n        return p + (q - p) * h * 6;\n      }\n\n      if (h * 2 < 1) {\n        return q;\n      }\n\n      if (h * 3 < 2) {\n        return p + (q - p) * (2 / 3 - h) * 6;\n      }\n\n      return p;\n    }\n\n    spaces.hsla.to = function (rgba) {\n      if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {\n        return [null, null, null, rgba[3]];\n      }\n\n      var r = rgba[0] / 255,\n          g = rgba[1] / 255,\n          b = rgba[2] / 255,\n          a = rgba[3],\n          max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          diff = max - min,\n          add = max + min,\n          l = add * 0.5,\n          h,\n          s;\n\n      if (min === max) {\n        h = 0;\n      } else if (r === max) {\n        h = 60 * (g - b) / diff + 360;\n      } else if (g === max) {\n        h = 60 * (b - r) / diff + 120;\n      } else {\n        h = 60 * (r - g) / diff + 240;\n      } // Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n      // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n\n\n      if (diff === 0) {\n        s = 0;\n      } else if (l <= 0.5) {\n        s = diff / add;\n      } else {\n        s = diff / (2 - add);\n      }\n\n      return [Math.round(h) % 360, s, l, a == null ? 1 : a];\n    };\n\n    spaces.hsla.from = function (hsla) {\n      if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {\n        return [null, null, null, hsla[3]];\n      }\n\n      var h = hsla[0] / 360,\n          s = hsla[1],\n          l = hsla[2],\n          a = hsla[3],\n          q = l <= 0.5 ? l * (1 + s) : l + s - l * s,\n          p = 2 * l - q;\n      return [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a];\n    };\n\n    each(spaces, function (spaceName, space) {\n      var props = space.props,\n          cache = space.cache,\n          to = space.to,\n          from = space.from; // Makes rgba() and hsla()\n\n      color.fn[spaceName] = function (value) {\n        // Generate a cache for this space if it doesn't exist\n        if (to && !this[cache]) {\n          this[cache] = to(this._rgba);\n        }\n\n        if (value === undefined) {\n          return this[cache].slice();\n        }\n\n        var ret,\n            type = jQuery.type(value),\n            arr = type === \"array\" || type === \"object\" ? value : arguments,\n            local = this[cache].slice();\n        each(props, function (key, prop) {\n          var val = arr[type === \"object\" ? key : prop.idx];\n\n          if (val == null) {\n            val = local[prop.idx];\n          }\n\n          local[prop.idx] = clamp(val, prop);\n        });\n\n        if (from) {\n          ret = color(from(local));\n          ret[cache] = local;\n          return ret;\n        } else {\n          return color(local);\n        }\n      }; // Makes red() green() blue() alpha() hue() saturation() lightness()\n\n\n      each(props, function (key, prop) {\n        // Alpha is included in more than one space\n        if (color.fn[key]) {\n          return;\n        }\n\n        color.fn[key] = function (value) {\n          var vtype = jQuery.type(value),\n              fn = key === \"alpha\" ? this._hsla ? \"hsla\" : \"rgba\" : spaceName,\n              local = this[fn](),\n              cur = local[prop.idx],\n              match;\n\n          if (vtype === \"undefined\") {\n            return cur;\n          }\n\n          if (vtype === \"function\") {\n            value = value.call(this, cur);\n            vtype = jQuery.type(value);\n          }\n\n          if (value == null && prop.empty) {\n            return this;\n          }\n\n          if (vtype === \"string\") {\n            match = rplusequals.exec(value);\n\n            if (match) {\n              value = cur + parseFloat(match[2]) * (match[1] === \"+\" ? 1 : -1);\n            }\n          }\n\n          local[prop.idx] = value;\n          return this[fn](local);\n        };\n      });\n    }); // Add cssHook and .fx.step function for each named hook.\n    // accept a space separated string of properties\n\n    color.hook = function (hook) {\n      var hooks = hook.split(\" \");\n      each(hooks, function (i, hook) {\n        jQuery.cssHooks[hook] = {\n          set: function set(elem, value) {\n            var parsed,\n                curElem,\n                backgroundColor = \"\";\n\n            if (value !== \"transparent\" && (jQuery.type(value) !== \"string\" || (parsed = stringParse(value)))) {\n              value = color(parsed || value);\n\n              if (!support.rgba && value._rgba[3] !== 1) {\n                curElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n\n                while ((backgroundColor === \"\" || backgroundColor === \"transparent\") && curElem && curElem.style) {\n                  try {\n                    backgroundColor = jQuery.css(curElem, \"backgroundColor\");\n                    curElem = curElem.parentNode;\n                  } catch (e) {}\n                }\n\n                value = value.blend(backgroundColor && backgroundColor !== \"transparent\" ? backgroundColor : \"_default\");\n              }\n\n              value = value.toRgbaString();\n            }\n\n            try {\n              elem.style[hook] = value;\n            } catch (e) {// Wrapped to prevent IE from throwing errors on \"invalid\" values like\n              // 'auto' or 'inherit'\n            }\n          }\n        };\n\n        jQuery.fx.step[hook] = function (fx) {\n          if (!fx.colorInit) {\n            fx.start = color(fx.elem, hook);\n            fx.end = color(fx.end);\n            fx.colorInit = true;\n          }\n\n          jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));\n        };\n      });\n    };\n\n    color.hook(stepHooks);\n    jQuery.cssHooks.borderColor = {\n      expand: function expand(value) {\n        var expanded = {};\n        each([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (i, part) {\n          expanded[\"border\" + part + \"Color\"] = value;\n        });\n        return expanded;\n      }\n    }; // Basic color names only.\n    // Usage of any of the other color names requires adding yourself or including\n    // jquery.color.svg-names.js.\n\n    colors = jQuery.Color.names = {\n      // 4.1. Basic color keywords\n      aqua: \"#00ffff\",\n      black: \"#000000\",\n      blue: \"#0000ff\",\n      fuchsia: \"#ff00ff\",\n      gray: \"#808080\",\n      green: \"#008000\",\n      lime: \"#00ff00\",\n      maroon: \"#800000\",\n      navy: \"#000080\",\n      olive: \"#808000\",\n      purple: \"#800080\",\n      red: \"#ff0000\",\n      silver: \"#c0c0c0\",\n      teal: \"#008080\",\n      white: \"#ffffff\",\n      yellow: \"#ffff00\",\n      // 4.2.3. \"transparent\" color keyword\n      transparent: [null, null, null, 0],\n      _default: \"#ffffff\"\n    };\n  })(jQuery);\n  /******************************************************************************/\n\n  /****************************** CLASS ANIMATIONS ******************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    var classAnimationActions = [\"add\", \"remove\", \"toggle\"],\n        shorthandStyles = {\n      border: 1,\n      borderBottom: 1,\n      borderColor: 1,\n      borderLeft: 1,\n      borderRight: 1,\n      borderTop: 1,\n      borderWidth: 1,\n      margin: 1,\n      padding: 1\n    };\n    $.each([\"borderLeftStyle\", \"borderRightStyle\", \"borderBottomStyle\", \"borderTopStyle\"], function (_, prop) {\n      $.fx.step[prop] = function (fx) {\n        if (fx.end !== \"none\" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {\n          jQuery.style(fx.elem, prop, fx.end);\n          fx.setAttr = true;\n        }\n      };\n    });\n\n    function getElementStyles(elem) {\n      var key,\n          len,\n          style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle,\n          styles = {};\n\n      if (style && style.length && style[0] && style[style[0]]) {\n        len = style.length;\n\n        while (len--) {\n          key = style[len];\n\n          if (typeof style[key] === \"string\") {\n            styles[$.camelCase(key)] = style[key];\n          }\n        } // Support: Opera, IE <9\n\n      } else {\n        for (key in style) {\n          if (typeof style[key] === \"string\") {\n            styles[key] = style[key];\n          }\n        }\n      }\n\n      return styles;\n    }\n\n    function styleDifference(oldStyle, newStyle) {\n      var diff = {},\n          name,\n          value;\n\n      for (name in newStyle) {\n        value = newStyle[name];\n\n        if (oldStyle[name] !== value) {\n          if (!shorthandStyles[name]) {\n            if ($.fx.step[name] || !isNaN(parseFloat(value))) {\n              diff[name] = value;\n            }\n          }\n        }\n      }\n\n      return diff;\n    } // Support: jQuery <1.8\n\n\n    if (!$.fn.addBack) {\n      $.fn.addBack = function (selector) {\n        return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n      };\n    }\n\n    $.effects.animateClass = function (value, duration, easing, callback) {\n      var o = $.speed(duration, easing, callback);\n      return this.queue(function () {\n        var animated = $(this),\n            baseClass = animated.attr(\"class\") || \"\",\n            applyClassChange,\n            allAnimations = o.children ? animated.find(\"*\").addBack() : animated; // Map the animated objects to store the original styles.\n\n        allAnimations = allAnimations.map(function () {\n          var el = $(this);\n          return {\n            el: el,\n            start: getElementStyles(this)\n          };\n        }); // Apply class change\n\n        applyClassChange = function applyClassChange() {\n          $.each(classAnimationActions, function (i, action) {\n            if (value[action]) {\n              animated[action + \"Class\"](value[action]);\n            }\n          });\n        };\n\n        applyClassChange(); // Map all animated objects again - calculate new styles and diff\n\n        allAnimations = allAnimations.map(function () {\n          this.end = getElementStyles(this.el[0]);\n          this.diff = styleDifference(this.start, this.end);\n          return this;\n        }); // Apply original class\n\n        animated.attr(\"class\", baseClass); // Map all animated objects again - this time collecting a promise\n\n        allAnimations = allAnimations.map(function () {\n          var styleInfo = this,\n              dfd = $.Deferred(),\n              opts = $.extend({}, o, {\n            queue: false,\n            complete: function complete() {\n              dfd.resolve(styleInfo);\n            }\n          });\n          this.el.animate(this.diff, opts);\n          return dfd.promise();\n        }); // Once all animations have completed:\n\n        $.when.apply($, allAnimations.get()).done(function () {\n          // Set the final class\n          applyClassChange(); // For each animated element,\n          // clear all css properties that were animated\n\n          $.each(arguments, function () {\n            var el = this.el;\n            $.each(this.diff, function (key) {\n              el.css(key, \"\");\n            });\n          }); // This is guarnteed to be there if you use jQuery.speed()\n          // it also handles dequeuing the next anim...\n\n          o.complete.call(animated[0]);\n        });\n      });\n    };\n\n    $.fn.extend({\n      addClass: function (orig) {\n        return function (classNames, speed, easing, callback) {\n          return speed ? $.effects.animateClass.call(this, {\n            add: classNames\n          }, speed, easing, callback) : orig.apply(this, arguments);\n        };\n      }($.fn.addClass),\n      removeClass: function (orig) {\n        return function (classNames, speed, easing, callback) {\n          return arguments.length > 1 ? $.effects.animateClass.call(this, {\n            remove: classNames\n          }, speed, easing, callback) : orig.apply(this, arguments);\n        };\n      }($.fn.removeClass),\n      toggleClass: function (orig) {\n        return function (classNames, force, speed, easing, callback) {\n          if (typeof force === \"boolean\" || force === undefined) {\n            if (!speed) {\n              // Without speed parameter\n              return orig.apply(this, arguments);\n            } else {\n              return $.effects.animateClass.call(this, force ? {\n                add: classNames\n              } : {\n                remove: classNames\n              }, speed, easing, callback);\n            }\n          } else {\n            // Without force parameter\n            return $.effects.animateClass.call(this, {\n              toggle: classNames\n            }, force, speed, easing);\n          }\n        };\n      }($.fn.toggleClass),\n      switchClass: function switchClass(remove, add, speed, easing, callback) {\n        return $.effects.animateClass.call(this, {\n          add: add,\n          remove: remove\n        }, speed, easing, callback);\n      }\n    });\n  })();\n  /******************************************************************************/\n\n  /*********************************** EFFECTS **********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    if ($.expr && $.expr.pseudos && $.expr.pseudos.animated) {\n      $.expr.pseudos.animated = function (orig) {\n        return function (elem) {\n          return !!$(elem).data(dataSpaceAnimated) || orig(elem);\n        };\n      }($.expr.pseudos.animated);\n    }\n\n    if ($.uiBackCompat !== false) {\n      $.extend($.effects, {\n        // Saves a set of properties in a data storage\n        save: function save(element, set) {\n          var i = 0,\n              length = set.length;\n\n          for (; i < length; i++) {\n            if (set[i] !== null) {\n              element.data(dataSpace + set[i], element[0].style[set[i]]);\n            }\n          }\n        },\n        // Restores a set of previously saved properties from a data storage\n        restore: function restore(element, set) {\n          var val,\n              i = 0,\n              length = set.length;\n\n          for (; i < length; i++) {\n            if (set[i] !== null) {\n              val = element.data(dataSpace + set[i]);\n              element.css(set[i], val);\n            }\n          }\n        },\n        setMode: function setMode(el, mode) {\n          if (mode === \"toggle\") {\n            mode = el.is(\":hidden\") ? \"show\" : \"hide\";\n          }\n\n          return mode;\n        },\n        // Wraps the element around a wrapper that copies position properties\n        createWrapper: function createWrapper(element) {\n          // If the element is already wrapped, return it\n          if (element.parent().is(\".ui-effects-wrapper\")) {\n            return element.parent();\n          } // Wrap the element\n\n\n          var props = {\n            width: element.outerWidth(true),\n            height: element.outerHeight(true),\n            \"float\": element.css(\"float\")\n          },\n              wrapper = $(\"<div></div>\").addClass(\"ui-effects-wrapper\").css({\n            fontSize: \"100%\",\n            background: \"transparent\",\n            border: \"none\",\n            margin: 0,\n            padding: 0\n          }),\n              // Store the size in case width/height are defined in % - Fixes #5245\n          size = {\n            width: element.width(),\n            height: element.height()\n          },\n              active = document.activeElement; // Support: Firefox\n          // Firefox incorrectly exposes anonymous content\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=561664\n\n          try {\n            active.id;\n          } catch (e) {\n            active = document.body;\n          }\n\n          element.wrap(wrapper); // Fixes #7595 - Elements lose focus when wrapped.\n\n          if (element[0] === active || $.contains(element[0], active)) {\n            $(active).trigger(\"focus\");\n          } // Hotfix for jQuery 1.4 since some change in wrap() seems to actually\n          // lose the reference to the wrapped element\n\n\n          wrapper = element.parent(); // Transfer positioning properties to the wrapper\n\n          if (element.css(\"position\") === \"static\") {\n            wrapper.css({\n              position: \"relative\"\n            });\n            element.css({\n              position: \"relative\"\n            });\n          } else {\n            $.extend(props, {\n              position: element.css(\"position\"),\n              zIndex: element.css(\"z-index\")\n            });\n            $.each([\"top\", \"left\", \"bottom\", \"right\"], function (i, pos) {\n              props[pos] = element.css(pos);\n\n              if (isNaN(parseInt(props[pos], 10))) {\n                props[pos] = \"auto\";\n              }\n            });\n            element.css({\n              position: \"relative\",\n              top: 0,\n              left: 0,\n              right: \"auto\",\n              bottom: \"auto\"\n            });\n          }\n\n          element.css(size);\n          return wrapper.css(props).show();\n        },\n        removeWrapper: function removeWrapper(element) {\n          var active = document.activeElement;\n\n          if (element.parent().is(\".ui-effects-wrapper\")) {\n            element.parent().replaceWith(element); // Fixes #7595 - Elements lose focus when wrapped.\n\n            if (element[0] === active || $.contains(element[0], active)) {\n              $(active).trigger(\"focus\");\n            }\n          }\n\n          return element;\n        }\n      });\n    }\n\n    $.extend($.effects, {\n      version: \"1.12.1\",\n      define: function define(name, mode, effect) {\n        if (!effect) {\n          effect = mode;\n          mode = \"effect\";\n        }\n\n        $.effects.effect[name] = effect;\n        $.effects.effect[name].mode = mode;\n        return effect;\n      },\n      scaledDimensions: function scaledDimensions(element, percent, direction) {\n        if (percent === 0) {\n          return {\n            height: 0,\n            width: 0,\n            outerHeight: 0,\n            outerWidth: 0\n          };\n        }\n\n        var x = direction !== \"horizontal\" ? (percent || 100) / 100 : 1,\n            y = direction !== \"vertical\" ? (percent || 100) / 100 : 1;\n        return {\n          height: element.height() * y,\n          width: element.width() * x,\n          outerHeight: element.outerHeight() * y,\n          outerWidth: element.outerWidth() * x\n        };\n      },\n      clipToBox: function clipToBox(animation) {\n        return {\n          width: animation.clip.right - animation.clip.left,\n          height: animation.clip.bottom - animation.clip.top,\n          left: animation.clip.left,\n          top: animation.clip.top\n        };\n      },\n      // Injects recently queued functions to be first in line (after \"inprogress\")\n      unshift: function unshift(element, queueLength, count) {\n        var queue = element.queue();\n\n        if (queueLength > 1) {\n          queue.splice.apply(queue, [1, 0].concat(queue.splice(queueLength, count)));\n        }\n\n        element.dequeue();\n      },\n      saveStyle: function saveStyle(element) {\n        element.data(dataSpaceStyle, element[0].style.cssText);\n      },\n      restoreStyle: function restoreStyle(element) {\n        element[0].style.cssText = element.data(dataSpaceStyle) || \"\";\n        element.removeData(dataSpaceStyle);\n      },\n      mode: function mode(element, _mode) {\n        var hidden = element.is(\":hidden\");\n\n        if (_mode === \"toggle\") {\n          _mode = hidden ? \"show\" : \"hide\";\n        }\n\n        if (hidden ? _mode === \"hide\" : _mode === \"show\") {\n          _mode = \"none\";\n        }\n\n        return _mode;\n      },\n      // Translates a [top,left] array into a baseline value\n      getBaseline: function getBaseline(origin, original) {\n        var y, x;\n\n        switch (origin[0]) {\n          case \"top\":\n            y = 0;\n            break;\n\n          case \"middle\":\n            y = 0.5;\n            break;\n\n          case \"bottom\":\n            y = 1;\n            break;\n\n          default:\n            y = origin[0] / original.height;\n        }\n\n        switch (origin[1]) {\n          case \"left\":\n            x = 0;\n            break;\n\n          case \"center\":\n            x = 0.5;\n            break;\n\n          case \"right\":\n            x = 1;\n            break;\n\n          default:\n            x = origin[1] / original.width;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n      // Creates a placeholder element so that the original element can be made absolute\n      createPlaceholder: function createPlaceholder(element) {\n        var placeholder,\n            cssPosition = element.css(\"position\"),\n            position = element.position(); // Lock in margins first to account for form elements, which\n        // will change margin if you explicitly set height\n        // see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380\n        // Support: Safari\n\n        element.css({\n          marginTop: element.css(\"marginTop\"),\n          marginBottom: element.css(\"marginBottom\"),\n          marginLeft: element.css(\"marginLeft\"),\n          marginRight: element.css(\"marginRight\")\n        }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight());\n\n        if (/^(static|relative)/.test(cssPosition)) {\n          cssPosition = \"absolute\";\n          placeholder = $(\"<\" + element[0].nodeName + \">\").insertAfter(element).css({\n            // Convert inline to inline block to account for inline elements\n            // that turn to inline block based on content (like img)\n            display: /^(inline|ruby)/.test(element.css(\"display\")) ? \"inline-block\" : \"block\",\n            visibility: \"hidden\",\n            // Margins need to be set to account for margin collapse\n            marginTop: element.css(\"marginTop\"),\n            marginBottom: element.css(\"marginBottom\"),\n            marginLeft: element.css(\"marginLeft\"),\n            marginRight: element.css(\"marginRight\"),\n            \"float\": element.css(\"float\")\n          }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass(\"ui-effects-placeholder\");\n          element.data(dataSpace + \"placeholder\", placeholder);\n        }\n\n        element.css({\n          position: cssPosition,\n          left: position.left,\n          top: position.top\n        });\n        return placeholder;\n      },\n      removePlaceholder: function removePlaceholder(element) {\n        var dataKey = dataSpace + \"placeholder\",\n            placeholder = element.data(dataKey);\n\n        if (placeholder) {\n          placeholder.remove();\n          element.removeData(dataKey);\n        }\n      },\n      // Removes a placeholder if it exists and restores\n      // properties that were modified during placeholder creation\n      cleanUp: function cleanUp(element) {\n        $.effects.restoreStyle(element);\n        $.effects.removePlaceholder(element);\n      },\n      setTransition: function setTransition(element, list, factor, value) {\n        value = value || {};\n        $.each(list, function (i, x) {\n          var unit = element.cssUnit(x);\n\n          if (unit[0] > 0) {\n            value[x] = unit[0] * factor + unit[1];\n          }\n        });\n        return value;\n      }\n    }); // Return an effect options object for the given parameters:\n\n    function _normalizeArguments(effect, options, speed, callback) {\n      // Allow passing all options as the first parameter\n      if ($.isPlainObject(effect)) {\n        options = effect;\n        effect = effect.effect;\n      } // Convert to an object\n\n\n      effect = {\n        effect: effect\n      }; // Catch (effect, null, ...)\n\n      if (options == null) {\n        options = {};\n      } // Catch (effect, callback)\n\n\n      if ($.isFunction(options)) {\n        callback = options;\n        speed = null;\n        options = {};\n      } // Catch (effect, speed, ?)\n\n\n      if (typeof options === \"number\" || $.fx.speeds[options]) {\n        callback = speed;\n        speed = options;\n        options = {};\n      } // Catch (effect, options, callback)\n\n\n      if ($.isFunction(speed)) {\n        callback = speed;\n        speed = null;\n      } // Add options to effect\n\n\n      if (options) {\n        $.extend(effect, options);\n      }\n\n      speed = speed || options.duration;\n      effect.duration = $.fx.off ? 0 : typeof speed === \"number\" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;\n      effect.complete = callback || options.complete;\n      return effect;\n    }\n\n    function standardAnimationOption(option) {\n      // Valid standard speeds (nothing, number, named speed)\n      if (!option || typeof option === \"number\" || $.fx.speeds[option]) {\n        return true;\n      } // Invalid strings - treat as \"normal\" speed\n\n\n      if (typeof option === \"string\" && !$.effects.effect[option]) {\n        return true;\n      } // Complete callback\n\n\n      if ($.isFunction(option)) {\n        return true;\n      } // Options hash (but not naming an effect)\n\n\n      if (typeof option === \"object\" && !option.effect) {\n        return true;\n      } // Didn't match any standard API\n\n\n      return false;\n    }\n\n    $.fn.extend({\n      effect: function effect()\n      /* effect, options, speed, callback */\n      {\n        var args = _normalizeArguments.apply(this, arguments),\n            effectMethod = $.effects.effect[args.effect],\n            defaultMode = effectMethod.mode,\n            queue = args.queue,\n            queueName = queue || \"fx\",\n            complete = args.complete,\n            mode = args.mode,\n            modes = [],\n            prefilter = function prefilter(next) {\n          var el = $(this),\n              normalizedMode = $.effects.mode(el, mode) || defaultMode; // Sentinel for duck-punching the :animated psuedo-selector\n\n          el.data(dataSpaceAnimated, true); // Save effect mode for later use,\n          // we can't just call $.effects.mode again later,\n          // as the .show() below destroys the initial state\n\n          modes.push(normalizedMode); // See $.uiBackCompat inside of run() for removal of defaultMode in 1.13\n\n          if (defaultMode && (normalizedMode === \"show\" || normalizedMode === defaultMode && normalizedMode === \"hide\")) {\n            el.show();\n          }\n\n          if (!defaultMode || normalizedMode !== \"none\") {\n            $.effects.saveStyle(el);\n          }\n\n          if ($.isFunction(next)) {\n            next();\n          }\n        };\n\n        if ($.fx.off || !effectMethod) {\n          // Delegate to the original method (e.g., .show()) if possible\n          if (mode) {\n            return this[mode](args.duration, complete);\n          } else {\n            return this.each(function () {\n              if (complete) {\n                complete.call(this);\n              }\n            });\n          }\n        }\n\n        function run(next) {\n          var elem = $(this);\n\n          function cleanup() {\n            elem.removeData(dataSpaceAnimated);\n            $.effects.cleanUp(elem);\n\n            if (args.mode === \"hide\") {\n              elem.hide();\n            }\n\n            done();\n          }\n\n          function done() {\n            if ($.isFunction(complete)) {\n              complete.call(elem[0]);\n            }\n\n            if ($.isFunction(next)) {\n              next();\n            }\n          } // Override mode option on a per element basis,\n          // as toggle can be either show or hide depending on element state\n\n\n          args.mode = modes.shift();\n\n          if ($.uiBackCompat !== false && !defaultMode) {\n            if (elem.is(\":hidden\") ? mode === \"hide\" : mode === \"show\") {\n              // Call the core method to track \"olddisplay\" properly\n              elem[mode]();\n              done();\n            } else {\n              effectMethod.call(elem[0], args, done);\n            }\n          } else {\n            if (args.mode === \"none\") {\n              // Call the core method to track \"olddisplay\" properly\n              elem[mode]();\n              done();\n            } else {\n              effectMethod.call(elem[0], args, cleanup);\n            }\n          }\n        } // Run prefilter on all elements first to ensure that\n        // any showing or hiding happens before placeholder creation,\n        // which ensures that any layout changes are correctly captured.\n\n\n        return queue === false ? this.each(prefilter).each(run) : this.queue(queueName, prefilter).queue(queueName, run);\n      },\n      show: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option)) {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"show\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.show),\n      hide: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option)) {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"hide\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.hide),\n      toggle: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option) || typeof option === \"boolean\") {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"toggle\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.toggle),\n      cssUnit: function cssUnit(key) {\n        var style = this.css(key),\n            val = [];\n        $.each([\"em\", \"px\", \"%\", \"pt\"], function (i, unit) {\n          if (style.indexOf(unit) > 0) {\n            val = [parseFloat(style), unit];\n          }\n        });\n        return val;\n      },\n      cssClip: function cssClip(clipObj) {\n        if (clipObj) {\n          return this.css(\"clip\", \"rect(\" + clipObj.top + \"px \" + clipObj.right + \"px \" + clipObj.bottom + \"px \" + clipObj.left + \"px)\");\n        }\n\n        return parseClip(this.css(\"clip\"), this);\n      },\n      transfer: function transfer(options, done) {\n        var element = $(this),\n            target = $(options.to),\n            targetFixed = target.css(\"position\") === \"fixed\",\n            body = $(\"body\"),\n            fixTop = targetFixed ? body.scrollTop() : 0,\n            fixLeft = targetFixed ? body.scrollLeft() : 0,\n            endPosition = target.offset(),\n            animation = {\n          top: endPosition.top - fixTop,\n          left: endPosition.left - fixLeft,\n          height: target.innerHeight(),\n          width: target.innerWidth()\n        },\n            startPosition = element.offset(),\n            transfer = $(\"<div class='ui-effects-transfer'></div>\").appendTo(\"body\").addClass(options.className).css({\n          top: startPosition.top - fixTop,\n          left: startPosition.left - fixLeft,\n          height: element.innerHeight(),\n          width: element.innerWidth(),\n          position: targetFixed ? \"fixed\" : \"absolute\"\n        }).animate(animation, options.duration, options.easing, function () {\n          transfer.remove();\n\n          if ($.isFunction(done)) {\n            done();\n          }\n        });\n      }\n    });\n\n    function parseClip(str, element) {\n      var outerWidth = element.outerWidth(),\n          outerHeight = element.outerHeight(),\n          clipRegex = /^rect\\((-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto)\\)$/,\n          values = clipRegex.exec(str) || [\"\", 0, outerWidth, outerHeight, 0];\n      return {\n        top: parseFloat(values[1]) || 0,\n        right: values[2] === \"auto\" ? outerWidth : parseFloat(values[2]),\n        bottom: values[3] === \"auto\" ? outerHeight : parseFloat(values[3]),\n        left: parseFloat(values[4]) || 0\n      };\n    }\n\n    $.fx.step.clip = function (fx) {\n      if (!fx.clipInit) {\n        fx.start = $(fx.elem).cssClip();\n\n        if (typeof fx.end === \"string\") {\n          fx.end = parseClip(fx.end, fx.elem);\n        }\n\n        fx.clipInit = true;\n      }\n\n      $(fx.elem).cssClip({\n        top: fx.pos * (fx.end.top - fx.start.top) + fx.start.top,\n        right: fx.pos * (fx.end.right - fx.start.right) + fx.start.right,\n        bottom: fx.pos * (fx.end.bottom - fx.start.bottom) + fx.start.bottom,\n        left: fx.pos * (fx.end.left - fx.start.left) + fx.start.left\n      });\n    };\n  })();\n  /******************************************************************************/\n\n  /*********************************** EASING ***********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    // Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\n    var baseEasings = {};\n    $.each([\"Quad\", \"Cubic\", \"Quart\", \"Quint\", \"Expo\"], function (i, name) {\n      baseEasings[name] = function (p) {\n        return Math.pow(p, i + 2);\n      };\n    });\n    $.extend(baseEasings, {\n      Sine: function Sine(p) {\n        return 1 - Math.cos(p * Math.PI / 2);\n      },\n      Circ: function Circ(p) {\n        return 1 - Math.sqrt(1 - p * p);\n      },\n      Elastic: function Elastic(p) {\n        return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);\n      },\n      Back: function Back(p) {\n        return p * p * (3 * p - 2);\n      },\n      Bounce: function Bounce(p) {\n        var pow2,\n            bounce = 4;\n\n        while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}\n\n        return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);\n      }\n    });\n    $.each(baseEasings, function (name, easeIn) {\n      $.easing[\"easeIn\" + name] = easeIn;\n\n      $.easing[\"easeOut\" + name] = function (p) {\n        return 1 - easeIn(1 - p);\n      };\n\n      $.easing[\"easeInOut\" + name] = function (p) {\n        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;\n      };\n    });\n  })();\n\n  var effect = $.effects;\n  /*!\r\n   * jQuery UI Effects Blind 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Blind Effect\n  //>>group: Effects\n  //>>description: Blinds the element.\n  //>>docs: http://api.jqueryui.com/blind-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectBlind = $.effects.define(\"blind\", \"hide\", function (options, done) {\n    var map = {\n      up: [\"bottom\", \"top\"],\n      vertical: [\"bottom\", \"top\"],\n      down: [\"top\", \"bottom\"],\n      left: [\"right\", \"left\"],\n      horizontal: [\"right\", \"left\"],\n      right: [\"left\", \"right\"]\n    },\n        element = $(this),\n        direction = options.direction || \"up\",\n        start = element.cssClip(),\n        animate = {\n      clip: $.extend({}, start)\n    },\n        placeholder = $.effects.createPlaceholder(element);\n    animate.clip[map[direction][0]] = animate.clip[map[direction][1]];\n\n    if (options.mode === \"show\") {\n      element.cssClip(animate.clip);\n\n      if (placeholder) {\n        placeholder.css($.effects.clipToBox(animate));\n      }\n\n      animate.clip = start;\n    }\n\n    if (placeholder) {\n      placeholder.animate($.effects.clipToBox(animate), options.duration, options.easing);\n    }\n\n    element.animate(animate, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: done\n    });\n  });\n  /*!\r\n   * jQuery UI Effects Bounce 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Bounce Effect\n  //>>group: Effects\n  //>>description: Bounces an element horizontally or vertically n times.\n  //>>docs: http://api.jqueryui.com/bounce-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectBounce = $.effects.define(\"bounce\", function (options, done) {\n    var upAnim,\n        downAnim,\n        refValue,\n        element = $(this),\n        // Defaults:\n    mode = options.mode,\n        hide = mode === \"hide\",\n        show = mode === \"show\",\n        direction = options.direction || \"up\",\n        distance = options.distance,\n        times = options.times || 5,\n        // Number of internal animations\n    anims = times * 2 + (show || hide ? 1 : 0),\n        speed = options.duration / anims,\n        easing = options.easing,\n        // Utility:\n    ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        motion = direction === \"up\" || direction === \"left\",\n        i = 0,\n        queuelen = element.queue().length;\n    $.effects.createPlaceholder(element);\n    refValue = element.css(ref); // Default distance for the BIGGEST bounce is the outer Distance / 3\n\n    if (!distance) {\n      distance = element[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"]() / 3;\n    }\n\n    if (show) {\n      downAnim = {\n        opacity: 1\n      };\n      downAnim[ref] = refValue; // If we are showing, force opacity 0 and set the initial position\n      // then do the \"first\" animation\n\n      element.css(\"opacity\", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);\n    } // Start at the smallest distance if we are hiding\n\n\n    if (hide) {\n      distance = distance / Math.pow(2, times - 1);\n    }\n\n    downAnim = {};\n    downAnim[ref] = refValue; // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\n\n    for (; i < times; i++) {\n      upAnim = {};\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      element.animate(upAnim, speed, easing).animate(downAnim, speed, easing);\n      distance = hide ? distance * 2 : distance / 2;\n    } // Last Bounce when Hiding\n\n\n    if (hide) {\n      upAnim = {\n        opacity: 0\n      };\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      element.animate(upAnim, speed, easing);\n    }\n\n    element.queue(done);\n    $.effects.unshift(element, queuelen, anims + 1);\n  });\n  /*!\r\n   * jQuery UI Effects Clip 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Clip Effect\n  //>>group: Effects\n  //>>description: Clips the element on and off like an old TV.\n  //>>docs: http://api.jqueryui.com/clip-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectClip = $.effects.define(\"clip\", \"hide\", function (options, done) {\n    var start,\n        animate = {},\n        element = $(this),\n        direction = options.direction || \"vertical\",\n        both = direction === \"both\",\n        horizontal = both || direction === \"horizontal\",\n        vertical = both || direction === \"vertical\";\n    start = element.cssClip();\n    animate.clip = {\n      top: vertical ? (start.bottom - start.top) / 2 : start.top,\n      right: horizontal ? (start.right - start.left) / 2 : start.right,\n      bottom: vertical ? (start.bottom - start.top) / 2 : start.bottom,\n      left: horizontal ? (start.right - start.left) / 2 : start.left\n    };\n    $.effects.createPlaceholder(element);\n\n    if (options.mode === \"show\") {\n      element.cssClip(animate.clip);\n      animate.clip = start;\n    }\n\n    element.animate(animate, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: done\n    });\n  });\n  /*!\r\n   * jQuery UI Effects Drop 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Drop Effect\n  //>>group: Effects\n  //>>description: Moves an element in one direction and hides it at the same time.\n  //>>docs: http://api.jqueryui.com/drop-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectDrop = $.effects.define(\"drop\", \"hide\", function (options, done) {\n    var distance,\n        element = $(this),\n        mode = options.mode,\n        show = mode === \"show\",\n        direction = options.direction || \"left\",\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        motion = direction === \"up\" || direction === \"left\" ? \"-=\" : \"+=\",\n        oppositeMotion = motion === \"+=\" ? \"-=\" : \"+=\",\n        animation = {\n      opacity: 0\n    };\n    $.effects.createPlaceholder(element);\n    distance = options.distance || element[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true) / 2;\n    animation[ref] = motion + distance;\n\n    if (show) {\n      element.css(animation);\n      animation[ref] = oppositeMotion + distance;\n      animation.opacity = 1;\n    } // Animate\n\n\n    element.animate(animation, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: done\n    });\n  });\n  /*!\r\n   * jQuery UI Effects Explode 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Explode Effect\n  //>>group: Effects\n  // jscs:disable maximumLineLength\n  //>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.\n  // jscs:enable maximumLineLength\n  //>>docs: http://api.jqueryui.com/explode-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectExplode = $.effects.define(\"explode\", \"hide\", function (options, done) {\n    var i,\n        j,\n        left,\n        top,\n        mx,\n        my,\n        rows = options.pieces ? Math.round(Math.sqrt(options.pieces)) : 3,\n        cells = rows,\n        element = $(this),\n        mode = options.mode,\n        show = mode === \"show\",\n        // Show and then visibility:hidden the element before calculating offset\n    offset = element.show().css(\"visibility\", \"hidden\").offset(),\n        // Width and height of a piece\n    width = Math.ceil(element.outerWidth() / cells),\n        height = Math.ceil(element.outerHeight() / rows),\n        pieces = []; // Children animate complete:\n\n    function childComplete() {\n      pieces.push(this);\n\n      if (pieces.length === rows * cells) {\n        animComplete();\n      }\n    } // Clone the element for each row and cell.\n\n\n    for (i = 0; i < rows; i++) {\n      // ===>\n      top = offset.top + i * height;\n      my = i - (rows - 1) / 2;\n\n      for (j = 0; j < cells; j++) {\n        // |||\n        left = offset.left + j * width;\n        mx = j - (cells - 1) / 2; // Create a clone of the now hidden main element that will be absolute positioned\n        // within a wrapper div off the -left and -top equal to size of our pieces\n\n        element.clone().appendTo(\"body\").wrap(\"<div></div>\").css({\n          position: \"absolute\",\n          visibility: \"visible\",\n          left: -j * width,\n          top: -i * height\n        }) // Select the wrapper - make it overflow: hidden and absolute positioned based on\n        // where the original was located +left and +top equal to the size of pieces\n        .parent().addClass(\"ui-effects-explode\").css({\n          position: \"absolute\",\n          overflow: \"hidden\",\n          width: width,\n          height: height,\n          left: left + (show ? mx * width : 0),\n          top: top + (show ? my * height : 0),\n          opacity: show ? 0 : 1\n        }).animate({\n          left: left + (show ? 0 : mx * width),\n          top: top + (show ? 0 : my * height),\n          opacity: show ? 1 : 0\n        }, options.duration || 500, options.easing, childComplete);\n      }\n    }\n\n    function animComplete() {\n      element.css({\n        visibility: \"visible\"\n      });\n      $(pieces).remove();\n      done();\n    }\n  });\n  /*!\r\n   * jQuery UI Effects Fade 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Fade Effect\n  //>>group: Effects\n  //>>description: Fades the element.\n  //>>docs: http://api.jqueryui.com/fade-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectFade = $.effects.define(\"fade\", \"toggle\", function (options, done) {\n    var show = options.mode === \"show\";\n    $(this).css(\"opacity\", show ? 0 : 1).animate({\n      opacity: show ? 1 : 0\n    }, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: done\n    });\n  });\n  /*!\r\n   * jQuery UI Effects Fold 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Fold Effect\n  //>>group: Effects\n  //>>description: Folds an element first horizontally and then vertically.\n  //>>docs: http://api.jqueryui.com/fold-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectFold = $.effects.define(\"fold\", \"hide\", function (options, done) {\n    // Create element\n    var element = $(this),\n        mode = options.mode,\n        show = mode === \"show\",\n        hide = mode === \"hide\",\n        size = options.size || 15,\n        percent = /([0-9]+)%/.exec(size),\n        horizFirst = !!options.horizFirst,\n        ref = horizFirst ? [\"right\", \"bottom\"] : [\"bottom\", \"right\"],\n        duration = options.duration / 2,\n        placeholder = $.effects.createPlaceholder(element),\n        start = element.cssClip(),\n        animation1 = {\n      clip: $.extend({}, start)\n    },\n        animation2 = {\n      clip: $.extend({}, start)\n    },\n        distance = [start[ref[0]], start[ref[1]]],\n        queuelen = element.queue().length;\n\n    if (percent) {\n      size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];\n    }\n\n    animation1.clip[ref[0]] = size;\n    animation2.clip[ref[0]] = size;\n    animation2.clip[ref[1]] = 0;\n\n    if (show) {\n      element.cssClip(animation2.clip);\n\n      if (placeholder) {\n        placeholder.css($.effects.clipToBox(animation2));\n      }\n\n      animation2.clip = start;\n    } // Animate\n\n\n    element.queue(function (next) {\n      if (placeholder) {\n        placeholder.animate($.effects.clipToBox(animation1), duration, options.easing).animate($.effects.clipToBox(animation2), duration, options.easing);\n      }\n\n      next();\n    }).animate(animation1, duration, options.easing).animate(animation2, duration, options.easing).queue(done);\n    $.effects.unshift(element, queuelen, 4);\n  });\n  /*!\r\n   * jQuery UI Effects Highlight 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Highlight Effect\n  //>>group: Effects\n  //>>description: Highlights the background of an element in a defined color for a custom duration.\n  //>>docs: http://api.jqueryui.com/highlight-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectHighlight = $.effects.define(\"highlight\", \"show\", function (options, done) {\n    var element = $(this),\n        animation = {\n      backgroundColor: element.css(\"backgroundColor\")\n    };\n\n    if (options.mode === \"hide\") {\n      animation.opacity = 0;\n    }\n\n    $.effects.saveStyle(element);\n    element.css({\n      backgroundImage: \"none\",\n      backgroundColor: options.color || \"#ffff99\"\n    }).animate(animation, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: done\n    });\n  });\n  /*!\r\n   * jQuery UI Effects Size 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Size Effect\n  //>>group: Effects\n  //>>description: Resize an element to a specified width and height.\n  //>>docs: http://api.jqueryui.com/size-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectSize = $.effects.define(\"size\", function (options, done) {\n    // Create element\n    var baseline,\n        factor,\n        temp,\n        element = $(this),\n        // Copy for children\n    cProps = [\"fontSize\"],\n        vProps = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"],\n        hProps = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"],\n        // Set options\n    mode = options.mode,\n        restore = mode !== \"effect\",\n        scale = options.scale || \"both\",\n        origin = options.origin || [\"middle\", \"center\"],\n        position = element.css(\"position\"),\n        pos = element.position(),\n        original = $.effects.scaledDimensions(element),\n        from = options.from || original,\n        to = options.to || $.effects.scaledDimensions(element, 0);\n    $.effects.createPlaceholder(element);\n\n    if (mode === \"show\") {\n      temp = from;\n      from = to;\n      to = temp;\n    } // Set scaling factor\n\n\n    factor = {\n      from: {\n        y: from.height / original.height,\n        x: from.width / original.width\n      },\n      to: {\n        y: to.height / original.height,\n        x: to.width / original.width\n      }\n    }; // Scale the css box\n\n    if (scale === \"box\" || scale === \"both\") {\n      // Vertical props scaling\n      if (factor.from.y !== factor.to.y) {\n        from = $.effects.setTransition(element, vProps, factor.from.y, from);\n        to = $.effects.setTransition(element, vProps, factor.to.y, to);\n      } // Horizontal props scaling\n\n\n      if (factor.from.x !== factor.to.x) {\n        from = $.effects.setTransition(element, hProps, factor.from.x, from);\n        to = $.effects.setTransition(element, hProps, factor.to.x, to);\n      }\n    } // Scale the content\n\n\n    if (scale === \"content\" || scale === \"both\") {\n      // Vertical props scaling\n      if (factor.from.y !== factor.to.y) {\n        from = $.effects.setTransition(element, cProps, factor.from.y, from);\n        to = $.effects.setTransition(element, cProps, factor.to.y, to);\n      }\n    } // Adjust the position properties based on the provided origin points\n\n\n    if (origin) {\n      baseline = $.effects.getBaseline(origin, original);\n      from.top = (original.outerHeight - from.outerHeight) * baseline.y + pos.top;\n      from.left = (original.outerWidth - from.outerWidth) * baseline.x + pos.left;\n      to.top = (original.outerHeight - to.outerHeight) * baseline.y + pos.top;\n      to.left = (original.outerWidth - to.outerWidth) * baseline.x + pos.left;\n    }\n\n    element.css(from); // Animate the children if desired\n\n    if (scale === \"content\" || scale === \"both\") {\n      vProps = vProps.concat([\"marginTop\", \"marginBottom\"]).concat(cProps);\n      hProps = hProps.concat([\"marginLeft\", \"marginRight\"]); // Only animate children with width attributes specified\n      // TODO: is this right? should we include anything with css width specified as well\n\n      element.find(\"*[width]\").each(function () {\n        var child = $(this),\n            childOriginal = $.effects.scaledDimensions(child),\n            childFrom = {\n          height: childOriginal.height * factor.from.y,\n          width: childOriginal.width * factor.from.x,\n          outerHeight: childOriginal.outerHeight * factor.from.y,\n          outerWidth: childOriginal.outerWidth * factor.from.x\n        },\n            childTo = {\n          height: childOriginal.height * factor.to.y,\n          width: childOriginal.width * factor.to.x,\n          outerHeight: childOriginal.height * factor.to.y,\n          outerWidth: childOriginal.width * factor.to.x\n        }; // Vertical props scaling\n\n        if (factor.from.y !== factor.to.y) {\n          childFrom = $.effects.setTransition(child, vProps, factor.from.y, childFrom);\n          childTo = $.effects.setTransition(child, vProps, factor.to.y, childTo);\n        } // Horizontal props scaling\n\n\n        if (factor.from.x !== factor.to.x) {\n          childFrom = $.effects.setTransition(child, hProps, factor.from.x, childFrom);\n          childTo = $.effects.setTransition(child, hProps, factor.to.x, childTo);\n        }\n\n        if (restore) {\n          $.effects.saveStyle(child);\n        } // Animate children\n\n\n        child.css(childFrom);\n        child.animate(childTo, options.duration, options.easing, function () {\n          // Restore children\n          if (restore) {\n            $.effects.restoreStyle(child);\n          }\n        });\n      });\n    } // Animate\n\n\n    element.animate(to, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: function complete() {\n        var offset = element.offset();\n\n        if (to.opacity === 0) {\n          element.css(\"opacity\", from.opacity);\n        }\n\n        if (!restore) {\n          element.css(\"position\", position === \"static\" ? \"relative\" : position).offset(offset); // Need to save style here so that automatic style restoration\n          // doesn't restore to the original styles from before the animation.\n\n          $.effects.saveStyle(element);\n        }\n\n        done();\n      }\n    });\n  });\n  /*!\r\n   * jQuery UI Effects Scale 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Scale Effect\n  //>>group: Effects\n  //>>description: Grows or shrinks an element and its content.\n  //>>docs: http://api.jqueryui.com/scale-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectScale = $.effects.define(\"scale\", function (options, done) {\n    // Create element\n    var el = $(this),\n        mode = options.mode,\n        percent = parseInt(options.percent, 10) || (parseInt(options.percent, 10) === 0 ? 0 : mode !== \"effect\" ? 0 : 100),\n        newOptions = $.extend(true, {\n      from: $.effects.scaledDimensions(el),\n      to: $.effects.scaledDimensions(el, percent, options.direction || \"both\"),\n      origin: options.origin || [\"middle\", \"center\"]\n    }, options); // Fade option to support puff\n\n    if (options.fade) {\n      newOptions.from.opacity = 1;\n      newOptions.to.opacity = 0;\n    }\n\n    $.effects.effect.size.call(this, newOptions, done);\n  });\n  /*!\r\n   * jQuery UI Effects Puff 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Puff Effect\n  //>>group: Effects\n  //>>description: Creates a puff effect by scaling the element up and hiding it at the same time.\n  //>>docs: http://api.jqueryui.com/puff-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectPuff = $.effects.define(\"puff\", \"hide\", function (options, done) {\n    var newOptions = $.extend(true, {}, options, {\n      fade: true,\n      percent: parseInt(options.percent, 10) || 150\n    });\n    $.effects.effect.scale.call(this, newOptions, done);\n  });\n  /*!\r\n   * jQuery UI Effects Pulsate 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Pulsate Effect\n  //>>group: Effects\n  //>>description: Pulsates an element n times by changing the opacity to zero and back.\n  //>>docs: http://api.jqueryui.com/pulsate-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectPulsate = $.effects.define(\"pulsate\", \"show\", function (options, done) {\n    var element = $(this),\n        mode = options.mode,\n        show = mode === \"show\",\n        hide = mode === \"hide\",\n        showhide = show || hide,\n        // Showing or hiding leaves off the \"last\" animation\n    anims = (options.times || 5) * 2 + (showhide ? 1 : 0),\n        duration = options.duration / anims,\n        animateTo = 0,\n        i = 1,\n        queuelen = element.queue().length;\n\n    if (show || !element.is(\":visible\")) {\n      element.css(\"opacity\", 0).show();\n      animateTo = 1;\n    } // Anims - 1 opacity \"toggles\"\n\n\n    for (; i < anims; i++) {\n      element.animate({\n        opacity: animateTo\n      }, duration, options.easing);\n      animateTo = 1 - animateTo;\n    }\n\n    element.animate({\n      opacity: animateTo\n    }, duration, options.easing);\n    element.queue(done);\n    $.effects.unshift(element, queuelen, anims + 1);\n  });\n  /*!\r\n   * jQuery UI Effects Shake 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Shake Effect\n  //>>group: Effects\n  //>>description: Shakes an element horizontally or vertically n times.\n  //>>docs: http://api.jqueryui.com/shake-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectShake = $.effects.define(\"shake\", function (options, done) {\n    var i = 1,\n        element = $(this),\n        direction = options.direction || \"left\",\n        distance = options.distance || 20,\n        times = options.times || 3,\n        anims = times * 2 + 1,\n        speed = Math.round(options.duration / anims),\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        positiveMotion = direction === \"up\" || direction === \"left\",\n        animation = {},\n        animation1 = {},\n        animation2 = {},\n        queuelen = element.queue().length;\n    $.effects.createPlaceholder(element); // Animation\n\n    animation[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance;\n    animation1[ref] = (positiveMotion ? \"+=\" : \"-=\") + distance * 2;\n    animation2[ref] = (positiveMotion ? \"-=\" : \"+=\") + distance * 2; // Animate\n\n    element.animate(animation, speed, options.easing); // Shakes\n\n    for (; i < times; i++) {\n      element.animate(animation1, speed, options.easing).animate(animation2, speed, options.easing);\n    }\n\n    element.animate(animation1, speed, options.easing).animate(animation, speed / 2, options.easing).queue(done);\n    $.effects.unshift(element, queuelen, anims + 1);\n  });\n  /*!\r\n   * jQuery UI Effects Slide 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Slide Effect\n  //>>group: Effects\n  //>>description: Slides an element in and out of the viewport.\n  //>>docs: http://api.jqueryui.com/slide-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effectsEffectSlide = $.effects.define(\"slide\", \"show\", function (options, done) {\n    var startClip,\n        startRef,\n        element = $(this),\n        map = {\n      up: [\"bottom\", \"top\"],\n      down: [\"top\", \"bottom\"],\n      left: [\"right\", \"left\"],\n      right: [\"left\", \"right\"]\n    },\n        mode = options.mode,\n        direction = options.direction || \"left\",\n        ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        positiveMotion = direction === \"up\" || direction === \"left\",\n        distance = options.distance || element[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true),\n        animation = {};\n    $.effects.createPlaceholder(element);\n    startClip = element.cssClip();\n    startRef = element.position()[ref]; // Define hide animation\n\n    animation[ref] = (positiveMotion ? -1 : 1) * distance + startRef;\n    animation.clip = element.cssClip();\n    animation.clip[map[direction][1]] = animation.clip[map[direction][0]]; // Reverse the animation if we're showing\n\n    if (mode === \"show\") {\n      element.cssClip(animation.clip);\n      element.css(ref, animation[ref]);\n      animation.clip = startClip;\n      animation[ref] = startRef;\n    } // Actually animate\n\n\n    element.animate(animation, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: done\n    });\n  });\n  /*!\r\n   * jQuery UI Effects Transfer 1.12.1\r\n   * http://jqueryui.com\r\n   *\r\n   * Copyright jQuery Foundation and other contributors\r\n   * Released under the MIT license.\r\n   * http://jquery.org/license\r\n   */\n  //>>label: Transfer Effect\n  //>>group: Effects\n  //>>description: Displays a transfer effect from one element to another.\n  //>>docs: http://api.jqueryui.com/transfer-effect/\n  //>>demos: http://jqueryui.com/effect/\n\n  var effect;\n\n  if ($.uiBackCompat !== false) {\n    effect = $.effects.define(\"transfer\", function (options, done) {\n      $(this).transfer(options, done);\n    });\n  }\n\n  var effectsEffectTransfer = effect;\n});","map":null,"metadata":{},"sourceType":"script"}