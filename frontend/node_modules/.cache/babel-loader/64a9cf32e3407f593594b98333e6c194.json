{"ast":null,"code":"/**\r\n* @version: 3.0.5\r\n* @author: Dan Grossman http://www.dangrossman.info/\r\n* @copyright: Copyright (c) 2012-2019 Dan Grossman. All rights reserved.\r\n* @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php\r\n* @website: http://www.daterangepicker.com/\r\n*/\n// Following the UMD template https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Make globaly available as well\n    define(['moment', 'jquery'], function (moment, jquery) {\n      if (!jquery.fn) jquery.fn = {}; // webpack server rendering\n\n      if (typeof moment !== 'function' && moment.default) moment = moment.default;\n      return factory(moment, jquery);\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    // Node / Browserify\n    //isomorphic issue\n    var jQuery = typeof window != 'undefined' ? window.jQuery : undefined;\n\n    if (!jQuery) {\n      jQuery = require('jquery');\n      if (!jQuery.fn) jQuery.fn = {};\n    }\n\n    var moment = typeof window != 'undefined' && typeof window.moment != 'undefined' ? window.moment : require('moment');\n    module.exports = factory(moment, jQuery);\n  } else {\n    // Browser globals\n    root.daterangepicker = factory(root.moment, root.jQuery);\n  }\n})(this, function (moment, $) {\n  var DateRangePicker = function DateRangePicker(element, options, cb) {\n    //default settings for options\n    this.parentEl = 'body';\n    this.element = $(element);\n    this.startDate = moment().startOf('day');\n    this.endDate = moment().endOf('day');\n    this.minDate = false;\n    this.maxDate = false;\n    this.maxSpan = false;\n    this.autoApply = false;\n    this.singleDatePicker = false;\n    this.showDropdowns = false;\n    this.minYear = moment().subtract(100, 'year').format('YYYY');\n    this.maxYear = moment().add(100, 'year').format('YYYY');\n    this.showWeekNumbers = false;\n    this.showISOWeekNumbers = false;\n    this.showCustomRangeLabel = true;\n    this.timePicker = false;\n    this.timePicker24Hour = false;\n    this.timePickerIncrement = 1;\n    this.timePickerSeconds = false;\n    this.linkedCalendars = true;\n    this.autoUpdateInput = true;\n    this.alwaysShowCalendars = false;\n    this.ranges = {};\n    this.opens = 'right';\n    if (this.element.hasClass('pull-right')) this.opens = 'left';\n    this.drops = 'down';\n    if (this.element.hasClass('dropup')) this.drops = 'up';\n    this.buttonClasses = 'btn btn-sm';\n    this.applyButtonClasses = 'btn-primary';\n    this.cancelButtonClasses = 'btn-default';\n    this.locale = {\n      direction: 'ltr',\n      format: moment.localeData().longDateFormat('L'),\n      separator: ' - ',\n      applyLabel: 'Apply',\n      cancelLabel: 'Cancel',\n      weekLabel: 'W',\n      customRangeLabel: 'Custom Range',\n      daysOfWeek: moment.weekdaysMin(),\n      monthNames: moment.monthsShort(),\n      firstDay: moment.localeData().firstDayOfWeek()\n    };\n\n    this.callback = function () {}; //some state information\n\n\n    this.isShowing = false;\n    this.leftCalendar = {};\n    this.rightCalendar = {}; //custom options from user\n\n    if (typeof options !== 'object' || options === null) options = {}; //allow setting options with data attributes\n    //data-api options will be overwritten with custom javascript options\n\n    options = $.extend(this.element.data(), options); //html template for the picker UI\n\n    if (typeof options.template !== 'string' && !(options.template instanceof $)) options.template = '<div class=\"daterangepicker\">' + '<div class=\"ranges\"></div>' + '<div class=\"drp-calendar left\">' + '<div class=\"calendar-table\"></div>' + '<div class=\"calendar-time\"></div>' + '</div>' + '<div class=\"drp-calendar right\">' + '<div class=\"calendar-table\"></div>' + '<div class=\"calendar-time\"></div>' + '</div>' + '<div class=\"drp-buttons\">' + '<span class=\"drp-selected\"></span>' + '<button class=\"cancelBtn\" type=\"button\"></button>' + '<button class=\"applyBtn\" disabled=\"disabled\" type=\"button\"></button> ' + '</div>' + '</div>';\n    this.parentEl = options.parentEl && $(options.parentEl).length ? $(options.parentEl) : $(this.parentEl);\n    this.container = $(options.template).appendTo(this.parentEl); //\n    // handle all the possible options overriding defaults\n    //\n\n    if (typeof options.locale === 'object') {\n      if (typeof options.locale.direction === 'string') this.locale.direction = options.locale.direction;\n      if (typeof options.locale.format === 'string') this.locale.format = options.locale.format;\n      if (typeof options.locale.separator === 'string') this.locale.separator = options.locale.separator;\n      if (typeof options.locale.daysOfWeek === 'object') this.locale.daysOfWeek = options.locale.daysOfWeek.slice();\n      if (typeof options.locale.monthNames === 'object') this.locale.monthNames = options.locale.monthNames.slice();\n      if (typeof options.locale.firstDay === 'number') this.locale.firstDay = options.locale.firstDay;\n      if (typeof options.locale.applyLabel === 'string') this.locale.applyLabel = options.locale.applyLabel;\n      if (typeof options.locale.cancelLabel === 'string') this.locale.cancelLabel = options.locale.cancelLabel;\n      if (typeof options.locale.weekLabel === 'string') this.locale.weekLabel = options.locale.weekLabel;\n\n      if (typeof options.locale.customRangeLabel === 'string') {\n        //Support unicode chars in the custom range name.\n        var elem = document.createElement('textarea');\n        elem.innerHTML = options.locale.customRangeLabel;\n        var rangeHtml = elem.value;\n        this.locale.customRangeLabel = rangeHtml;\n      }\n    }\n\n    this.container.addClass(this.locale.direction);\n    if (typeof options.startDate === 'string') this.startDate = moment(options.startDate, this.locale.format);\n    if (typeof options.endDate === 'string') this.endDate = moment(options.endDate, this.locale.format);\n    if (typeof options.minDate === 'string') this.minDate = moment(options.minDate, this.locale.format);\n    if (typeof options.maxDate === 'string') this.maxDate = moment(options.maxDate, this.locale.format);\n    if (typeof options.startDate === 'object') this.startDate = moment(options.startDate);\n    if (typeof options.endDate === 'object') this.endDate = moment(options.endDate);\n    if (typeof options.minDate === 'object') this.minDate = moment(options.minDate);\n    if (typeof options.maxDate === 'object') this.maxDate = moment(options.maxDate); // sanity check for bad options\n\n    if (this.minDate && this.startDate.isBefore(this.minDate)) this.startDate = this.minDate.clone(); // sanity check for bad options\n\n    if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate.clone();\n    if (typeof options.applyButtonClasses === 'string') this.applyButtonClasses = options.applyButtonClasses;\n    if (typeof options.applyClass === 'string') //backwards compat\n      this.applyButtonClasses = options.applyClass;\n    if (typeof options.cancelButtonClasses === 'string') this.cancelButtonClasses = options.cancelButtonClasses;\n    if (typeof options.cancelClass === 'string') //backwards compat\n      this.cancelButtonClasses = options.cancelClass;\n    if (typeof options.maxSpan === 'object') this.maxSpan = options.maxSpan;\n    if (typeof options.dateLimit === 'object') //backwards compat\n      this.maxSpan = options.dateLimit;\n    if (typeof options.opens === 'string') this.opens = options.opens;\n    if (typeof options.drops === 'string') this.drops = options.drops;\n    if (typeof options.showWeekNumbers === 'boolean') this.showWeekNumbers = options.showWeekNumbers;\n    if (typeof options.showISOWeekNumbers === 'boolean') this.showISOWeekNumbers = options.showISOWeekNumbers;\n    if (typeof options.buttonClasses === 'string') this.buttonClasses = options.buttonClasses;\n    if (typeof options.buttonClasses === 'object') this.buttonClasses = options.buttonClasses.join(' ');\n    if (typeof options.showDropdowns === 'boolean') this.showDropdowns = options.showDropdowns;\n    if (typeof options.minYear === 'number') this.minYear = options.minYear;\n    if (typeof options.maxYear === 'number') this.maxYear = options.maxYear;\n    if (typeof options.showCustomRangeLabel === 'boolean') this.showCustomRangeLabel = options.showCustomRangeLabel;\n\n    if (typeof options.singleDatePicker === 'boolean') {\n      this.singleDatePicker = options.singleDatePicker;\n      if (this.singleDatePicker) this.endDate = this.startDate.clone();\n    }\n\n    if (typeof options.timePicker === 'boolean') this.timePicker = options.timePicker;\n    if (typeof options.timePickerSeconds === 'boolean') this.timePickerSeconds = options.timePickerSeconds;\n    if (typeof options.timePickerIncrement === 'number') this.timePickerIncrement = options.timePickerIncrement;\n    if (typeof options.timePicker24Hour === 'boolean') this.timePicker24Hour = options.timePicker24Hour;\n    if (typeof options.autoApply === 'boolean') this.autoApply = options.autoApply;\n    if (typeof options.autoUpdateInput === 'boolean') this.autoUpdateInput = options.autoUpdateInput;\n    if (typeof options.linkedCalendars === 'boolean') this.linkedCalendars = options.linkedCalendars;\n    if (typeof options.isInvalidDate === 'function') this.isInvalidDate = options.isInvalidDate;\n    if (typeof options.isCustomDate === 'function') this.isCustomDate = options.isCustomDate;\n    if (typeof options.alwaysShowCalendars === 'boolean') this.alwaysShowCalendars = options.alwaysShowCalendars; // update day names order to firstDay\n\n    if (this.locale.firstDay != 0) {\n      var iterator = this.locale.firstDay;\n\n      while (iterator > 0) {\n        this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());\n        iterator--;\n      }\n    }\n\n    var start, end, range; //if no start/end dates set, check if an input element contains initial values\n\n    if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {\n      if ($(this.element).is(':text')) {\n        var val = $(this.element).val(),\n            split = val.split(this.locale.separator);\n        start = end = null;\n\n        if (split.length == 2) {\n          start = moment(split[0], this.locale.format);\n          end = moment(split[1], this.locale.format);\n        } else if (this.singleDatePicker && val !== \"\") {\n          start = moment(val, this.locale.format);\n          end = moment(val, this.locale.format);\n        }\n\n        if (start !== null && end !== null) {\n          this.setStartDate(start);\n          this.setEndDate(end);\n        }\n      }\n    }\n\n    if (typeof options.ranges === 'object') {\n      for (range in options.ranges) {\n        if (typeof options.ranges[range][0] === 'string') start = moment(options.ranges[range][0], this.locale.format);else start = moment(options.ranges[range][0]);\n        if (typeof options.ranges[range][1] === 'string') end = moment(options.ranges[range][1], this.locale.format);else end = moment(options.ranges[range][1]); // If the start or end date exceed those allowed by the minDate or maxSpan\n        // options, shorten the range to the allowable period.\n\n        if (this.minDate && start.isBefore(this.minDate)) start = this.minDate.clone();\n        var maxDate = this.maxDate;\n        if (this.maxSpan && maxDate && start.clone().add(this.maxSpan).isAfter(maxDate)) maxDate = start.clone().add(this.maxSpan);\n        if (maxDate && end.isAfter(maxDate)) end = maxDate.clone(); // If the end of the range is before the minimum or the start of the range is\n        // after the maximum, don't display this range option at all.\n\n        if (this.minDate && end.isBefore(this.minDate, this.timepicker ? 'minute' : 'day') || maxDate && start.isAfter(maxDate, this.timepicker ? 'minute' : 'day')) continue; //Support unicode chars in the range names.\n\n        var elem = document.createElement('textarea');\n        elem.innerHTML = range;\n        var rangeHtml = elem.value;\n        this.ranges[rangeHtml] = [start, end];\n      }\n\n      var list = '<ul>';\n\n      for (range in this.ranges) {\n        list += '<li data-range-key=\"' + range + '\">' + range + '</li>';\n      }\n\n      if (this.showCustomRangeLabel) {\n        list += '<li data-range-key=\"' + this.locale.customRangeLabel + '\">' + this.locale.customRangeLabel + '</li>';\n      }\n\n      list += '</ul>';\n      this.container.find('.ranges').prepend(list);\n    }\n\n    if (typeof cb === 'function') {\n      this.callback = cb;\n    }\n\n    if (!this.timePicker) {\n      this.startDate = this.startDate.startOf('day');\n      this.endDate = this.endDate.endOf('day');\n      this.container.find('.calendar-time').hide();\n    } //can't be used together for now\n\n\n    if (this.timePicker && this.autoApply) this.autoApply = false;\n\n    if (this.autoApply) {\n      this.container.addClass('auto-apply');\n    }\n\n    if (typeof options.ranges === 'object') this.container.addClass('show-ranges');\n\n    if (this.singleDatePicker) {\n      this.container.addClass('single');\n      this.container.find('.drp-calendar.left').addClass('single');\n      this.container.find('.drp-calendar.left').show();\n      this.container.find('.drp-calendar.right').hide();\n\n      if (!this.timePicker) {\n        this.container.addClass('auto-apply');\n      }\n    }\n\n    if (typeof options.ranges === 'undefined' && !this.singleDatePicker || this.alwaysShowCalendars) {\n      this.container.addClass('show-calendar');\n    }\n\n    this.container.addClass('opens' + this.opens); //apply CSS classes and labels to buttons\n\n    this.container.find('.applyBtn, .cancelBtn').addClass(this.buttonClasses);\n    if (this.applyButtonClasses.length) this.container.find('.applyBtn').addClass(this.applyButtonClasses);\n    if (this.cancelButtonClasses.length) this.container.find('.cancelBtn').addClass(this.cancelButtonClasses);\n    this.container.find('.applyBtn').html(this.locale.applyLabel);\n    this.container.find('.cancelBtn').html(this.locale.cancelLabel); //\n    // event listeners\n    //\n\n    this.container.find('.drp-calendar').on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this)).on('click.daterangepicker', '.next', $.proxy(this.clickNext, this)).on('mousedown.daterangepicker', 'td.available', $.proxy(this.clickDate, this)).on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this)).on('change.daterangepicker', 'select.yearselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.monthselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this));\n    this.container.find('.ranges').on('click.daterangepicker', 'li', $.proxy(this.clickRange, this));\n    this.container.find('.drp-buttons').on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this)).on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this));\n\n    if (this.element.is('input') || this.element.is('button')) {\n      this.element.on({\n        'click.daterangepicker': $.proxy(this.show, this),\n        'focus.daterangepicker': $.proxy(this.show, this),\n        'keyup.daterangepicker': $.proxy(this.elementChanged, this),\n        'keydown.daterangepicker': $.proxy(this.keydown, this) //IE 11 compatibility\n\n      });\n    } else {\n      this.element.on('click.daterangepicker', $.proxy(this.toggle, this));\n      this.element.on('keydown.daterangepicker', $.proxy(this.toggle, this));\n    } //\n    // if attached to a text input, set the initial value\n    //\n\n\n    this.updateElement();\n  };\n\n  DateRangePicker.prototype = {\n    constructor: DateRangePicker,\n    setStartDate: function setStartDate(startDate) {\n      if (typeof startDate === 'string') this.startDate = moment(startDate, this.locale.format);\n      if (typeof startDate === 'object') this.startDate = moment(startDate);\n      if (!this.timePicker) this.startDate = this.startDate.startOf('day');\n      if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n\n      if (this.minDate && this.startDate.isBefore(this.minDate)) {\n        this.startDate = this.minDate.clone();\n        if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n      }\n\n      if (this.maxDate && this.startDate.isAfter(this.maxDate)) {\n        this.startDate = this.maxDate.clone();\n        if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n      }\n\n      if (!this.isShowing) this.updateElement();\n      this.updateMonthsInView();\n    },\n    setEndDate: function setEndDate(endDate) {\n      if (typeof endDate === 'string') this.endDate = moment(endDate, this.locale.format);\n      if (typeof endDate === 'object') this.endDate = moment(endDate);\n      if (!this.timePicker) this.endDate = this.endDate.endOf('day');\n      if (this.timePicker && this.timePickerIncrement) this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);\n      if (this.endDate.isBefore(this.startDate)) this.endDate = this.startDate.clone();\n      if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate.clone();\n      if (this.maxSpan && this.startDate.clone().add(this.maxSpan).isBefore(this.endDate)) this.endDate = this.startDate.clone().add(this.maxSpan);\n      this.previousRightTime = this.endDate.clone();\n      this.container.find('.drp-selected').html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));\n      if (!this.isShowing) this.updateElement();\n      this.updateMonthsInView();\n    },\n    isInvalidDate: function isInvalidDate() {\n      return false;\n    },\n    isCustomDate: function isCustomDate() {\n      return false;\n    },\n    updateView: function updateView() {\n      if (this.timePicker) {\n        this.renderTimePicker('left');\n        this.renderTimePicker('right');\n\n        if (!this.endDate) {\n          this.container.find('.right .calendar-time select').attr('disabled', 'disabled').addClass('disabled');\n        } else {\n          this.container.find('.right .calendar-time select').removeAttr('disabled').removeClass('disabled');\n        }\n      }\n\n      if (this.endDate) this.container.find('.drp-selected').html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));\n      this.updateMonthsInView();\n      this.updateCalendars();\n      this.updateFormInputs();\n    },\n    updateMonthsInView: function updateMonthsInView() {\n      if (this.endDate) {\n        //if both dates are visible already, do nothing\n        if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month && (this.startDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.startDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM')) && (this.endDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.endDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))) {\n          return;\n        }\n\n        this.leftCalendar.month = this.startDate.clone().date(2);\n\n        if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {\n          this.rightCalendar.month = this.endDate.clone().date(2);\n        } else {\n          this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');\n        }\n      } else {\n        if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {\n          this.leftCalendar.month = this.startDate.clone().date(2);\n          this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');\n        }\n      }\n\n      if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {\n        this.rightCalendar.month = this.maxDate.clone().date(2);\n        this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, 'month');\n      }\n    },\n    updateCalendars: function updateCalendars() {\n      if (this.timePicker) {\n        var hour, minute, second;\n\n        if (this.endDate) {\n          hour = parseInt(this.container.find('.left .hourselect').val(), 10);\n          minute = parseInt(this.container.find('.left .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);\n          }\n\n          second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.left .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n        } else {\n          hour = parseInt(this.container.find('.right .hourselect').val(), 10);\n          minute = parseInt(this.container.find('.right .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);\n          }\n\n          second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.right .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n        }\n\n        this.leftCalendar.month.hour(hour).minute(minute).second(second);\n        this.rightCalendar.month.hour(hour).minute(minute).second(second);\n      }\n\n      this.renderCalendar('left');\n      this.renderCalendar('right'); //highlight any predefined range matching the current start and end dates\n\n      this.container.find('.ranges li').removeClass('active');\n      if (this.endDate == null) return;\n      this.calculateChosenLabel();\n    },\n    renderCalendar: function renderCalendar(side) {\n      //\n      // Build the matrix of dates that will populate the calendar\n      //\n      var calendar = side == 'left' ? this.leftCalendar : this.rightCalendar;\n      var month = calendar.month.month();\n      var year = calendar.month.year();\n      var hour = calendar.month.hour();\n      var minute = calendar.month.minute();\n      var second = calendar.month.second();\n      var daysInMonth = moment([year, month]).daysInMonth();\n      var firstDay = moment([year, month, 1]);\n      var lastDay = moment([year, month, daysInMonth]);\n      var lastMonth = moment(firstDay).subtract(1, 'month').month();\n      var lastYear = moment(firstDay).subtract(1, 'month').year();\n      var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();\n      var dayOfWeek = firstDay.day(); //initialize a 6 rows x 7 columns array for the calendar\n\n      var calendar = [];\n      calendar.firstDay = firstDay;\n      calendar.lastDay = lastDay;\n\n      for (var i = 0; i < 6; i++) {\n        calendar[i] = [];\n      } //populate the calendar with date objects\n\n\n      var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;\n      if (startDay > daysInLastMonth) startDay -= 7;\n      if (dayOfWeek == this.locale.firstDay) startDay = daysInLastMonth - 6;\n      var curDate = moment([lastYear, lastMonth, startDay, 12, minute, second]);\n      var col, row;\n\n      for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {\n        if (i > 0 && col % 7 === 0) {\n          col = 0;\n          row++;\n        }\n\n        calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);\n        curDate.hour(12);\n\n        if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {\n          calendar[row][col] = this.minDate.clone();\n        }\n\n        if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {\n          calendar[row][col] = this.maxDate.clone();\n        }\n      } //make the calendar object available to hoverDate/clickDate\n\n\n      if (side == 'left') {\n        this.leftCalendar.calendar = calendar;\n      } else {\n        this.rightCalendar.calendar = calendar;\n      } //\n      // Display the calendar\n      //\n\n\n      var minDate = side == 'left' ? this.minDate : this.startDate;\n      var maxDate = this.maxDate;\n      var selected = side == 'left' ? this.startDate : this.endDate;\n      var arrow = this.locale.direction == 'ltr' ? {\n        left: 'chevron-left',\n        right: 'chevron-right'\n      } : {\n        left: 'chevron-right',\n        right: 'chevron-left'\n      };\n      var html = '<table class=\"table-condensed\">';\n      html += '<thead>';\n      html += '<tr>'; // add empty cell for week number\n\n      if (this.showWeekNumbers || this.showISOWeekNumbers) html += '<th></th>';\n\n      if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == 'left')) {\n        html += '<th class=\"prev available\"><span></span></th>';\n      } else {\n        html += '<th></th>';\n      }\n\n      var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(\" YYYY\");\n\n      if (this.showDropdowns) {\n        var currentMonth = calendar[1][1].month();\n        var currentYear = calendar[1][1].year();\n        var maxYear = maxDate && maxDate.year() || this.maxYear;\n        var minYear = minDate && minDate.year() || this.minYear;\n        var inMinYear = currentYear == minYear;\n        var inMaxYear = currentYear == maxYear;\n        var monthHtml = '<select class=\"monthselect\">';\n\n        for (var m = 0; m < 12; m++) {\n          if ((!inMinYear || minDate && m >= minDate.month()) && (!inMaxYear || maxDate && m <= maxDate.month())) {\n            monthHtml += \"<option value='\" + m + \"'\" + (m === currentMonth ? \" selected='selected'\" : \"\") + \">\" + this.locale.monthNames[m] + \"</option>\";\n          } else {\n            monthHtml += \"<option value='\" + m + \"'\" + (m === currentMonth ? \" selected='selected'\" : \"\") + \" disabled='disabled'>\" + this.locale.monthNames[m] + \"</option>\";\n          }\n        }\n\n        monthHtml += \"</select>\";\n        var yearHtml = '<select class=\"yearselect\">';\n\n        for (var y = minYear; y <= maxYear; y++) {\n          yearHtml += '<option value=\"' + y + '\"' + (y === currentYear ? ' selected=\"selected\"' : '') + '>' + y + '</option>';\n        }\n\n        yearHtml += '</select>';\n        dateHtml = monthHtml + yearHtml;\n      }\n\n      html += '<th colspan=\"5\" class=\"month\">' + dateHtml + '</th>';\n\n      if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == 'right' || this.singleDatePicker)) {\n        html += '<th class=\"next available\"><span></span></th>';\n      } else {\n        html += '<th></th>';\n      }\n\n      html += '</tr>';\n      html += '<tr>'; // add week number label\n\n      if (this.showWeekNumbers || this.showISOWeekNumbers) html += '<th class=\"week\">' + this.locale.weekLabel + '</th>';\n      $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {\n        html += '<th>' + dayOfWeek + '</th>';\n      });\n      html += '</tr>';\n      html += '</thead>';\n      html += '<tbody>'; //adjust maxDate to reflect the maxSpan setting in order to\n      //grey out end dates beyond the maxSpan\n\n      if (this.endDate == null && this.maxSpan) {\n        var maxLimit = this.startDate.clone().add(this.maxSpan).endOf('day');\n\n        if (!maxDate || maxLimit.isBefore(maxDate)) {\n          maxDate = maxLimit;\n        }\n      }\n\n      for (var row = 0; row < 6; row++) {\n        html += '<tr>'; // add week number\n\n        if (this.showWeekNumbers) html += '<td class=\"week\">' + calendar[row][0].week() + '</td>';else if (this.showISOWeekNumbers) html += '<td class=\"week\">' + calendar[row][0].isoWeek() + '</td>';\n\n        for (var col = 0; col < 7; col++) {\n          var classes = []; //highlight today's date\n\n          if (calendar[row][col].isSame(new Date(), \"day\")) classes.push('today'); //highlight weekends\n\n          if (calendar[row][col].isoWeekday() > 5) classes.push('weekend'); //grey out the dates in other months displayed at beginning and end of this calendar\n\n          if (calendar[row][col].month() != calendar[1][1].month()) classes.push('off', 'ends'); //don't allow selection of dates before the minimum date\n\n          if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day')) classes.push('off', 'disabled'); //don't allow selection of dates after the maximum date\n\n          if (maxDate && calendar[row][col].isAfter(maxDate, 'day')) classes.push('off', 'disabled'); //don't allow selection of date if a custom function decides it's invalid\n\n          if (this.isInvalidDate(calendar[row][col])) classes.push('off', 'disabled'); //highlight the currently selected start date\n\n          if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD')) classes.push('active', 'start-date'); //highlight the currently selected end date\n\n          if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')) classes.push('active', 'end-date'); //highlight dates in-between the selected dates\n\n          if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate) classes.push('in-range'); //apply custom classes for this date\n\n          var isCustom = this.isCustomDate(calendar[row][col]);\n\n          if (isCustom !== false) {\n            if (typeof isCustom === 'string') classes.push(isCustom);else Array.prototype.push.apply(classes, isCustom);\n          }\n\n          var cname = '',\n              disabled = false;\n\n          for (var i = 0; i < classes.length; i++) {\n            cname += classes[i] + ' ';\n            if (classes[i] == 'disabled') disabled = true;\n          }\n\n          if (!disabled) cname += 'available';\n          html += '<td class=\"' + cname.replace(/^\\s+|\\s+$/g, '') + '\" data-title=\"' + 'r' + row + 'c' + col + '\">' + calendar[row][col].date() + '</td>';\n        }\n\n        html += '</tr>';\n      }\n\n      html += '</tbody>';\n      html += '</table>';\n      this.container.find('.drp-calendar.' + side + ' .calendar-table').html(html);\n    },\n    renderTimePicker: function renderTimePicker(side) {\n      // Don't bother updating the time picker if it's currently disabled\n      // because an end date hasn't been clicked yet\n      if (side == 'right' && !this.endDate) return;\n      var html,\n          selected,\n          minDate,\n          maxDate = this.maxDate;\n      if (this.maxSpan && (!this.maxDate || this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate))) maxDate = this.startDate.clone().add(this.maxSpan);\n\n      if (side == 'left') {\n        selected = this.startDate.clone();\n        minDate = this.minDate;\n      } else if (side == 'right') {\n        selected = this.endDate.clone();\n        minDate = this.startDate; //Preserve the time already selected\n\n        var timeSelector = this.container.find('.drp-calendar.right .calendar-time');\n\n        if (timeSelector.html() != '') {\n          selected.hour(!isNaN(selected.hour()) ? selected.hour() : timeSelector.find('.hourselect option:selected').val());\n          selected.minute(!isNaN(selected.minute()) ? selected.minute() : timeSelector.find('.minuteselect option:selected').val());\n          selected.second(!isNaN(selected.second()) ? selected.second() : timeSelector.find('.secondselect option:selected').val());\n\n          if (!this.timePicker24Hour) {\n            var ampm = timeSelector.find('.ampmselect option:selected').val();\n            if (ampm === 'PM' && selected.hour() < 12) selected.hour(selected.hour() + 12);\n            if (ampm === 'AM' && selected.hour() === 12) selected.hour(0);\n          }\n        }\n\n        if (selected.isBefore(this.startDate)) selected = this.startDate.clone();\n        if (maxDate && selected.isAfter(maxDate)) selected = maxDate.clone();\n      } //\n      // hours\n      //\n\n\n      html = '<select class=\"hourselect\">';\n      var start = this.timePicker24Hour ? 0 : 1;\n      var end = this.timePicker24Hour ? 23 : 12;\n\n      for (var i = start; i <= end; i++) {\n        var i_in_24 = i;\n        if (!this.timePicker24Hour) i_in_24 = selected.hour() >= 12 ? i == 12 ? 12 : i + 12 : i == 12 ? 0 : i;\n        var time = selected.clone().hour(i_in_24);\n        var disabled = false;\n        if (minDate && time.minute(59).isBefore(minDate)) disabled = true;\n        if (maxDate && time.minute(0).isAfter(maxDate)) disabled = true;\n\n        if (i_in_24 == selected.hour() && !disabled) {\n          html += '<option value=\"' + i + '\" selected=\"selected\">' + i + '</option>';\n        } else if (disabled) {\n          html += '<option value=\"' + i + '\" disabled=\"disabled\" class=\"disabled\">' + i + '</option>';\n        } else {\n          html += '<option value=\"' + i + '\">' + i + '</option>';\n        }\n      }\n\n      html += '</select> '; //\n      // minutes\n      //\n\n      html += ': <select class=\"minuteselect\">';\n\n      for (var i = 0; i < 60; i += this.timePickerIncrement) {\n        var padded = i < 10 ? '0' + i : i;\n        var time = selected.clone().minute(i);\n        var disabled = false;\n        if (minDate && time.second(59).isBefore(minDate)) disabled = true;\n        if (maxDate && time.second(0).isAfter(maxDate)) disabled = true;\n\n        if (selected.minute() == i && !disabled) {\n          html += '<option value=\"' + i + '\" selected=\"selected\">' + padded + '</option>';\n        } else if (disabled) {\n          html += '<option value=\"' + i + '\" disabled=\"disabled\" class=\"disabled\">' + padded + '</option>';\n        } else {\n          html += '<option value=\"' + i + '\">' + padded + '</option>';\n        }\n      }\n\n      html += '</select> '; //\n      // seconds\n      //\n\n      if (this.timePickerSeconds) {\n        html += ': <select class=\"secondselect\">';\n\n        for (var i = 0; i < 60; i++) {\n          var padded = i < 10 ? '0' + i : i;\n          var time = selected.clone().second(i);\n          var disabled = false;\n          if (minDate && time.isBefore(minDate)) disabled = true;\n          if (maxDate && time.isAfter(maxDate)) disabled = true;\n\n          if (selected.second() == i && !disabled) {\n            html += '<option value=\"' + i + '\" selected=\"selected\">' + padded + '</option>';\n          } else if (disabled) {\n            html += '<option value=\"' + i + '\" disabled=\"disabled\" class=\"disabled\">' + padded + '</option>';\n          } else {\n            html += '<option value=\"' + i + '\">' + padded + '</option>';\n          }\n        }\n\n        html += '</select> ';\n      } //\n      // AM/PM\n      //\n\n\n      if (!this.timePicker24Hour) {\n        html += '<select class=\"ampmselect\">';\n        var am_html = '';\n        var pm_html = '';\n        if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate)) am_html = ' disabled=\"disabled\" class=\"disabled\"';\n        if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate)) pm_html = ' disabled=\"disabled\" class=\"disabled\"';\n\n        if (selected.hour() >= 12) {\n          html += '<option value=\"AM\"' + am_html + '>AM</option><option value=\"PM\" selected=\"selected\"' + pm_html + '>PM</option>';\n        } else {\n          html += '<option value=\"AM\" selected=\"selected\"' + am_html + '>AM</option><option value=\"PM\"' + pm_html + '>PM</option>';\n        }\n\n        html += '</select>';\n      }\n\n      this.container.find('.drp-calendar.' + side + ' .calendar-time').html(html);\n    },\n    updateFormInputs: function updateFormInputs() {\n      if (this.singleDatePicker || this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate))) {\n        this.container.find('button.applyBtn').removeAttr('disabled');\n      } else {\n        this.container.find('button.applyBtn').attr('disabled', 'disabled');\n      }\n    },\n    move: function move() {\n      var parentOffset = {\n        top: 0,\n        left: 0\n      },\n          containerTop;\n      var parentRightEdge = $(window).width();\n\n      if (!this.parentEl.is('body')) {\n        parentOffset = {\n          top: this.parentEl.offset().top - this.parentEl.scrollTop(),\n          left: this.parentEl.offset().left - this.parentEl.scrollLeft()\n        };\n        parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;\n      }\n\n      if (this.drops == 'up') containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;else containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top; // Force the container to it's actual width\n\n      this.container.css({\n        top: 0,\n        left: 0,\n        right: 'auto'\n      });\n      var containerWidth = this.container.outerWidth();\n      this.container[this.drops == 'up' ? 'addClass' : 'removeClass']('drop-up');\n\n      if (this.opens == 'left') {\n        var containerRight = parentRightEdge - this.element.offset().left - this.element.outerWidth();\n\n        if (containerWidth + containerRight > $(window).width()) {\n          this.container.css({\n            top: containerTop,\n            right: 'auto',\n            left: 9\n          });\n        } else {\n          this.container.css({\n            top: containerTop,\n            right: containerRight,\n            left: 'auto'\n          });\n        }\n      } else if (this.opens == 'center') {\n        var containerLeft = this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2 - containerWidth / 2;\n\n        if (containerLeft < 0) {\n          this.container.css({\n            top: containerTop,\n            right: 'auto',\n            left: 9\n          });\n        } else if (containerLeft + containerWidth > $(window).width()) {\n          this.container.css({\n            top: containerTop,\n            left: 'auto',\n            right: 0\n          });\n        } else {\n          this.container.css({\n            top: containerTop,\n            left: containerLeft,\n            right: 'auto'\n          });\n        }\n      } else {\n        var containerLeft = this.element.offset().left - parentOffset.left;\n\n        if (containerLeft + containerWidth > $(window).width()) {\n          this.container.css({\n            top: containerTop,\n            left: 'auto',\n            right: 0\n          });\n        } else {\n          this.container.css({\n            top: containerTop,\n            left: containerLeft,\n            right: 'auto'\n          });\n        }\n      }\n    },\n    show: function show(e) {\n      if (this.isShowing) return; // Create a click proxy that is private to this instance of datepicker, for unbinding\n\n      this._outsideClickProxy = $.proxy(function (e) {\n        this.outsideClick(e);\n      }, this); // Bind global datepicker mousedown for hiding and\n\n      $(document).on('mousedown.daterangepicker', this._outsideClickProxy) // also support mobile devices\n      .on('touchend.daterangepicker', this._outsideClickProxy) // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them\n      .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy) // and also close when focus changes to outside the picker (eg. tabbing between controls)\n      .on('focusin.daterangepicker', this._outsideClickProxy); // Reposition the picker if the window is resized while it's open\n\n      $(window).on('resize.daterangepicker', $.proxy(function (e) {\n        this.move(e);\n      }, this));\n      this.oldStartDate = this.startDate.clone();\n      this.oldEndDate = this.endDate.clone();\n      this.previousRightTime = this.endDate.clone();\n      this.updateView();\n      this.container.show();\n      this.move();\n      this.element.trigger('show.daterangepicker', this);\n      this.isShowing = true;\n    },\n    hide: function hide(e) {\n      if (!this.isShowing) return; //incomplete date selection, revert to last values\n\n      if (!this.endDate) {\n        this.startDate = this.oldStartDate.clone();\n        this.endDate = this.oldEndDate.clone();\n      } //if a new date range was selected, invoke the user callback function\n\n\n      if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate)) this.callback(this.startDate.clone(), this.endDate.clone(), this.chosenLabel); //if picker is attached to a text input, update it\n\n      this.updateElement();\n      $(document).off('.daterangepicker');\n      $(window).off('.daterangepicker');\n      this.container.hide();\n      this.element.trigger('hide.daterangepicker', this);\n      this.isShowing = false;\n    },\n    toggle: function toggle(e) {\n      if (this.isShowing) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    },\n    outsideClick: function outsideClick(e) {\n      var target = $(e.target); // if the page is clicked anywhere except within the daterangerpicker/button\n      // itself then call this.hide()\n\n      if ( // ie modal dialog fix\n      e.type == \"focusin\" || target.closest(this.element).length || target.closest(this.container).length || target.closest('.calendar-table').length) return;\n      this.hide();\n      this.element.trigger('outsideClick.daterangepicker', this);\n    },\n    showCalendars: function showCalendars() {\n      this.container.addClass('show-calendar');\n      this.move();\n      this.element.trigger('showCalendar.daterangepicker', this);\n    },\n    hideCalendars: function hideCalendars() {\n      this.container.removeClass('show-calendar');\n      this.element.trigger('hideCalendar.daterangepicker', this);\n    },\n    clickRange: function clickRange(e) {\n      var label = e.target.getAttribute('data-range-key');\n      this.chosenLabel = label;\n\n      if (label == this.locale.customRangeLabel) {\n        this.showCalendars();\n      } else {\n        var dates = this.ranges[label];\n        this.startDate = dates[0];\n        this.endDate = dates[1];\n\n        if (!this.timePicker) {\n          this.startDate.startOf('day');\n          this.endDate.endOf('day');\n        }\n\n        if (!this.alwaysShowCalendars) this.hideCalendars();\n        this.clickApply();\n      }\n    },\n    clickPrev: function clickPrev(e) {\n      var cal = $(e.target).parents('.drp-calendar');\n\n      if (cal.hasClass('left')) {\n        this.leftCalendar.month.subtract(1, 'month');\n        if (this.linkedCalendars) this.rightCalendar.month.subtract(1, 'month');\n      } else {\n        this.rightCalendar.month.subtract(1, 'month');\n      }\n\n      this.updateCalendars();\n    },\n    clickNext: function clickNext(e) {\n      var cal = $(e.target).parents('.drp-calendar');\n\n      if (cal.hasClass('left')) {\n        this.leftCalendar.month.add(1, 'month');\n      } else {\n        this.rightCalendar.month.add(1, 'month');\n        if (this.linkedCalendars) this.leftCalendar.month.add(1, 'month');\n      }\n\n      this.updateCalendars();\n    },\n    hoverDate: function hoverDate(e) {\n      //ignore dates that can't be selected\n      if (!$(e.target).hasClass('available')) return;\n      var title = $(e.target).attr('data-title');\n      var row = title.substr(1, 1);\n      var col = title.substr(3, 1);\n      var cal = $(e.target).parents('.drp-calendar');\n      var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col]; //highlight the dates between the start date and the date being hovered as a potential end date\n\n      var leftCalendar = this.leftCalendar;\n      var rightCalendar = this.rightCalendar;\n      var startDate = this.startDate;\n\n      if (!this.endDate) {\n        this.container.find('.drp-calendar tbody td').each(function (index, el) {\n          //skip week numbers, only look at dates\n          if ($(el).hasClass('week')) return;\n          var title = $(el).attr('data-title');\n          var row = title.substr(1, 1);\n          var col = title.substr(3, 1);\n          var cal = $(el).parents('.drp-calendar');\n          var dt = cal.hasClass('left') ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];\n\n          if (dt.isAfter(startDate) && dt.isBefore(date) || dt.isSame(date, 'day')) {\n            $(el).addClass('in-range');\n          } else {\n            $(el).removeClass('in-range');\n          }\n        });\n      }\n    },\n    clickDate: function clickDate(e) {\n      if (!$(e.target).hasClass('available')) return;\n      var title = $(e.target).attr('data-title');\n      var row = title.substr(1, 1);\n      var col = title.substr(3, 1);\n      var cal = $(e.target).parents('.drp-calendar');\n      var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col]; //\n      // this function needs to do a few things:\n      // * alternate between selecting a start and end date for the range,\n      // * if the time picker is enabled, apply the hour/minute/second from the select boxes to the clicked date\n      // * if autoapply is enabled, and an end date was chosen, apply the selection\n      // * if single date picker mode, and time picker isn't enabled, apply the selection immediately\n      // * if one of the inputs above the calendars was focused, cancel that manual input\n      //\n\n      if (this.endDate || date.isBefore(this.startDate, 'day')) {\n        //picking start\n        if (this.timePicker) {\n          var hour = parseInt(this.container.find('.left .hourselect').val(), 10);\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.left .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n\n          var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);\n          }\n\n          var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;\n          date = date.clone().hour(hour).minute(minute).second(second);\n        }\n\n        this.endDate = null;\n        this.setStartDate(date.clone());\n      } else if (!this.endDate && date.isBefore(this.startDate)) {\n        //special case: clicking the same date for start/end,\n        //but the time of the end date is before the start date\n        this.setEndDate(this.startDate.clone());\n      } else {\n        // picking end\n        if (this.timePicker) {\n          var hour = parseInt(this.container.find('.right .hourselect').val(), 10);\n\n          if (!this.timePicker24Hour) {\n            var ampm = this.container.find('.right .ampmselect').val();\n            if (ampm === 'PM' && hour < 12) hour += 12;\n            if (ampm === 'AM' && hour === 12) hour = 0;\n          }\n\n          var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);\n\n          if (isNaN(minute)) {\n            minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);\n          }\n\n          var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;\n          date = date.clone().hour(hour).minute(minute).second(second);\n        }\n\n        this.setEndDate(date.clone());\n\n        if (this.autoApply) {\n          this.calculateChosenLabel();\n          this.clickApply();\n        }\n      }\n\n      if (this.singleDatePicker) {\n        this.setEndDate(this.startDate);\n        if (!this.timePicker) this.clickApply();\n      }\n\n      this.updateView(); //This is to cancel the blur event handler if the mouse was in one of the inputs\n\n      e.stopPropagation();\n    },\n    calculateChosenLabel: function calculateChosenLabel() {\n      var customRange = true;\n      var i = 0;\n\n      for (var range in this.ranges) {\n        if (this.timePicker) {\n          var format = this.timePickerSeconds ? \"YYYY-MM-DD HH:mm:ss\" : \"YYYY-MM-DD HH:mm\"; //ignore times when comparing dates if time picker seconds is not enabled\n\n          if (this.startDate.format(format) == this.ranges[range][0].format(format) && this.endDate.format(format) == this.ranges[range][1].format(format)) {\n            customRange = false;\n            this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');\n            break;\n          }\n        } else {\n          //ignore times when comparing dates if time picker is not enabled\n          if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {\n            customRange = false;\n            this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');\n            break;\n          }\n        }\n\n        i++;\n      }\n\n      if (customRange) {\n        if (this.showCustomRangeLabel) {\n          this.chosenLabel = this.container.find('.ranges li:last').addClass('active').attr('data-range-key');\n        } else {\n          this.chosenLabel = null;\n        }\n\n        this.showCalendars();\n      }\n    },\n    clickApply: function clickApply(e) {\n      this.hide();\n      this.element.trigger('apply.daterangepicker', this);\n    },\n    clickCancel: function clickCancel(e) {\n      this.startDate = this.oldStartDate;\n      this.endDate = this.oldEndDate;\n      this.hide();\n      this.element.trigger('cancel.daterangepicker', this);\n    },\n    monthOrYearChanged: function monthOrYearChanged(e) {\n      var isLeft = $(e.target).closest('.drp-calendar').hasClass('left'),\n          leftOrRight = isLeft ? 'left' : 'right',\n          cal = this.container.find('.drp-calendar.' + leftOrRight); // Month must be Number for new moment versions\n\n      var month = parseInt(cal.find('.monthselect').val(), 10);\n      var year = cal.find('.yearselect').val();\n\n      if (!isLeft) {\n        if (year < this.startDate.year() || year == this.startDate.year() && month < this.startDate.month()) {\n          month = this.startDate.month();\n          year = this.startDate.year();\n        }\n      }\n\n      if (this.minDate) {\n        if (year < this.minDate.year() || year == this.minDate.year() && month < this.minDate.month()) {\n          month = this.minDate.month();\n          year = this.minDate.year();\n        }\n      }\n\n      if (this.maxDate) {\n        if (year > this.maxDate.year() || year == this.maxDate.year() && month > this.maxDate.month()) {\n          month = this.maxDate.month();\n          year = this.maxDate.year();\n        }\n      }\n\n      if (isLeft) {\n        this.leftCalendar.month.month(month).year(year);\n        if (this.linkedCalendars) this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');\n      } else {\n        this.rightCalendar.month.month(month).year(year);\n        if (this.linkedCalendars) this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');\n      }\n\n      this.updateCalendars();\n    },\n    timeChanged: function timeChanged(e) {\n      var cal = $(e.target).closest('.drp-calendar'),\n          isLeft = cal.hasClass('left');\n      var hour = parseInt(cal.find('.hourselect').val(), 10);\n      var minute = parseInt(cal.find('.minuteselect').val(), 10);\n\n      if (isNaN(minute)) {\n        minute = parseInt(cal.find('.minuteselect option:last').val(), 10);\n      }\n\n      var second = this.timePickerSeconds ? parseInt(cal.find('.secondselect').val(), 10) : 0;\n\n      if (!this.timePicker24Hour) {\n        var ampm = cal.find('.ampmselect').val();\n        if (ampm === 'PM' && hour < 12) hour += 12;\n        if (ampm === 'AM' && hour === 12) hour = 0;\n      }\n\n      if (isLeft) {\n        var start = this.startDate.clone();\n        start.hour(hour);\n        start.minute(minute);\n        start.second(second);\n        this.setStartDate(start);\n\n        if (this.singleDatePicker) {\n          this.endDate = this.startDate.clone();\n        } else if (this.endDate && this.endDate.format('YYYY-MM-DD') == start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {\n          this.setEndDate(start.clone());\n        }\n      } else if (this.endDate) {\n        var end = this.endDate.clone();\n        end.hour(hour);\n        end.minute(minute);\n        end.second(second);\n        this.setEndDate(end);\n      } //update the calendars so all clickable dates reflect the new time component\n\n\n      this.updateCalendars(); //update the form inputs above the calendars with the new time\n\n      this.updateFormInputs(); //re-render the time pickers because changing one selection can affect what's enabled in another\n\n      this.renderTimePicker('left');\n      this.renderTimePicker('right');\n    },\n    elementChanged: function elementChanged() {\n      if (!this.element.is('input')) return;\n      if (!this.element.val().length) return;\n      var dateString = this.element.val().split(this.locale.separator),\n          start = null,\n          end = null;\n\n      if (dateString.length === 2) {\n        start = moment(dateString[0], this.locale.format);\n        end = moment(dateString[1], this.locale.format);\n      }\n\n      if (this.singleDatePicker || start === null || end === null) {\n        start = moment(this.element.val(), this.locale.format);\n        end = start;\n      }\n\n      if (!start.isValid() || !end.isValid()) return;\n      this.setStartDate(start);\n      this.setEndDate(end);\n      this.updateView();\n    },\n    keydown: function keydown(e) {\n      //hide on tab or enter\n      if (e.keyCode === 9 || e.keyCode === 13) {\n        this.hide();\n      } //hide on esc and prevent propagation\n\n\n      if (e.keyCode === 27) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.hide();\n      }\n    },\n    updateElement: function updateElement() {\n      if (this.element.is('input') && this.autoUpdateInput) {\n        var newValue = this.startDate.format(this.locale.format);\n\n        if (!this.singleDatePicker) {\n          newValue += this.locale.separator + this.endDate.format(this.locale.format);\n        }\n\n        if (newValue !== this.element.val()) {\n          this.element.val(newValue).trigger('change');\n        }\n      }\n    },\n    remove: function remove() {\n      this.container.remove();\n      this.element.off('.daterangepicker');\n      this.element.removeData();\n    }\n  };\n\n  $.fn.daterangepicker = function (options, callback) {\n    var implementOptions = $.extend(true, {}, $.fn.daterangepicker.defaultOptions, options);\n    this.each(function () {\n      var el = $(this);\n      if (el.data('daterangepicker')) el.data('daterangepicker').remove();\n      el.data('daterangepicker', new DateRangePicker(el, implementOptions, callback));\n    });\n    return this;\n  };\n\n  return DateRangePicker;\n});","map":null,"metadata":{},"sourceType":"script"}