{"ast":null,"code":"function yScaleAnimation(fractionComplete, animationInfo) {\n  if (fractionComplete === 0) return;\n  var ctx = animationInfo.dest;\n  var sourceCanvas = animationInfo.source.canvas;\n  var base = animationInfo.animationBase;\n  var offsetY = base - base * fractionComplete;\n  ctx.drawImage(sourceCanvas, 0, 0, sourceCanvas.width, sourceCanvas.height, 0, offsetY, ctx.canvas.width / devicePixelBackingStoreRatio, fractionComplete * ctx.canvas.height / devicePixelBackingStoreRatio);\n}\n\nfunction xScaleAnimation(fractionComplete, animationInfo) {\n  if (fractionComplete === 0) return;\n  var ctx = animationInfo.dest;\n  var sourceCanvas = animationInfo.source.canvas;\n  var base = animationInfo.animationBase;\n  var offsetX = base - base * fractionComplete;\n  ctx.drawImage(sourceCanvas, 0, 0, sourceCanvas.width, sourceCanvas.height, offsetX, 0, fractionComplete * ctx.canvas.width / devicePixelBackingStoreRatio, ctx.canvas.height / devicePixelBackingStoreRatio);\n}\n\nfunction xClipAnimation(fractionComplete, animationInfo) {\n  if (fractionComplete === 0) return;\n  var ctx = animationInfo.dest;\n  var sourceCanvas = animationInfo.source.canvas;\n  ctx.save();\n  if (fractionComplete > 0) ctx.drawImage(sourceCanvas, 0, 0, sourceCanvas.width * fractionComplete, sourceCanvas.height, 0, 0, sourceCanvas.width * fractionComplete / devicePixelBackingStoreRatio, sourceCanvas.height / devicePixelBackingStoreRatio);\n  ctx.restore();\n}\n\nfunction fadeInAnimation(fractionComplete, animationInfo) {\n  if (fractionComplete === 0) return;\n  var ctx = animationInfo.dest;\n  var sourceCanvas = animationInfo.source.canvas;\n  ctx.save();\n  ctx.globalAlpha = fractionComplete;\n  ctx.drawImage(sourceCanvas, 0, 0, sourceCanvas.width, sourceCanvas.height, 0, 0, ctx.canvas.width / devicePixelBackingStoreRatio, ctx.canvas.height / devicePixelBackingStoreRatio);\n  ctx.restore();\n}\n\nvar easing = {\n  linear: function linear(t, b, c, d) {\n    return c * t / d + b;\n  },\n  easeOutQuad: function easeOutQuad(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  easeOutQuart: function easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  },\n  easeInQuad: function easeInQuad(t, b, c, d) {\n    return c * (t /= d) * t + b;\n  },\n  easeInQuart: function easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n  }\n};\nexport default {\n  yScaleAnimation: yScaleAnimation,\n  xScaleAnimation: xScaleAnimation,\n  xClipAnimation: xClipAnimation,\n  fadeInAnimation: fadeInAnimation,\n  easing: easing\n};","map":null,"metadata":{},"sourceType":"module"}