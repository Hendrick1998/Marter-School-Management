{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SilverKing\\\\Documents\\\\MSM\\\\msm\\\\src\\\\components\\\\Chart.jsx\";\nimport React from \"react\";\nimport \"./Chart.css\";\n\nclass Chart extends React.Component {\n  componentDidMount() {\n    $(document).ready(function () {\n      initLineGraph();\n    });\n    /* I am fully aware that all of this code should be made into a class or jQuery plugin */\n\n    /* point attributes object to pass to raphael.js*/\n\n    var pointOptions = {\n      'fill': '#333333',\n      'stroke': '#7a7a7a',\n      radius: 6\n      /* line attributes object to pass to raphael.js*/\n\n    };\n    var lineOptions = {\n      'stroke': 'rgba(102, 102, 102, .08)',\n      'stroke-width': 2,\n      'fill': '#000',\n\n      /* nice inner shadow for line, requires line be convex and closed off */\n      'fill-opacity': 0.03\n      /* <-- doesn't work in old IEs */\n\n      /* initialize graph */\n\n    };\n\n    function initLineGraph() {\n      /* set up raphael.js canvas with the elements of the graph element */\n      var paper = new Raphael(document.getElementById('line-graph'), $('#line-graph').width(), $('#line-graph').height());\n      graphData.paper = paper;\n      /* create initial line*/\n\n      var path = createPathString(graphData);\n      /* draw intial line with raphael.js */\n\n      var line = paper.path(path);\n      /* set line drawing attributes */\n\n      line.attr(lineOptions);\n      /* save line to our global(I know, I know) data object */\n\n      graphData.line = line;\n      /* draw initial points */\n\n      drawPoints(graphData, pointOptions);\n      /* set graph auto changing (for demo purposes) */\n\n      setInterval(function () {\n        advanceGraph();\n      }, 3000);\n    }\n    /* changes between data sets in global graph object */\n\n\n    function advanceGraph() {\n      if (graphData.current < graphData.charts.length - 1) {\n        graphData.current++;\n      } else {\n        graphData.current = 1;\n      }\n      /* animate to new data positions */\n\n\n      animatePoints(graphData, graphData.charts[graphData.current]);\n    }\n    /* draw initial points */\n\n\n    function drawPoints(data, options) {\n      /* point radius */\n      var radius = options.radius;\n      /* set points to initial data set */\n\n      var points = data.charts[0].points;\n      /* iterate through points */\n\n      for (var i = 0, length = points.length; i < length; i++) {\n        /* calculate x and y positions: x delta is a constant, y value is intially set to start at 0 on y axis */\n\n        /* xOffset and yOffets values are the locations within the canvas where the x and y axes are located */\n        var xPos = data.xOffset + i * data.xDelta;\n        var yPos = data.yOffset;\n        /* draw */\n\n        var circle = data.paper.circle(xPos, yPos, radius);\n        circle.attr(pointOptions);\n        /* store raphael.js point object in global data set */\n\n        points[i].point = circle;\n      }\n    }\n    /* animate points into new positions */\n\n    /* data is the global data object, newData is the new dataset to animate to*/\n\n\n    function animatePoints(data, newData) {\n      /* varibale to hold new raphael path string */\n      var newPath = '';\n      /* upper and lower limits are the limits of the data set and are used to scale the data values into pixel positions */\n\n      var upperLimit = parseInt(newData.upper);\n\n      if (isNaN(upperLimit)) {\n        /* don't set to 0 to avoid divide by 0 error */\n        upperLimit = 1;\n      }\n\n      var lowerLimit = parseInt(newData.lower);\n\n      if (isNaN(lowerLimit)) {\n        lowerLimit = 0;\n      }\n      /* used to calculate pixel positions based on limits */\n\n\n      var scaleFactor = data.yOffset / (upperLimit - lowerLimit);\n      /* get initial points from global data  */\n\n      var points = data.charts[0].points;\n      /* loop through points */\n\n      for (var i = 0, length = points.length; i < length; i++) {\n        /* if this is the first point add an 'M' set to start drawing the raphael.js path  or use and 'L' set */\n        if (i == 0) {\n          /* I have hard coded the start of the line, sorry */\n          newPath += 'M 25 291 L ';\n          /* since the x axis is constant, pass along the original x coordinate */\n\n          newX = data.xOffset + ' ';\n          newPath += newX;\n          /* calculate the new y value using scale factor and limits */\n\n          newY = data.yOffset - (newData.points[i].value - lowerLimit) * scaleFactor + ' ';\n          /* add new y to path string */\n\n          newPath += newY;\n        } else {\n          newPath += ' L ';\n          newX = data.xOffset + i * data.xDelta + ' ';\n          newPath += newX;\n          newY = data.yOffset - (newData.points[i].value - lowerLimit) * scaleFactor;\n          newPath += newY;\n        }\n        /* animate raphael.js points to new positions */\n\n\n        points[i].point.animate({\n          cy: data.yOffset - (newData.points[i].value - lowerLimit) * scaleFactor\n        }, 800, 'ease-in-out');\n      }\n      /* add end of path string, sorry hardcoded again */\n\n\n      newPath += ' L 989 291 Z';\n      /* animate raphael.js line into new position */\n\n      data.line.animate({\n        path: newPath\n      }, 800, 'ease-in-out');\n    }\n    /* create a raphael.js path string based on a data set */\n\n\n    function createPathString(data) {\n      var points = data.charts[data.current].points;\n      var path = 'M 25 291 L ' + data.xOffset + ' ' + (data.yOffset - points[0].value);\n      var prevY = data.yOffset - points[0].value;\n\n      for (var i = 1, length = points.length; i < length; i++) {\n        path += ' L ';\n        path += data.xOffset + i * data.xDelta + ' ';\n        path += data.yOffset - points[i].value;\n        prevY = data.yOffset - points[i].value;\n      }\n\n      path += ' L 989 291 Z';\n      return path;\n    }\n    /**** Global Data Object *****/\n\n\n    var graphData = {\n      current: 0,\n\n      /* constant distance between points on the x axis */\n      xDelta: 69,\n\n      /* location of y axis in horizontal space */\n      xOffset: 214,\n\n      /* location of x axis in vertical space */\n      yOffset: 289,\n      charts: [{\n        lower: 0,\n        upper: 200,\n        points: [{\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }, {\n          value: 0\n        }]\n      }, {\n        lower: 0,\n        upper: 200,\n        points: [{\n          value: 58\n        }, {\n          value: 64\n        }, {\n          value: 12\n        }, {\n          value: 90\n        }, {\n          value: 101\n        }, {\n          value: 87\n        }, {\n          value: 53\n        }, {\n          value: 72\n        }, {\n          value: 88\n        }, {\n          value: 109\n        }, {\n          value: 45\n        }, {\n          value: 37\n        }]\n      }, {\n        lower: 0,\n        upper: 200,\n        points: [{\n          value: 132\n        }, {\n          value: 112\n        }, {\n          value: 124\n        }, {\n          value: 73\n        }, {\n          value: 92\n        }, {\n          value: 47\n        }, {\n          value: 67\n        }, {\n          value: 35\n        }, {\n          value: 112\n        }, {\n          value: 90\n        }, {\n          value: 75\n        }, {\n          value: 62\n        }]\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Line Graph with Raphael.js\"), React.createElement(\"div\", {\n      id: \"line-graph\",\n      class: \"line-graph\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["C:\\Users\\SilverKing\\Documents\\MSM\\msm\\src\\components\\Chart.jsx"],"names":["React","Chart","Component","componentDidMount","$","document","ready","initLineGraph","pointOptions","radius","lineOptions","paper","Raphael","getElementById","width","height","graphData","path","createPathString","line","attr","drawPoints","setInterval","advanceGraph","current","charts","length","animatePoints","data","options","points","i","xPos","xOffset","xDelta","yPos","yOffset","circle","point","newData","newPath","upperLimit","parseInt","upper","isNaN","lowerLimit","lower","scaleFactor","newX","newY","value","animate","cy","prevY","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./Chart.css\";\r\nclass Chart extends React.Component {\r\n componentDidMount(){\r\n  $(document).ready(function(){\r\n    initLineGraph();\r\n  });\r\n  \r\n  /* I am fully aware that all of this code should be made into a class or jQuery plugin */\r\n  \r\n  /* point attributes object to pass to raphael.js*/\r\n  var pointOptions = {\r\n    'fill' : '#333333',\r\n    'stroke' : '#7a7a7a',\r\n    radius : 6\r\n  }\r\n  \r\n  /* line attributes object to pass to raphael.js*/    \r\n  var lineOptions = {\r\n    'stroke': 'rgba(102, 102, 102, .08)',\r\n    'stroke-width': 2,\r\n    'fill': '#000',\r\n    /* nice inner shadow for line, requires line be convex and closed off */\r\n    'fill-opacity': 0.03 /* <-- doesn't work in old IEs */\r\n  }\r\n  \r\n  /* initialize graph */    \r\n  function initLineGraph () {\r\n    /* set up raphael.js canvas with the elements of the graph element */\r\n    var paper = new Raphael(document.getElementById('line-graph'), $('#line-graph').width(), $('#line-graph').height());  \r\n    graphData.paper = paper;\r\n    \r\n    /* create initial line*/\r\n    var path = createPathString(graphData);\r\n    /* draw intial line with raphael.js */\r\n    var line = paper.path(path); \r\n    \r\n    /* set line drawing attributes */\r\n    line.attr(lineOptions);\r\n    \r\n    /* save line to our global(I know, I know) data object */\r\n    graphData.line = line;\r\n  \r\n    /* draw initial points */\r\n    drawPoints(graphData, pointOptions);\r\n    \r\n    /* set graph auto changing (for demo purposes) */\r\n    setInterval(function(){\r\n      advanceGraph();\r\n    }, 3000);\r\n  \r\n  }\r\n  \r\n  /* changes between data sets in global graph object */\r\n  function advanceGraph() {\r\n    if(graphData.current < graphData.charts.length -1) {\r\n      graphData.current++;\r\n    }\r\n    else {\r\n      graphData.current = 1;\r\n    }\r\n    \r\n    /* animate to new data positions */\r\n    animatePoints(graphData, graphData.charts[graphData.current]);\r\n  }\r\n  \r\n  /* draw initial points */\r\n  function drawPoints(data, options) {\r\n    \r\n    /* point radius */\r\n    var radius = options.radius;\r\n    /* set points to initial data set */\r\n    var points = data.charts[0].points;\r\n    \r\n    /* iterate through points */\r\n    for (var i = 0, length = points.length; i < length; i++) {\r\n      /* calculate x and y positions: x delta is a constant, y value is intially set to start at 0 on y axis */\r\n      /* xOffset and yOffets values are the locations within the canvas where the x and y axes are located */\r\n      var xPos = data.xOffset + (i * data.xDelta);\r\n      var yPos = data.yOffset;\r\n      \r\n      /* draw */\r\n      var circle = data.paper.circle(xPos, yPos, radius);\r\n      circle.attr(pointOptions);\r\n      /* store raphael.js point object in global data set */\r\n      points[i].point = circle;\r\n    }\r\n  }\r\n  \r\n  /* animate points into new positions */\r\n  /* data is the global data object, newData is the new dataset to animate to*/\r\n  function animatePoints(data, newData) {\r\n    /* varibale to hold new raphael path string */\r\n    var newPath = '';\r\n    /* upper and lower limits are the limits of the data set and are used to scale the data values into pixel positions */\r\n    var upperLimit = parseInt(newData.upper);\r\n    if(isNaN(upperLimit)) {\r\n      /* don't set to 0 to avoid divide by 0 error */\r\n      upperLimit = 1;\r\n    }\r\n    var lowerLimit = parseInt(newData.lower);\r\n    if(isNaN(lowerLimit)) {\r\n      lowerLimit = 0;\r\n    }\r\n    \r\n    /* used to calculate pixel positions based on limits */ \r\n    var scaleFactor = data.yOffset / (upperLimit - lowerLimit) ; \r\n  \r\n    /* get initial points from global data  */\r\n    var points = data.charts[0].points;\r\n    \r\n    /* loop through points */\r\n    for (var i = 0, length = points.length; i < length; i++) {\r\n      /* if this is the first point add an 'M' set to start drawing the raphael.js path  or use and 'L' set */\r\n      if(i == 0) {\r\n        /* I have hard coded the start of the line, sorry */\r\n        newPath += 'M 25 291 L ';\r\n        /* since the x axis is constant, pass along the original x coordinate */\r\n        newX = data.xOffset + ' ';\r\n        newPath += newX;\r\n        /* calculate the new y value using scale factor and limits */\r\n        newY = data.yOffset - ((newData.points[i].value - lowerLimit) * scaleFactor) + ' ';\r\n        /* add new y to path string */\r\n        newPath += newY;\r\n      }\r\n      else {\r\n        newPath += ' L ';\r\n        newX = data.xOffset + (i * data.xDelta) + ' ';\r\n        newPath += newX;\r\n        newY = data.yOffset - ((newData.points[i].value - lowerLimit) * scaleFactor);\r\n        newPath += newY;\r\n      }\r\n      \r\n      /* animate raphael.js points to new positions */\r\n      points[i].point.animate({\r\n          cy : data.yOffset - ((newData.points[i].value - lowerLimit) * scaleFactor)\r\n        },\r\n        800,\r\n        'ease-in-out'\r\n      );\r\n    }\r\n    /* add end of path string, sorry hardcoded again */\r\n    newPath += ' L 989 291 Z';\r\n    \r\n    /* animate raphael.js line into new position */\r\n    data.line.animate({path : newPath}, 800, 'ease-in-out');\r\n  }\r\n  \r\n  /* create a raphael.js path string based on a data set */\r\n  function createPathString(data) {\r\n  \r\n    var points = data.charts[data.current].points;\r\n  \r\n    \r\n    var path = 'M 25 291 L ' + data.xOffset + ' ' + (data.yOffset - points[0].value);\r\n    var prevY = data.yOffset - points[0].value;\r\n  \r\n    for (var i = 1, length = points.length; i < length; i++) {\r\n      path += ' L ';\r\n      path += data.xOffset + (i * data.xDelta) + ' ';\r\n      path += (data.yOffset - points[i].value);\r\n  \r\n      prevY = data.yOffset - points[i].value;\r\n    }\r\n    path += ' L 989 291 Z';\r\n    return path;\r\n  }\r\n  \r\n  /**** Global Data Object *****/\r\n    var graphData = {\r\n      current     : 0,\r\n      /* constant distance between points on the x axis */\r\n      xDelta      : 69,\r\n      /* location of y axis in horizontal space */\r\n      xOffset     : 214,\r\n      /* location of x axis in vertical space */\r\n      yOffset     : 289,\r\n      charts      :[\r\n                {    \r\n              lower  : 0,\r\n              upper  : 200,\r\n              points : [\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0},\r\n                  { value : 0}\r\n              ]\r\n          },\r\n          {\r\n              lower  : 0,\r\n              upper  : 200,\r\n              points : [\r\n                  { value : 58},\r\n                  { value : 64},\r\n                  { value : 12},\r\n                  { value : 90},\r\n                  { value : 101},\r\n                  { value : 87},\r\n                  { value : 53},\r\n                  { value : 72},\r\n                  { value : 88},\r\n                  { value : 109},\r\n                  { value : 45},\r\n                  { value : 37}\r\n              ]\r\n          },\r\n          {\r\n              lower  : 0,\r\n              upper  : 200,\r\n              points : [\r\n                  { value : 132},\r\n                  { value : 112},\r\n                  { value : 124},\r\n                  { value : 73},\r\n                  { value : 92},\r\n                  { value : 47},\r\n                  { value : 67},\r\n                  { value : 35},\r\n                  { value : 112},\r\n                  { value : 90},\r\n                  { value : 75},\r\n                  { value : 62}\r\n              ]\r\n          }\r\n      ]\r\n  };\r\n }\r\n  render() {\r\n    return (\r\n     <div>\r\n       <h1>Line Graph with Raphael.js</h1>\r\n       <div id=\"line-graph\" class=\"line-graph\"></div>\r\n     </div>\r\n    )\r\n  }\r\n}\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}